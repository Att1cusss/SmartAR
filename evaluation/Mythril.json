[
    {
        "contract": "0x017a5d8d82afaa22bc29d75013d6ff3656e90851",
        "target": "[RepairTarget] ScamStampToken:transfer:43\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x017a5d8d82afaa22bc29d75013d6ff3656e90851",
        "target": "[RepairTarget] ScamStampToken:transfer:42\nCODE: balances[msg.sender] += _amount + _amount\nOPERATION: balances[msg.sender] [+=] _amount + _amount\nSSA: REF_4 [+] TMP_4 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x017a5d8d82afaa22bc29d75013d6ff3656e90851",
        "target": "[RepairTarget] ScamStampToken:transfer:44\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_6 [+] _amount_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x017a5d8d82afaa22bc29d75013d6ff3656e90851",
        "target": "[RepairTarget] ScamStampToken:transfer:42\nCODE: balances[msg.sender] += _amount + _amount\nOPERATION: _amount [+] _amount\nSSA: _amount_1 [+] _amount_1 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0429047892b8a903c0b4fbbd26e85d288f7af958",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x15a058323dcd425be52b9340fb13d7d1f135f554",
        "target": "[RepairTarget] TeaToken:fallback:101\nCODE: totalAmountOfWeiCollected += amount\nOPERATION: totalAmountOfWeiCollected [+=] amount\nSSA: totalAmountOfWeiCollected_1 [+] amount_1 --> totalAmountOfWeiCollected_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3686986e559f257cfaccb44f17af5b245e45814f",
        "target": "[RepairTarget] ZEROtoken:fallback:57\nCODE: uint256 tokensIssued = (msg.value * 10000)\nOPERATION: msg.value [*] 10000\nSSA: msg.value [*] 10000 --> TMP_40\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3686986e559f257cfaccb44f17af5b245e45814f",
        "target": "[RepairTarget] ZEROtoken:fallback:61\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_3 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4fa09edccfdf5738a5493e40a4b5753cebc0078c",
        "target": "[RepairTarget] TemplateCrowdSale:fallback:52\nCODE: tokenReward.transfer(msg.sender, amount*10000 / price)\nOPERATION: amount*10000 [/] price\nSSA: TMP_7 [/] price_2 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4fa09edccfdf5738a5493e40a4b5753cebc0078c",
        "target": "[RepairTarget] TemplateCrowdSale:fallback:52\nCODE: tokenReward.transfer(msg.sender, amount*10000 / price)\nOPERATION: amount [*] 10000\nSSA: amount_1 [*] 10000 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x51ee82641ac238bde34b9859f98f5f311d6e4954",
        "target": "[RepairTarget] IssueIQTToken:transfer:79\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x51ee82641ac238bde34b9859f98f5f311d6e4954",
        "target": "[RepairTarget] IssueIQTToken:transferFrom:104\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5d65d971895edc438f465c17db6992698a52318d",
        "target": "[RepairTarget] StandardToken:transferFrom:66\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6dcf8319b3c6fffd4ac6079a7cc336d1c5562f80",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7cf5216e59141dd6679a4f8573f22430ef51e75b",
        "target": "[RepairTarget] SandwichShop:checkoutCart:152\nCODE: x++\nOPERATION: [++] x\nSSA: x_2 [+] 1 --> x_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8b2c66d91f5751b905fa801668c9b61ae3975282",
        "target": "[RepairTarget] EthTermDeposits:Deposit:19\nCODE: uint _time = block.timestamp + numberOfWeeks * 1 weeks\nOPERATION: block.timestamp [+] numberOfWeeks * 1 weeks\nSSA: block.timestamp [+] TMP_0 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8b2c66d91f5751b905fa801668c9b61ae3975282",
        "target": "[RepairTarget] EthTermDeposits:Deposit:22\nCODE: _time = depositEndTime[owner] + numberOfWeeks * 1 weeks\nOPERATION: depositEndTime[owner] [+] numberOfWeeks * 1 weeks\nSSA: REF_1 [+] TMP_3 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8b2c66d91f5751b905fa801668c9b61ae3975282",
        "target": "[RepairTarget] EthTermDeposits:Deposit:19\nCODE: uint _time = block.timestamp + numberOfWeeks * 1 weeks\nOPERATION: numberOfWeeks [*] 1 weeks\nSSA: numberOfWeeks_1 [*] 604800 --> TMP_0\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8b2c66d91f5751b905fa801668c9b61ae3975282",
        "target": "[RepairTarget] EthTermDeposits:Deposit:22\nCODE: _time = depositEndTime[owner] + numberOfWeeks * 1 weeks\nOPERATION: numberOfWeeks [*] 1 weeks\nSSA: numberOfWeeks_1 [*] 604800 --> TMP_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8b2c66d91f5751b905fa801668c9b61ae3975282",
        "target": "[RepairTarget] EthTermDeposits:Deposit:25\nCODE: deposits[owner] += amount\nOPERATION: deposits[owner] [+=] amount\nSSA: REF_3 [+] amount_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa2999b0537666ea45cb1455829362c3c5411248b",
        "target": "[RepairTarget] StandardToken:transferFrom:121\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad8467896a1eb71c47c753ff58e780b72d26ff2e",
        "target": "[RepairTarget] ScamSealToken:transfer:45\nCODE: balances[msg.sender] += _amount + _amount\nOPERATION: balances[msg.sender] [+=] _amount + _amount\nSSA: REF_4 [+] TMP_4 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad8467896a1eb71c47c753ff58e780b72d26ff2e",
        "target": "[RepairTarget] ScamSealToken:transfer:46\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad8467896a1eb71c47c753ff58e780b72d26ff2e",
        "target": "[RepairTarget] ScamSealToken:transfer:47\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_6 [+] _amount_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad8467896a1eb71c47c753ff58e780b72d26ff2e",
        "target": "[RepairTarget] ScamSealToken:transfer:45\nCODE: balances[msg.sender] += _amount + _amount\nOPERATION: _amount [+] _amount\nSSA: _amount_1 [+] _amount_1 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb228668bc6f79be14f42e5985c1853307550fd27",
        "target": "[RepairTarget] ExcreteumToken:transfer:96\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_6 [+] _amount_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb228668bc6f79be14f42e5985c1853307550fd27",
        "target": "[RepairTarget] ExcreteumToken:transferFrom:122\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbbd1cf274afd8b648416248e73c860dbb2280f1a",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd08c0b2f4b98cabf4ac9efc9a541f6ffbcbc3441",
        "target": "[RepairTarget] Coin:mint:23\nCODE: balances[receiver] += amount\nOPERATION: balances[receiver] [+=] amount\nSSA: REF_1 [+] amount_1 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd08c0b2f4b98cabf4ac9efc9a541f6ffbcbc3441",
        "target": "[RepairTarget] Coin:send:28\nCODE: balances[receiver]+ amount < balances[receiver]\nOPERATION: balances[receiver] [+] amount\nSSA: REF_3 [+] amount_1 --> TMP_2\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xef445421534ebd290e9bbbcee283715b3629de90",
        "target": "[RepairTarget] StatereumCoin:transfer:83\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xef445421534ebd290e9bbbcee283715b3629de90",
        "target": "[RepairTarget] StatereumCoin:transferFrom:109\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x013fbaed9c80cc4422ff50d71f4dc622bc7c8ae2",
        "target": "[RepairTarget] SPARCPresale:fallback:60\nCODE: !SPARCToken(SPARCAddress).create(msg.sender, msg.value * 20000)\nOPERATION: msg.value [*] 20000\nSSA: msg.value [*] 20000 --> TMP_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0297c3970da02bb88a411d3665e0e2ecfad20206",
        "target": "[RepairTarget] PRSTokenICO:fallback:59\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_4 [+] tokensIssued_3 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0297c3970da02bb88a411d3665e0e2ecfad20206",
        "target": "[RepairTarget] PRSTokenICO:fallback:58\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_3 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0297c3970da02bb88a411d3665e0e2ecfad20206",
        "target": "[RepairTarget] PRSTokenICO:fallback:52\nCODE: uint256 tokensIssued = (msg.value * 100)\nOPERATION: msg.value [*] 100\nSSA: msg.value [*] 100 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x068696a3cf3c4676b65f1c9975dd094260109d02",
        "target": "[RepairTarget] DadaCollectible:buyCollectible:158\nCODE: endingWithdrawals[seller] += msg.value;\nOPERATION: endingWithdrawals[seller]  [+=] sg.value;\nSSA: REF_27 [+] msg.value --> REF_27\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x068696a3cf3c4676b65f1c9975dd094260109d02",
        "target": "[RepairTarget] DadaCollectible:transfer:380\nCODE: endingWithdrawals[to] += bid.value;\nOPERATION: endingWithdrawals[to]  [+=] id.value;\nSSA: REF_173 [+] REF_174 --> REF_173\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0b4940b7b951ae6319d9f540cda0b85753ef7cd8",
        "target": "[RepairTarget] XxxTokenSale:getRateAt:312\nCODE: at < (startDate + 49 days)\nOPERATION: startDate [+] 49 days\nSSA: startDate_2 [+] 4233600 --> TMP_116\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0b4940b7b951ae6319d9f540cda0b85753ef7cd8",
        "target": "[RepairTarget] XxxTokenSale:getRateAt:314\nCODE: at < (startDate + 63 days)\nOPERATION: startDate [+] 63 days\nSSA: startDate_2 [+] 5443200 --> TMP_118\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0b4940b7b951ae6319d9f540cda0b85753ef7cd8",
        "target": "[RepairTarget] XxxTokenSale:getRateAt:310\nCODE: at < (startDate + 35 days)\nOPERATION: startDate [+] 35 days\nSSA: startDate_2 [+] 3024000 --> TMP_114\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0b4940b7b951ae6319d9f540cda0b85753ef7cd8",
        "target": "[RepairTarget] XxxTokenSale:getRateAt:316\nCODE: at < (startDate + 77 days)\nOPERATION: startDate [+] 77 days\nSSA: startDate_2 [+] 6652800 --> TMP_120\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0f33bb20a282a7649c7b3aff644f084a9348e933",
        "target": "[RepairTarget] SafeMath:mul:5\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0fdeb77225657a60e74f3a08f1bb6e69c8193de4",
        "target": "[RepairTarget] CoinAndCommunity:transfer:48\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0fdeb77225657a60e74f3a08f1bb6e69c8193de4",
        "target": "[RepairTarget] CoinAndCommunity:transferFrom:67\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x16cfdd5effccd86a1f06bffd6bdd45e3609bbef4",
        "target": "[RepairTarget] jvCoin:sendCoin:14\nCODE: balances[receiver] += amount\nOPERATION: balances[receiver] [+=] amount\nSSA: REF_3 [+] amount_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x17f93475d2a978f527c3f7c44abf44adfba60d5c",
        "target": "[RepairTarget] EtherCO2:mint:62\nCODE: balances[owner] += amount\nOPERATION: balances[owner] [+=] amount\nSSA: REF_16 [+] amount_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x17f93475d2a978f527c3f7c44abf44adfba60d5c",
        "target": "[RepairTarget] EtherCO2:transfer:24\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x17f93475d2a978f527c3f7c44abf44adfba60d5c",
        "target": "[RepairTarget] EtherCO2:transferFrom:33\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x18ce0b9fedceb66e9fb7783bbddb4565232a9c22",
        "target": "[RepairTarget] TimeBankToken:depositTokens:27\nCODE: tokenBalances[_token][msg.sender].numTokens += _amount\nOPERATION: tokenBalances[_token][msg.sender].numTokens [+=] _amount\nSSA: REF_14 [+] _amount_1 --> REF_14\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1a8ad1257ba89e55fdbd71436931f9714dbfb9f6",
        "target": "[RepairTarget] PizzaPoll:Vote:27\nCODE: likeCount[msg.sender] += 1\nOPERATION: likeCount[msg.sender] [+=] 1\nSSA: REF_5 [+] 1 --> REF_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1a8ad1257ba89e55fdbd71436931f9714dbfb9f6",
        "target": "[RepairTarget] PizzaPoll:Vote:31\nCODE: dislikeCount[msg.sender] += 1\nOPERATION: dislikeCount[msg.sender] [+=] 1\nSSA: REF_6 [+] 1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2160e6c0ae8ca7d62fe1f57fc049f8363283ff5f",
        "target": "[RepairTarget] BlockpassToken:transferFrom:64\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2160e6c0ae8ca7d62fe1f57fc049f8363283ff5f",
        "target": "[RepairTarget] BlockpassToken:fallback:140\nCODE: totalContribution += msg.value\nOPERATION: totalContribution [+=] msg.value\nSSA: totalContribution_2 [+] msg.value --> totalContribution_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2160e6c0ae8ca7d62fe1f57fc049f8363283ff5f",
        "target": "[RepairTarget] BlockpassToken:fallback:144\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_26 [+] tokensIssued_1 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2160e6c0ae8ca7d62fe1f57fc049f8363283ff5f",
        "target": "[RepairTarget] BlockpassToken:transfer:36\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x24f6e01b38ab37de9bc5cb0e0d9a26eb0e347881",
        "target": "[RepairTarget] IntelliShareEco:transferFrom:52\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2d856e799b8ad85a3af7e9a4ed6bed685e797ef3",
        "target": "[RepairTarget] Bitcoinpro:distributeBTR:42\nCODE: balances[addresses[i]] += 2000 * 10**8\nOPERATION: balances[addresses[i]] [+=] 2000 * 10**8\nSSA: 2000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2d856e799b8ad85a3af7e9a4ed6bed685e797ef3",
        "target": "[RepairTarget] Bitcoinpro:distributeBTR:43\nCODE: Transfer(owner, addresses[i], 2000 * 10**8)\nOPERATION: 2000 [*] 10**8\nSSA: 2000 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2d856e799b8ad85a3af7e9a4ed6bed685e797ef3",
        "target": "[RepairTarget] Bitcoinpro:distributeBTR:42\nCODE: balances[addresses[i]] += 2000 * 10**8\nOPERATION: 2000 [*] 10**8\nSSA: 2000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2d856e799b8ad85a3af7e9a4ed6bed685e797ef3",
        "target": "[RepairTarget] Bitcoinpro:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2d856e799b8ad85a3af7e9a4ed6bed685e797ef3",
        "target": "[RepairTarget] Bitcoinpro:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2f5e044ad4adac34c8d8df738fac7743eda1409c",
        "target": "[RepairTarget] AgoraToken:buy:144\nCODE: raised += msg.value\nOPERATION: raised [+=] msg.value\nSSA: raised_2 [+] msg.value --> raised_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2f5e044ad4adac34c8d8df738fac7743eda1409c",
        "target": "[RepairTarget] AgoraToken:buy:141\nCODE: balances[msg.sender] += tokenAmount\nOPERATION: balances[msg.sender] [+=] tokenAmount\nSSA: REF_21 [+] tokenAmount_3 --> REF_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x30e527243f0345cbad4e816af96c6363e431678e",
        "target": "[RepairTarget] StandardToken:transferFrom:81\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x33ee6acbfa35f473efbab43546ca1d2baf640d96",
        "target": "[RepairTarget] TunDrMahathirMohammad:transfer:80\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x33ee6acbfa35f473efbab43546ca1d2baf640d96",
        "target": "[RepairTarget] TunDrMahathirMohammad:transferFrom:105\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x390365cef67dae207db323496d24f643dd3ae581",
        "target": "[RepairTarget] tokenHodl:fallback:15\nCODE: hodlers[msg.sender] += msg.value\nOPERATION: hodlers[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x39f11a8a601cc962ac26219596af3750aa4395c2",
        "target": "[RepairTarget] Token:fallback:97\nCODE: amountRaised += _amount\nOPERATION: amountRaised [+=] _amount\nSSA: amountRaised_1 [+] _amount_2 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x39f11a8a601cc962ac26219596af3750aa4395c2",
        "target": "[RepairTarget] Token:transfer:55\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x39f11a8a601cc962ac26219596af3750aa4395c2",
        "target": "[RepairTarget] Token:transferFrom:73\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3cd4048167142120a796b446a2a45d1b856c5ef7",
        "target": "[RepairTarget] StandardToken:transferFrom:44\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:pre_ico:246\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_32 [+] REF_33 --> REF_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:258\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_41 [-] REF_42 --> TMP_98\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:267\nCODE: optsSent[counter] = (220*value)/10000000000\nOPERATION: 220 [*] value\nSSA: 220 [*] value_1 --> TMP_106\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:259\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_44 [+] REF_45 --> REF_44\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:269\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_56 [+] REF_57 --> REF_56\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:279\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_68 [+] REF_69 --> REF_68\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:278\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_65 [-] REF_66 --> TMP_118\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:268\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_53 [-] REF_54 --> TMP_108\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:262\nCODE: now >= (ico_start + 7 days) && now <= (ico_start + 14 days)\nOPERATION: ico_start [+] 7 days\nSSA: ico_start_3 [+] 1209600 --> TMP_102\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:262\nCODE: now >= (ico_start + 7 days) && now <= (ico_start + 14 days)\nOPERATION: ico_start [+] 14 days\nSSA: ico_start_3 [+] 604800 --> TMP_100\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:267\nCODE: optsSent[counter] = (220*value)/10000000000\nOPERATION: (220*value) [/] 10000000000\nSSA: TMP_106 [/] 10000000000 --> TMP_107\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:272\nCODE: now >= (ico_start + 14 days) && now <= (ico_start + 31 days)\nOPERATION: ico_start [+] 31 days\nSSA: ico_start_3 [+] 1209600 --> TMP_110\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x3f9b89dc8190f8fac46def0bdd5eacf826c50408",
        "target": "[RepairTarget] blockoptions:main_ico:272\nCODE: now >= (ico_start + 14 days) && now <= (ico_start + 31 days)\nOPERATION: ico_start [+] 14 days\nSSA: ico_start_3 [+] 2678400 --> TMP_112\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x41c6145c8d51c5fe2b043b61cd84324998a8d42e",
        "target": "[RepairTarget] ViewCoin:fallback:79\nCODE: uint amount = msg.value / buyPrice\nOPERATION: msg.value [/] buyPrice\nSSA: msg.value [/] buyPrice_2 --> TMP_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x41c6145c8d51c5fe2b043b61cd84324998a8d42e",
        "target": "[RepairTarget] ViewCoin:transfer:46\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x41c6145c8d51c5fe2b043b61cd84324998a8d42e",
        "target": "[RepairTarget] ViewCoin:transferFrom:55\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x41ebb67c868f5f28bcd823ddbf39c0f32b191256",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4ade33d3ac9564805d09e237011b32c3bf86ef65",
        "target": "[RepairTarget] KittenSale:fallback:46\nCODE: kittensSold += contribution\nOPERATION: kittensSold [+=] contribution\nSSA: kittensSold_2 [+] contribution_6 --> kittensSold_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4af36685d35b8889a9d8801576b28b79c7ad8209",
        "target": "[RepairTarget] SafeMath:mul:23\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x52ff8b15ef6b38cf0554ba9207d70d0d2437c56a",
        "target": "[RepairTarget] Token:fallback:97\nCODE: amountRaised += _amount\nOPERATION: amountRaised [+=] _amount\nSSA: amountRaised_1 [+] _amount_2 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x52ff8b15ef6b38cf0554ba9207d70d0d2437c56a",
        "target": "[RepairTarget] Token:transfer:55\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x52ff8b15ef6b38cf0554ba9207d70d0d2437c56a",
        "target": "[RepairTarget] Token:transferFrom:73\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x53ce47cbe7f2be0aecd086a70182a98c907d024d",
        "target": "[RepairTarget] StandardToken:transferFrom:69\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5421965adb3f722433401d82b7a5d7b2888cdbd0",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x58bf7df57d9da7113c4ccb49d8463d4908c735cb",
        "target": "[RepairTarget] SPARCToken:create:104\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_3 [+] amount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x59adcf176ed2f6788a41b8ea4c4904518e62b6a4",
        "target": "[RepairTarget] DSMath:sub:125\nCODE: assert((z = x - y) <= x)\nOPERATION: x [-] y\nSSA: x_1 [-] y_1 --> TMP_39\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5c26e6b2d1506e4e08039d4e1934cf425c611f63",
        "target": "[RepairTarget] YUNLAI:transfer:68\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_4 [-] _value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5ef93b2ebc91b3f8014207ba2b4cea718ab5e52e",
        "target": "[RepairTarget] TLTContract:transfer:38\nCODE: balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]\nOPERATION: balances[_to] [+] _amount\nSSA: REF_3 [+] _amount_1 --> TMP_3\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x5ef93b2ebc91b3f8014207ba2b4cea718ab5e52e",
        "target": "[RepairTarget] TLTContract:transferFrom:50\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x67001700b122b44012de9cf7d7fa3338fe9265b3",
        "target": "[RepairTarget] Counter:inc:5\nCODE: i=i+1\nOPERATION: i [+] 1\nSSA: i_1 [+] 1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x67c4ba7af28ee4e2e782472e01f834e087f6c857",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x78a06472d78bfef33270654319b6373d51cf0575",
        "target": "[RepairTarget] StandardToken:transferFrom:69\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7e0949df59f3e71b22c409a97887adf970fc011b",
        "target": "[RepairTarget] StandardToken:transferFrom:57\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8839aebac610f88522db2e17d9b867ee4b571bb2",
        "target": "[RepairTarget] tokenHodl:fallback:15\nCODE: hodlers[msg.sender] += msg.value\nOPERATION: hodlers[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x890e99d7a8dcf35c9de9679d2987fbdde91f2682",
        "target": "[RepairTarget] StandardToken:transfer:23\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x890e99d7a8dcf35c9de9679d2987fbdde91f2682",
        "target": "[RepairTarget] StandardToken:transferFrom:31\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4",
        "target": "[RepairTarget] AtlantBuyer:withdraw_refund:87\nCODE: refund_eth_value -= eth_to_withdraw\nOPERATION: refund_eth_value [-=] eth_to_withdraw\nSSA: refund_eth_value_1 [-] eth_to_withdraw_1 --> refund_eth_value_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8dbc20fae8a51b035be3f22162ce962cf4ec9c60",
        "target": "[RepairTarget] DSMath:mul:122\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: (z = x * y) [/] y\nSSA: z_1 [/] y_1 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8dbc20fae8a51b035be3f22162ce962cf4ec9c60",
        "target": "[RepairTarget] DSMath:mul:122\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_41\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8ef59b92f21f9e5f21f5f71510d1a7f87a5420be",
        "target": "[RepairTarget] Dexer:transfer:46\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8ef59b92f21f9e5f21f5f71510d1a7f87a5420be",
        "target": "[RepairTarget] Dexer:transferFrom:64\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8fcbec20e54d478cf50dcf9fc5931a425bb12534",
        "target": "[RepairTarget] EthereumFox:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8fcbec20e54d478cf50dcf9fc5931a425bb12534",
        "target": "[RepairTarget] EthereumFox:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x90795feead69497dd1cfe99c79297b22e60515fd",
        "target": "[RepairTarget] SynchroCoin:calcBonusAt:252\nCODE: at < (STARTDATE + 21 days)\nOPERATION: STARTDATE [+] 21 days\nSSA: STARTDATE_2 [+] 1814400 --> TMP_58\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9501bfc48897dceeadf73113ef635d2ff7ee4b97",
        "target": "[RepairTarget] StandardToken:transferFrom:69\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x97f1d12833ba350e847ba19e86ee84ed085fe99e",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9b250383f532479085b3d24f50fa60103ee8e244",
        "target": "[RepairTarget] tokenHodl:fallback:15\nCODE: hodlers[msg.sender] += msg.value\nOPERATION: hodlers[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:269\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_56 [+] REF_57 --> REF_56\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:pre_ico:246\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_32 [+] REF_33 --> REF_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:258\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_41 [-] REF_42 --> TMP_99\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:267\nCODE: optsSent[counter] = (220*value)/10000000000\nOPERATION: 220 [*] value\nSSA: 220 [*] value_1 --> TMP_107\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:259\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_44 [+] REF_45 --> REF_44\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:268\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_53 [-] REF_54 --> TMP_109\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:279\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_68 [+] REF_69 --> REF_68\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:278\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_65 [-] REF_66 --> TMP_119\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:262\nCODE: now >= (ico_start + 7 days) && now <= (ico_start + 14 days)\nOPERATION: ico_start [+] 7 days\nSSA: ico_start_3 [+] 1209600 --> TMP_103\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:262\nCODE: now >= (ico_start + 7 days) && now <= (ico_start + 14 days)\nOPERATION: ico_start [+] 14 days\nSSA: ico_start_3 [+] 604800 --> TMP_101\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:267\nCODE: optsSent[counter] = (220*value)/10000000000\nOPERATION: (220*value) [/] 10000000000\nSSA: TMP_107 [/] 10000000000 --> TMP_108\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:272\nCODE: now >= (ico_start + 14 days) && now <= (ico_start + 31 days)\nOPERATION: ico_start [+] 14 days\nSSA: ico_start_3 [+] 2678400 --> TMP_113\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:main_ico:272\nCODE: now >= (ico_start + 14 days) && now <= (ico_start + 31 days)\nOPERATION: ico_start [+] 31 days\nSSA: ico_start_3 [+] 1209600 --> TMP_111\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x9cb9eb4bb7800bdbb017be2a4ffbeccb67454ea9",
        "target": "[RepairTarget] blockoptions:endICO:299\nCODE: uint burnedTokens = balances[owner]-150000000000000\nOPERATION: balances[owner] [-] 150000000000000\nSSA: REF_74 [-] 150000000000000 --> TMP_124\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9f1b9ea49eeab4bee2a2ce780fb9996dab384f3f",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa40827ecef3154577e60cc36ccf8f3664f95f5a8",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa578acc0cb7875781b7880903f4594d13cfa8b98",
        "target": "[RepairTarget] StandardToken:transferFrom:74\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaafcda1721cd51ed7dfc4dd23029db4c02e04eca",
        "target": "[RepairTarget] PlaceboCoin:transferFrom:62\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaafcda1721cd51ed7dfc4dd23029db4c02e04eca",
        "target": "[RepairTarget] PlaceboCoin:fallback:121\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaafcda1721cd51ed7dfc4dd23029db4c02e04eca",
        "target": "[RepairTarget] PlaceboCoin:transfer:34\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xab358b6c44208ef53f034aa25b24dd23f3892736",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xafabe4280633530a015150f6acf2993112db6817",
        "target": "[RepairTarget] PRSTokenICO:fallback:127\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_3 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xafabe4280633530a015150f6acf2993112db6817",
        "target": "[RepairTarget] PRSTokenICO:transferFrom:63\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xafabe4280633530a015150f6acf2993112db6817",
        "target": "[RepairTarget] PRSTokenICO:fallback:128\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_26 [+] tokensIssued_3 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xafabe4280633530a015150f6acf2993112db6817",
        "target": "[RepairTarget] PRSTokenICO:transfer:35\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xb186afcd36a6403ec957f5c74482aaac13b87eae",
        "target": "[RepairTarget] EnjinBuyer:fallback:81\nCODE: balances_for_refund[msg.sender] += msg.value\nOPERATION: balances_for_refund[msg.sender] [+=] msg.value\nSSA: REF_17 [+] msg.value --> REF_17\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb186afcd36a6403ec957f5c74482aaac13b87eae",
        "target": "[RepairTarget] EnjinBuyer:withdraw_refund:73\nCODE: refund_eth_value -= eth_to_withdraw\nOPERATION: refund_eth_value [-=] eth_to_withdraw\nSSA: refund_eth_value_1 [-] eth_to_withdraw_1 --> refund_eth_value_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb41b531359330d76bbcb0f1a24f94ff6bff30dc1",
        "target": "[RepairTarget] CNet5G:mint:62\nCODE: balances[owner] += amount\nOPERATION: balances[owner] [+=] amount\nSSA: REF_16 [+] amount_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb41b531359330d76bbcb0f1a24f94ff6bff30dc1",
        "target": "[RepairTarget] CNet5G:transfer:24\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb41b531359330d76bbcb0f1a24f94ff6bff30dc1",
        "target": "[RepairTarget] CNet5G:transferFrom:33\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb494708c960af46e893f855014434ed9d24842ad",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb4b7d0c65b3618bc8706ab7b3719519ead624067",
        "target": "[RepairTarget] Token:transfer:23\nCODE: balanceOf[to] = balanceOf[to] + value\nOPERATION: balanceOf[to] [+] value\nSSA: REF_3 [+] value_1 --> TMP_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb8d24ac55866236b2c7b8fb046ca110d488fba02",
        "target": "[RepairTarget] ZiberToken:claim_ico:238\nCODE: token.proxyPayment.value(this.balance - ico)(address(this))\nOPERATION: this.balance [-] ico\nSSA: REF_18 [-] ico_3 --> TMP_51\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xba9841651345e7089cf04c59105f9878cfe731b9",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbb1972a4eb98de90c150ba209e60238a74ac774b",
        "target": "[RepairTarget] ZiberToken:claim_bounty:238\nCODE: token.proxyPayment.value(this.balance - bounty)(address(this))\nOPERATION: this.balance [-] bounty\nSSA: REF_18 [-] bounty_3 --> TMP_51\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc1466074bc6daa0c388be07d35152a822230c3f5",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc3142db870ce470122f7d2d4d8d76ae5dda51dda",
        "target": "[RepairTarget] FreedomEthereum:fallback:8\nCODE: hodlers[msg.sender] += msg.value\nOPERATION: hodlers[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xccf7722a1eef2be04130a3432d01667d02e3bf9a",
        "target": "[RepairTarget] StandardToken:transferFrom:81\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcd619ad647357868dd5987b0ce4886bf61cfac32",
        "target": "[RepairTarget] PresaleToken:buyTokens:74\nCODE: totalSupply + newTokens > TOKEN_SUPPLY_LIMIT\nOPERATION: totalSupply [+] newTokens\nSSA: totalSupply_2 [+] newTokens_1 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcd8aac9972dc4ddc48d700bc0710c0f5223fbcfa",
        "target": "[RepairTarget] VjuCoin:transfer:41\nCODE: balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]\nOPERATION: balances[_to] [+] _amount\nSSA: REF_3 [+] _amount_1 --> TMP_3\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xcd8aac9972dc4ddc48d700bc0710c0f5223fbcfa",
        "target": "[RepairTarget] VjuCoin:transferFrom:51\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcf35c3670de34d955b280f048703e3a2565ccd1b",
        "target": "[RepairTarget] StandardToken:transferFrom:81\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd18594d2303a4c20fb7bd1f54dfacf390840d2c3",
        "target": "[RepairTarget] StandardToken:transferFrom:81\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd29ba5f94fb91eefc5e3aaf69f181febed73930e",
        "target": "[RepairTarget] PresaleToken:buyTokens:74\nCODE: totalSupply + newTokens > TOKEN_SUPPLY_LIMIT\nOPERATION: totalSupply [+] newTokens\nSSA: totalSupply_2 [+] newTokens_1 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd7cbcb28446c0f735dcdda0bd7b37cdd2facda77",
        "target": "[RepairTarget] Virtonomi:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd7cbcb28446c0f735dcdda0bd7b37cdd2facda77",
        "target": "[RepairTarget] Virtonomi:transferFrom:73\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd8905661e00c730e1917c099d79026f7ca53d105",
        "target": "[RepairTarget] PhilcoinToken:transferFrom:82\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_14 [-] _value_1 --> REF_14\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd8905661e00c730e1917c099d79026f7ca53d105",
        "target": "[RepairTarget] PhilcoinToken:safeMult:24\nCODE: assert((x == 0)||(z/x == y))\nOPERATION: z [/] x\nSSA: z_1 [/] x_1 --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdb03170241b7a789934b677a64fa49e7783b41d5",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdc42289afc6acfce070b56f19125483b31ae088a",
        "target": "[RepairTarget] IntelliShareEco:transferFrom:52\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:268\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_53 [-] REF_54 --> TMP_109\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:258\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_41 [-] REF_42 --> TMP_99\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:278\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_65 [-] REF_66 --> TMP_119\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:267\nCODE: optsSent[counter] = (220*value)/10000000000\nOPERATION: 220 [*] value\nSSA: 220 [*] value_1 --> TMP_107\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:269\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_56 [+] REF_57 --> REF_56\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:259\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_44 [+] REF_45 --> REF_44\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:279\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_68 [+] REF_69 --> REF_68\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:pre_ico:246\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_32 [+] REF_33 --> REF_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:262\nCODE: now >= (ico_start + 7 days) && now <= (ico_start + 14 days)\nOPERATION: ico_start [+] 7 days\nSSA: ico_start_3 [+] 604800 --> TMP_101\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:262\nCODE: now >= (ico_start + 7 days) && now <= (ico_start + 14 days)\nOPERATION: ico_start [+] 14 days\nSSA: ico_start_3 [+] 1209600 --> TMP_103\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:267\nCODE: optsSent[counter] = (220*value)/10000000000\nOPERATION: (220*value) [/] 10000000000\nSSA: TMP_107 [/] 10000000000 --> TMP_108\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:272\nCODE: now >= (ico_start + 14 days) && now <= (ico_start + 31 days)\nOPERATION: ico_start [+] 31 days\nSSA: ico_start_3 [+] 1209600 --> TMP_111\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:main_ico:272\nCODE: now >= (ico_start + 14 days) && now <= (ico_start + 31 days)\nOPERATION: ico_start [+] 14 days\nSSA: ico_start_3 [+] 2678400 --> TMP_113\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xdf9e97970c953ff6730b155845fb7bbd5ae72abf",
        "target": "[RepairTarget] blockoptions:endICO:299\nCODE: uint burnedTokens = balances[owner]-150000000000000\nOPERATION: balances[owner] [-] 150000000000000\nSSA: REF_74 [-] 150000000000000 --> TMP_124\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe15422570cb3cd88bd7ef87f14c6ca7c43f77398",
        "target": "[RepairTarget] ZiberToken:claim_bounty:237\nCODE: token.proxyPayment.value(this.balance - bounty)(address(this))\nOPERATION: this.balance [-] bounty\nSSA: REF_18 [-] bounty_3 --> TMP_51\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe19d396c4e7f96eba568e9d62ad80ab902d207c8",
        "target": "[RepairTarget] StandardToken:transferFrom:96\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe1cf8dca809bb6571cbef2efadba8d3e3e2613b9",
        "target": "[RepairTarget] Civiq:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe1cf8dca809bb6571cbef2efadba8d3e3e2613b9",
        "target": "[RepairTarget] Civiq:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe43ac1714f7394173b15e7cff31a63d523ce4fb9",
        "target": "[RepairTarget] DSMath:mul:122\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_41\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe43ac1714f7394173b15e7cff31a63d523ce4fb9",
        "target": "[RepairTarget] DSMath:mul:122\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: (z = x * y) [/] y\nSSA: z_1 [/] y_1 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe57297258717ec66749fcfb4bf23869e252b03c3",
        "target": "[RepairTarget] BitcoinPro:distributeBTR:42\nCODE: balances[addresses[i]] += 2000 * 10**8\nOPERATION: 2000 [*] 10**8\nSSA: 2000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe57297258717ec66749fcfb4bf23869e252b03c3",
        "target": "[RepairTarget] BitcoinPro:distributeBTR:42\nCODE: balances[addresses[i]] += 2000 * 10**8\nOPERATION: balances[addresses[i]] [+=] 2000 * 10**8\nSSA: 2000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe57297258717ec66749fcfb4bf23869e252b03c3",
        "target": "[RepairTarget] BitcoinPro:distributeBTR:43\nCODE: Transfer(owner, addresses[i], 2000 * 10**8)\nOPERATION: 2000 [*] 10**8\nSSA: 2000 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe57297258717ec66749fcfb4bf23869e252b03c3",
        "target": "[RepairTarget] BitcoinPro:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe57297258717ec66749fcfb4bf23869e252b03c3",
        "target": "[RepairTarget] BitcoinPro:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe5874039ea940af0a0f304e512c48bcb8d25aca4",
        "target": "[RepairTarget] OTOCASH:transfer:80\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe5874039ea940af0a0f304e512c48bcb8d25aca4",
        "target": "[RepairTarget] OTOCASH:transferFrom:105\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe94b04b727fbd67ae03e6b85b1b794cb901cd64a",
        "target": "[RepairTarget] FixedSupplyToken:transfer:76\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe94b04b727fbd67ae03e6b85b1b794cb901cd64a",
        "target": "[RepairTarget] FixedSupplyToken:transferFrom:101\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe9958afac6a3e16d32d3cb62a82f84d3c43c8012",
        "target": "[RepairTarget] BM_MasterClass_Reserved:fallback:53\nCODE: amount_investments += msg.value\nOPERATION: amount_investments [+=] msg.value\nSSA: amount_investments_1 [+] msg.value --> amount_investments_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe9958afac6a3e16d32d3cb62a82f84d3c43c8012",
        "target": "[RepairTarget] BM_MasterClass_Reserved:fallback:52\nCODE: holders[msg.sender] += msg.value\nOPERATION: holders[msg.sender] [+=] msg.value\nSSA: REF_4 [+] msg.value --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xea7cbf19027087ba91ad110e95a5c2a532d35100",
        "target": "[RepairTarget] ZiberToken:claim_bounty:238\nCODE: token.proxyPayment.value(this.balance - bounty)(address(this))\nOPERATION: this.balance [-] bounty\nSSA: REF_18 [-] bounty_3 --> TMP_51\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x08a4d2372777267373ff0fbf80fa278b2846c087",
        "target": "[RepairTarget] StandardToken:transferFrom:59\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x21576319f5c0d28925830a5536ebb83dc5d490c9",
        "target": "[RepairTarget] TravelCoin:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x21576319f5c0d28925830a5536ebb83dc5d490c9",
        "target": "[RepairTarget] TravelCoin:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2c39f92294f436c956f12dcd801a3181e77f8851",
        "target": "[RepairTarget] SpeculateCoin:fallback:39\nCODE: uint256 amount = msg.value / price\nOPERATION: msg.value [/] price\nSSA: msg.value [/] price_1 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2c39f92294f436c956f12dcd801a3181e77f8851",
        "target": "[RepairTarget] SpeculateCoin:transfer:30\nCODE: balanceOf[_to] + _value < balanceOf[_to]\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_2 [+] _value_1 --> TMP_2\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x2c3b9d47f9a80507e93c9401eb22e111672604a3",
        "target": "[RepairTarget] JCoinz:transferFrom:56\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x48a6c4e778017d05916f56a227d5797c12652c21",
        "target": "[RepairTarget] BEtherToken:fallback:168\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_26 [+] tokensIssued_1 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x48a6c4e778017d05916f56a227d5797c12652c21",
        "target": "[RepairTarget] BEtherToken:transferFrom:80\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x48a6c4e778017d05916f56a227d5797c12652c21",
        "target": "[RepairTarget] BEtherToken:transfer:39\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x48f775efbe4f5ece6e0df2f7b5932df56823b990",
        "target": "[RepairTarget] StandardToken:transferFrom:78\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x49392a5867a4fd35cc31e366d790216daefaa647",
        "target": "[RepairTarget] EtherHealth:transfer:25\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x49392a5867a4fd35cc31e366d790216daefaa647",
        "target": "[RepairTarget] EtherHealth:mint:63\nCODE: balances[owner] += amount\nOPERATION: balances[owner] [+=] amount\nSSA: REF_16 [+] amount_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x49392a5867a4fd35cc31e366d790216daefaa647",
        "target": "[RepairTarget] EtherHealth:transferFrom:34\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x499e5f8914c061ce9ef0873a67c254f90cae5a76",
        "target": "[RepairTarget] ETHealth:transfer:25\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x499e5f8914c061ce9ef0873a67c254f90cae5a76",
        "target": "[RepairTarget] ETHealth:mint:63\nCODE: balances[owner] += amount\nOPERATION: balances[owner] [+=] amount\nSSA: REF_16 [+] amount_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x499e5f8914c061ce9ef0873a67c254f90cae5a76",
        "target": "[RepairTarget] ETHealth:transferFrom:34\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x49aec0752e68d0282db544c677f6ba407ba17ed7",
        "target": "[RepairTarget] XBLToken:transfer:74\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x49aec0752e68d0282db544c677f6ba407ba17ed7",
        "target": "[RepairTarget] XBLToken:transferFrom:98\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4c4e2c7060f6bed1f095ee2cfc2236729b4de2e8",
        "target": "[RepairTarget] HoneySuckleTimes:transfer:25\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4c4e2c7060f6bed1f095ee2cfc2236729b4de2e8",
        "target": "[RepairTarget] HoneySuckleTimes:mint:63\nCODE: balances[owner] += amount\nOPERATION: balances[owner] [+=] amount\nSSA: REF_16 [+] amount_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4c4e2c7060f6bed1f095ee2cfc2236729b4de2e8",
        "target": "[RepairTarget] HoneySuckleTimes:transferFrom:34\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5b2028602af2693d50b4157f4acf84d632ec8208",
        "target": "[RepairTarget] Savings:deposit:32\nCODE: deposits[msg.sender] += msg.value\nOPERATION: deposits[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x60cd862c9c687a9de49aecdc3a99b74a4fc54ab6",
        "target": "[RepairTarget] MoonCatRescue:transferCat:321\nCODE: pendingWithdrawals[to] += request.price\nOPERATION: pendingWithdrawals[to] [+=] request.price\nSSA: REF_91 [+] REF_92 --> REF_91\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x60cd862c9c687a9de49aecdc3a99b74a4fc54ab6",
        "target": "[RepairTarget] MoonCatRescue:acceptAdoptionOffer:121\nCODE: pendingWithdrawals[msg.sender] += (msg.value - offer.price)\nOPERATION: pendingWithdrawals[msg.sender] [+=] (msg.value - offer.price)\nSSA: REF_21 [+] TMP_50 --> REF_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x60cd862c9c687a9de49aecdc3a99b74a4fc54ab6",
        "target": "[RepairTarget] MoonCatRescue:acceptAdoptionOffer:121\nCODE: pendingWithdrawals[msg.sender] += (msg.value - offer.price)\nOPERATION: msg.value [-] offer.price\nSSA: msg.value [-] REF_22 --> TMP_50\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6cbef0eec5c883fe96dcd5db5cf1b9d578aa7e92",
        "target": "[RepairTarget] VouchCoin:transfer:25\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7bb0cf2a571da6e78da7e76f7fedf5726f47a9a5",
        "target": "[RepairTarget] ETimesChain:transfer:25\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7bb0cf2a571da6e78da7e76f7fedf5726f47a9a5",
        "target": "[RepairTarget] ETimesChain:mint:63\nCODE: balances[owner] += amount\nOPERATION: balances[owner] [+=] amount\nSSA: REF_16 [+] amount_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7bb0cf2a571da6e78da7e76f7fedf5726f47a9a5",
        "target": "[RepairTarget] ETimesChain:transferFrom:34\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x808067e2f6e266319f71b2e21bdf99b59ead05c6",
        "target": "[RepairTarget] ProWalletToken:transferFrom:144\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_15 [-] _amount_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x91126cfa7db2983527b0b749cc8a61fdeffedc28",
        "target": "[RepairTarget] DoneToken:transferFrom:71\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x91126cfa7db2983527b0b749cc8a61fdeffedc28",
        "target": "[RepairTarget] DoneToken:fallback:133\nCODE: uint256 tokensIssued = (msg.value * 5)\nOPERATION: msg.value [*] 5\nSSA: msg.value [*] 5 --> TMP_38\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x91126cfa7db2983527b0b749cc8a61fdeffedc28",
        "target": "[RepairTarget] DoneToken:fallback:138\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_26 [+] tokensIssued_3 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9c40531a9df59a2b548fb659af6ff48d80d5d035",
        "target": "[RepairTarget] ProspectorsDevAllocation:unlock:55\nCODE: unlocked[part] == true || block.timestamp < initial_time + unlock_times[part] || unlock_values[part] == 0\nOPERATION: initial_time [+] unlock_times[part]\nSSA: initial_time_5 [+] REF_13 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0614e57bbc71cd0b15217152d4b07af5e717d4ef",
        "target": "[RepairTarget] RoseCoin:transferFrom:122\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0c6c78e9d5576818e6638e198bff0ce9764098b1",
        "target": "[RepairTarget] StandardToken:transferFrom:59\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0fcf5c6b20577d48ba209e077975b9f2eac55798",
        "target": "[RepairTarget] svb:issue:265\nCODE: balances[this] += amount\nOPERATION: balances[this] [+=] amount\nSSA: REF_45 [+] amount_1 --> REF_45\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x15a23eee2988a54e1a6b326fd469c94bed98ae5a",
        "target": "[RepairTarget] MichCoin:tokenAvailable:193\nCODE: balances[this] < (totalSupply - maxTokens)\nOPERATION: totalSupply [-] maxTokens\nSSA: totalSupply_12 [-] maxTokens_6 --> TMP_82\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1e77b10ead7ae84bc54394bd33821e5c7b74fbb8",
        "target": "[RepairTarget] Testico:transferFrom:104\nCODE: shareholdersBalance -= _value\nOPERATION: shareholdersBalance [-=] _value\nSSA: shareholdersBalance_7 [-] _value_1 --> shareholdersBalance_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1e77b10ead7ae84bc54394bd33821e5c7b74fbb8",
        "target": "[RepairTarget] Testico:transfer:68\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1e77b10ead7ae84bc54394bd33821e5c7b74fbb8",
        "target": "[RepairTarget] Testico:transferFrom:97\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_14 [-] _value_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1f7afe77fa8a683c6a6e45d8eaf40da1f3b09094",
        "target": "[RepairTarget] StandardToken:transferFrom:37\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x28d48a116674c62043fb2d2a79427f18df59efc6",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2ae024e4ecf78ed1bf94eb3c7cf4e3e2ea03d550",
        "target": "[RepairTarget] SamsungToken:transfer:19\nCODE: balanceOf[msg.sender] -= _value\nOPERATION: balanceOf[msg.sender] [-=] _value\nSSA: REF_1 [-] _value_1 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2ae024e4ecf78ed1bf94eb3c7cf4e3e2ea03d550",
        "target": "[RepairTarget] SamsungToken:transfer:20\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2b13940e951604472b94a1f6f1c0219921ddb028",
        "target": "[RepairTarget] StandardToken:transferFrom:80\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2eaa3136ac4ca51526e9704336adb20ed14d06d0",
        "target": "[RepairTarget] RCCCToken:transfer:74\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2eaa3136ac4ca51526e9704336adb20ed14d06d0",
        "target": "[RepairTarget] RCCCToken:transferFrom:109\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_17 [-] _value_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x33493d18bac3649f00163d3f0e1e2d374a7dd4c6",
        "target": "[RepairTarget] Multibot:transferFrom:104\nCODE: shareholdersBalance -= _value\nOPERATION: shareholdersBalance [-=] _value\nSSA: shareholdersBalance_7 [-] _value_1 --> shareholdersBalance_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x33493d18bac3649f00163d3f0e1e2d374a7dd4c6",
        "target": "[RepairTarget] Multibot:transfer:68\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x33493d18bac3649f00163d3f0e1e2d374a7dd4c6",
        "target": "[RepairTarget] Multibot:transferFrom:97\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_14 [-] _value_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3c07b3f4a6e253915d83c86707f0af07521d1cd8",
        "target": "[RepairTarget] APIHeaven:transfer:71\nCODE: lances[msg.sender] -= _amount;\r\nOPERATION: lances[msg.sender] - [-=] mount;\n\nSSA: REF_8 [-] _amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3c07b3f4a6e253915d83c86707f0af07521d1cd8",
        "target": "[RepairTarget] APIHeaven:transferFrom:99\nCODE: lowed[_from][msg.sender] -= _amount;\r\nOPERATION: lowed[_from][msg.sender] - [-=] mount;\n\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4290563c2d7c255b5eec87f2d3bd10389f991d68",
        "target": "[RepairTarget] StandardToken:transferFrom:85\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x441398b701809c617004a93eba2c9c701d439375",
        "target": "[RepairTarget] TheMoneyFightToken:transferFrom:145\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_21 [+] _value_1 --> REF_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4e7a34c6c29a4741858a7ec5622cd8be21b0351b",
        "target": "[RepairTarget] SafeMath:safeDiv:117\nCODE: uint c = a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5c457ea26f82df1fca1a8844804a7a89f56dd5e5",
        "target": "[RepairTarget] RoseCoin:transferFrom:122\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6678e467fa5ccfbdc264d12f4b8b28fe4661606b",
        "target": "[RepairTarget] DecentToken:transfer:82\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6678e467fa5ccfbdc264d12f4b8b28fe4661606b",
        "target": "[RepairTarget] DecentToken:transfer:97\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_11 [+] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6678e467fa5ccfbdc264d12f4b8b28fe4661606b",
        "target": "[RepairTarget] DecentToken:transferFrom:121\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_19 [-] _amount_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6745dde69632ea1820ad6781d0a49b9670472837",
        "target": "[RepairTarget] RoseCoin:transferFrom:122\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x71161dfbf5bd789e38a4b4bb8706fdceb2436ab3",
        "target": "[RepairTarget] StandardToken:transferFrom:59\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x72cd732dcce35ae8f1bb8f0b57db644b8b2b3d7c",
        "target": "[RepairTarget] Bounty:witness:20\nCODE: talks[title].witnessedPresenter[presenter] += 1\nOPERATION: talks[title].witnessedPresenter[presenter] [+=] 1\nSSA: REF_10 [+] 1 --> REF_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x72cd732dcce35ae8f1bb8f0b57db644b8b2b3d7c",
        "target": "[RepairTarget] Bounty:add:12\nCODE: talks[title].balance += msg.value\nOPERATION: talks[title].balance [+=] msg.value\nSSA: REF_1 [+] msg.value --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x75088a29163dae5687b08b99d9d2f04ebc4f9a04",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: uint256 z = x + y\nOPERATION: x [+] y\nSSA: x_1 [+] y_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x75088a29163dae5687b08b99d9d2f04ebc4f9a04",
        "target": "[RepairTarget] SafeMath:safeMult:19\nCODE: assert((x == 0)||(z/x == y))\nOPERATION: z [/] x\nSSA: z_1 [/] x_1 --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x75088a29163dae5687b08b99d9d2f04ebc4f9a04",
        "target": "[RepairTarget] StandardToken:transferFrom:59\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7598c3543ef4f27f09c98aeb3753506a0290a0fc",
        "target": "[RepairTarget] tmed:transferFrom:119\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_18 [-] _amount_1 --> REF_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7627de4b93263a6a7570b8dafa64bae812e5c394",
        "target": "[RepairTarget] StandardToken:transfer:19\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7627de4b93263a6a7570b8dafa64bae812e5c394",
        "target": "[RepairTarget] StandardToken:transferFrom:27\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x85e49ad719a539fb9fbb1dfe0ce9a2cc184d5c9f",
        "target": "[RepairTarget] WitcoinCrowdsale:calculateBonus:461\nCODE: bonusedTokens <= 80000 * (10 ** decimals)\nOPERATION: bonusedTokens.mul(105) [/] 100\nSSA: 80000 [*] TMP_92 --> TMP_93\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x85e49ad719a539fb9fbb1dfe0ce9a2cc184d5c9f",
        "target": "[RepairTarget] WitcoinCrowdsale:calculateBonus:463\nCODE: bonusedTokens <= 800000 * (10 ** decimals)\nOPERATION: 800000 [*] (10 ** decimals)\nSSA: 800000 [*] TMP_97 --> TMP_98\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x85e49ad719a539fb9fbb1dfe0ce9a2cc184d5c9f",
        "target": "[RepairTarget] WitcoinCrowdsale:calculateBonus:463\nCODE: bonusedTokens <= 800000 * (10 ** decimals)\nOPERATION: bonusedTokens.mul(110) [/] 100\nSSA: 800000 [*] TMP_97 --> TMP_98\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x85e49ad719a539fb9fbb1dfe0ce9a2cc184d5c9f",
        "target": "[RepairTarget] WitcoinCrowdsale:calculateBonus:465\nCODE: bonusedTokens > 800000 * (10 ** decimals)\nOPERATION: bonusedTokens.mul(120) [/] 100\nSSA: 800000 [*] TMP_102 --> TMP_103\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x85e49ad719a539fb9fbb1dfe0ce9a2cc184d5c9f",
        "target": "[RepairTarget] WitcoinCrowdsale:calculateBonus:465\nCODE: bonusedTokens > 800000 * (10 ** decimals)\nOPERATION: 800000 [*] (10 ** decimals)\nSSA: 800000 [*] TMP_102 --> TMP_103\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x85e49ad719a539fb9fbb1dfe0ce9a2cc184d5c9f",
        "target": "[RepairTarget] WitcoinCrowdsale:calculateBonus:461\nCODE: bonusedTokens <= 80000 * (10 ** decimals)\nOPERATION: 80000 [*] (10 ** decimals)\nSSA: 80000 [*] TMP_92 --> TMP_93\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x86c8bf8532aa2601151c9dbbf4e4c4804e042571",
        "target": "[RepairTarget] Simoleon:transfer:60\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_6 [-] _amount_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x86c8bf8532aa2601151c9dbbf4e4c4804e042571",
        "target": "[RepairTarget] Simoleon:transferFrom:89\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8ed3ba9c4028865f77b3c8917a2003131709fbee",
        "target": "[RepairTarget] PortCoin:issue:47\nCODE: balances[to] += amount\nOPERATION: balances[to] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8ed3ba9c4028865f77b3c8917a2003131709fbee",
        "target": "[RepairTarget] PortCoin:transfer:59\nCODE: balances[msg.sender] -= value\nOPERATION: balances[msg.sender] [-=] value\nSSA: REF_4 [-] value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8ed3ba9c4028865f77b3c8917a2003131709fbee",
        "target": "[RepairTarget] PortCoin:transferFrom:80\nCODE: approvals[from][msg.sender] -= value\nOPERATION: approvals[from][msg.sender] [-=] value\nSSA: REF_15 [-] value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8fbbffe883bd8958b5324a9dba3987b4b2271379",
        "target": "[RepairTarget] StandardToken:transferFrom:59\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x971875780d712a1bad69163a2dac290c07b882ac",
        "target": "[RepairTarget] DatCoin:transfer:87\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x971875780d712a1bad69163a2dac290c07b882ac",
        "target": "[RepairTarget] DatCoin:transferFrom:112\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x973ca13a94eadebaf51dc9b3f74bd646fec5da96",
        "target": "[RepairTarget] Bounty:witness:30\nCODE: talks[title].witnessedPresenter[presenter] += 1\nOPERATION: talks[title].witnessedPresenter[presenter] [+=] 1\nSSA: REF_10 [+] 1 --> REF_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x973ca13a94eadebaf51dc9b3f74bd646fec5da96",
        "target": "[RepairTarget] Bounty:add:21\nCODE: talks[title].balance += msg.value\nOPERATION: talks[title].balance [+=] msg.value\nSSA: REF_1 [+] msg.value --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9962d0afcd936b0f753b2cfec649807d5cd35bd4",
        "target": "[RepairTarget] BRUMtoken:transferFrom:52\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_9 [+] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa52966d88586e708b128bc22e7a8b7900a7918ac",
        "target": "[RepairTarget] StandardToken:transfer:87\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa52966d88586e708b128bc22e7a8b7900a7918ac",
        "target": "[RepairTarget] StandardToken:transferFrom:108\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xafca09726310a2b8e5fca4200f818a5e6bd0cf50",
        "target": "[RepairTarget] ConvertLib:b32toHexString:498\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb16dab600fc05702132602f4922c0e89e2985b9a",
        "target": "[RepairTarget] SudjuKoin:transfer:75\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb16dab600fc05702132602f4922c0e89e2985b9a",
        "target": "[RepairTarget] SudjuKoin:transferFrom:100\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc0f29798c57e890cac82a79dadbebfb3d3fa67b9",
        "target": "[RepairTarget] ConvertLib:b32toHexString:493\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc6dad66305545ae3111ba7000289ab3426cf02a2",
        "target": "[RepairTarget] DatCoin:transfer:86\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc6dad66305545ae3111ba7000289ab3426cf02a2",
        "target": "[RepairTarget] DatCoin:transferFrom:111\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd3e2f9dfff5a6feeece5dbcee3b86cb375fd8c98",
        "target": "[RepairTarget] FixedSupplyToken:transfer:90\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_6 [+] _amount_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd3e2f9dfff5a6feeece5dbcee3b86cb375fd8c98",
        "target": "[RepairTarget] FixedSupplyToken:transferFrom:118\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd59695c56e652d2f4e6f10fdd7eb6b49cdcfa361",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd8b81c3f6ed4aef077155ddff2c61ca4e447407c",
        "target": "[RepairTarget] NATVCoin:contribute:254\nCODE: return contributions.length - 1\nOPERATION: contributions.length [-] 1\nSSA: REF_30 [-] 1 --> TMP_43\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe497f7fd7620a0bbd743a0e5d336d7082f86477e",
        "target": "[RepairTarget] TeamVesting:getVesting:255\nCODE: amount = ((lock.balance * 125 * (i/3)) / 1000) - ((lock.balance * 125 * (lock.lastSpending/3)) / 1000)\nOPERATION: lock.balance [*] 125\nSSA: REF_20 [*] 125 --> TMP_71\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe497f7fd7620a0bbd743a0e5d336d7082f86477e",
        "target": "[RepairTarget] TeamVesting:getVesting:255\nCODE: amount = ((lock.balance * 125 * (i/3)) / 1000) - ((lock.balance * 125 * (lock.lastSpending/3)) / 1000)\nOPERATION: ((lock.balance * 125 * (i/3)) / 1000) [-] ((lock.balance * 125 * (lock.lastSpending/3)) / 1000)\nSSA: TMP_70 [-] TMP_74 --> TMP_75\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe497f7fd7620a0bbd743a0e5d336d7082f86477e",
        "target": "[RepairTarget] TeamVesting:getVesting:255\nCODE: amount = ((lock.balance * 125 * (i/3)) / 1000) - ((lock.balance * 125 * (lock.lastSpending/3)) / 1000)\nOPERATION: lock.balance [*] 125\nSSA: REF_19 [*] 125 --> TMP_67\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe497f7fd7620a0bbd743a0e5d336d7082f86477e",
        "target": "[RepairTarget] TeamVesting:getVesting:255\nCODE: amount = ((lock.balance * 125 * (i/3)) / 1000) - ((lock.balance * 125 * (lock.lastSpending/3)) / 1000)\nOPERATION: lock.balance * 125 [*] (lock.lastSpending/3)\nSSA: TMP_67 [*] TMP_68 --> TMP_69\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe497f7fd7620a0bbd743a0e5d336d7082f86477e",
        "target": "[RepairTarget] TeamVesting:getVesting:255\nCODE: amount = ((lock.balance * 125 * (i/3)) / 1000) - ((lock.balance * 125 * (lock.lastSpending/3)) / 1000)\nOPERATION: lock.balance * 125 [*] (i/3)\nSSA: TMP_71 [*] TMP_72 --> TMP_73\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe497f7fd7620a0bbd743a0e5d336d7082f86477e",
        "target": "[RepairTarget] Object:withdrawnTokens:103\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe497f7fd7620a0bbd743a0e5d336d7082f86477e",
        "target": "[RepairTarget] TeamVesting:getVesting:255\nCODE: amount = ((lock.balance * 125 * (i/3)) / 1000) - ((lock.balance * 125 * (lock.lastSpending/3)) / 1000)\nOPERATION: i [/] 3\nSSA: REF_21 [/] 3 --> TMP_72\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe497f7fd7620a0bbd743a0e5d336d7082f86477e",
        "target": "[RepairTarget] TeamVesting:getVesting:255\nCODE: amount = ((lock.balance * 125 * (i/3)) / 1000) - ((lock.balance * 125 * (lock.lastSpending/3)) / 1000)\nOPERATION: lock.lastSpending [/] 3\nSSA: i_2 [/] 3 --> TMP_68\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe497f7fd7620a0bbd743a0e5d336d7082f86477e",
        "target": "[RepairTarget] TeamVesting:getVesting:255\nCODE: amount = ((lock.balance * 125 * (i/3)) / 1000) - ((lock.balance * 125 * (lock.lastSpending/3)) / 1000)\nOPERATION: (lock.balance * 125 * (i/3)) [/] 1000\nSSA: TMP_73 [/] 1000 --> TMP_74\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe497f7fd7620a0bbd743a0e5d336d7082f86477e",
        "target": "[RepairTarget] TeamVesting:getVesting:255\nCODE: amount = ((lock.balance * 125 * (i/3)) / 1000) - ((lock.balance * 125 * (lock.lastSpending/3)) / 1000)\nOPERATION: (lock.balance * 125 * (lock.lastSpending/3)) [/] 1000\nSSA: TMP_69 [/] 1000 --> TMP_70\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe54bd50a40089d71d1e43886f74c0eee8806b971",
        "target": "[RepairTarget] ERC20Standard:transfer:28\nCODE: balances[_recipient] += _value\nOPERATION: balances[_recipient] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe54bd50a40089d71d1e43886f74c0eee8806b971",
        "target": "[RepairTarget] ERC20Standard:transferFrom:35\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf363dc63fde10df67a305faddd0116060d7de3f3",
        "target": "[RepairTarget] BlockchainManchesterPioneer:transferFrom:39\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf7e40ff45f282ade07d342322f15225e4a6c7b01",
        "target": "[RepairTarget] MUMUtoken:transferFrom:52\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_9 [+] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x007df6ad281cbbb9e0e9373654fe588b2bd3b9af",
        "target": "[RepairTarget] OysterPrePearl:fallback:72\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x007df6ad281cbbb9e0e9373654fe588b2bd3b9af",
        "target": "[RepairTarget] OysterPrePearl:fallback:73\nCODE: funds += msg.value\nOPERATION: funds [+=] msg.value\nSSA: funds_1 [+] msg.value --> funds_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x007df6ad281cbbb9e0e9373654fe588b2bd3b9af",
        "target": "[RepairTarget] OysterPrePearl:fallback:71\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_1 [+] amount_1 --> totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x007df6ad281cbbb9e0e9373654fe588b2bd3b9af",
        "target": "[RepairTarget] OysterPrePearl:_transfer:96\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x02b6700c0282a687d66f3e09723bed55f23d5b83",
        "target": "[RepairTarget] TokenERC20:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x039cbc5d80f78aa4708aef80d3cd99dd37953512",
        "target": "[RepairTarget] TravelCoin:transfer:80\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x039cbc5d80f78aa4708aef80d3cd99dd37953512",
        "target": "[RepairTarget] TravelCoin:transferFrom:105\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x03c18d649e743ee0b09f28a81d33575f03af9826",
        "target": "[RepairTarget] WeBetCrypto:buyTokensForSelf:725\nCODE: totalFunds = totalFunds + msg.value\nOPERATION: totalFunds [+] msg.value\nSSA: totalFunds_3 [+] msg.value --> TMP_195\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x04bf44a0159f900328173edc39eb472ec1c2faa9",
        "target": "[RepairTarget] BeefCoin:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x081ccb801474476a9f2bd0f9316e900cdd33fdb1",
        "target": "[RepairTarget] Diamond:_transfer:46\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x081ccb801474476a9f2bd0f9316e900cdd33fdb1",
        "target": "[RepairTarget] Diamond:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x09181c5e6f1bb206d1d1df5a43be922322b378bf",
        "target": "[RepairTarget] StandardToken:transferFrom:100\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x09f12bec5a14ca52cce842d8b885664299ba5ac8",
        "target": "[RepairTarget] PresaleToken:buyTokens:86\nCODE: purchases[purchases.length++] = Purchase({buyer: _buyer, amount: newTokens})\nOPERATION: [++] purchases.length\nSSA: REF_1 [+] 1 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x09f12bec5a14ca52cce842d8b885664299ba5ac8",
        "target": "[RepairTarget] PresaleToken:buyTokens:79\nCODE: require(!(totalSupply + newTokens < totalSupply))\nOPERATION: totalSupply [+] newTokens\nSSA: totalSupply_2 [+] newTokens_1 --> TMP_7\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x0c4911ba2a7ef0a82e7bfce61b7e358121196ba1",
        "target": "[RepairTarget] StandardToken:transfer:71\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0c4911ba2a7ef0a82e7bfce61b7e358121196ba1",
        "target": "[RepairTarget] StandardToken:transferFrom:88\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0f513ffb4926ff82d7f60a05069047aca295c413",
        "target": "[RepairTarget] CrowdstartCoin:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x130282173b796f75e0eb65eaf9f4d10835e1287a",
        "target": "[RepairTarget] MillionDollarCoin:transferFrom:54\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x130282173b796f75e0eb65eaf9f4d10835e1287a",
        "target": "[RepairTarget] MillionDollarCoin:transfer:27\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1455b1cc3050cf6e80f3b7d4b802b72a7ffce198",
        "target": "[RepairTarget] TokenERC20:_transfer:47\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x149c45909e8467d286a7cbde9a294d7b9726aa94",
        "target": "[RepairTarget] ECNcoin:transferFrom:46\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x173fc908b21b861facf54c65c10002b1e2f9c323",
        "target": "[RepairTarget] PresaleToken:buyTokens:85\nCODE: purchases[purchases.length++] = Purchase({buyer: _buyer, amount: newTokens})\nOPERATION: [++] purchases.length\nSSA: REF_1 [+] 1 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x173fc908b21b861facf54c65c10002b1e2f9c323",
        "target": "[RepairTarget] PresaleToken:buyTokens:79\nCODE: totalSupply + newTokens < totalSupply\nOPERATION: totalSupply [+] newTokens\nSSA: totalSupply_2 [+] newTokens_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x17e4cc902015958839e693f179f49c75696381ce",
        "target": "[RepairTarget] DimonCoin:transfer:103\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x17e4cc902015958839e693f179f49c75696381ce",
        "target": "[RepairTarget] DimonCoin:transferFrom:123\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_18 [+] _value_1 --> REF_18\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x186b32c1b89db762a8ffa317172a4926714e6336",
        "target": "[RepairTarget] TokenERC20:burnFrom:155\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x186b32c1b89db762a8ffa317172a4926714e6336",
        "target": "[RepairTarget] TokenERC20:_transfer:60\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x19aea60e2fd6ac54ecf2576292c8fc7046429c37",
        "target": "[RepairTarget] UHubToken:buyTokensPresale:236\nCODE: totalSoldTokens+= newTokens\nOPERATION: totalSoldTokens [+=] newTokens\nSSA: totalSoldTokens_2 [+] newTokens_1 --> totalSoldTokens_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x19aea60e2fd6ac54ecf2576292c8fc7046429c37",
        "target": "[RepairTarget] UHubToken:buyTokensICO:244\nCODE: require(msg.value >= ((1 ether / 1 wei) / 100))\nOPERATION: (1 ether / 1 wei) [/] 100\nSSA: TMP_129 [/] 100 --> TMP_130\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x19aea60e2fd6ac54ecf2576292c8fc7046429c37",
        "target": "[RepairTarget] UHubToken:buyTokensICO:244\nCODE: require(msg.value >= ((1 ether / 1 wei) / 100))\nOPERATION: 1 ether [/] 1 wei\nSSA: 1000000000000000000 [/] 1 --> TMP_129\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x1d349118ca6a346fc25411b6e7925926bdff8724",
        "target": "[RepairTarget] AdverzToken:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x23ff20255f478df0f0e4a59af84f8f392b6a8fb5",
        "target": "[RepairTarget] OysterPrePearl:fallback:66\nCODE: funds += msg.value\nOPERATION: funds [+=] msg.value\nSSA: funds_1 [+] msg.value --> funds_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x23ff20255f478df0f0e4a59af84f8f392b6a8fb5",
        "target": "[RepairTarget] OysterPrePearl:fallback:63\nCODE: amount = msg.value * buyPrice\nOPERATION: msg.value [*] buyPrice\nSSA: msg.value [*] buyPrice_7 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x23ff20255f478df0f0e4a59af84f8f392b6a8fb5",
        "target": "[RepairTarget] OysterPrePearl:fallback:65\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x23ff20255f478df0f0e4a59af84f8f392b6a8fb5",
        "target": "[RepairTarget] OysterPrePearl:fallback:64\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_1 [+] amount_1 --> totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x23ff20255f478df0f0e4a59af84f8f392b6a8fb5",
        "target": "[RepairTarget] OysterPrePearl:_transfer:87\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2558f720deba916ebc3d4d8ce4bc85fe0d117575",
        "target": "[RepairTarget] NewFortuneFormula:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x25aa2d83d193f3d83c9fa2a5fa90b3d195d61355",
        "target": "[RepairTarget] Crowdsale:fallback:49\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x25aa2d83d193f3d83c9fa2a5fa90b3d195d61355",
        "target": "[RepairTarget] Crowdsale:fallback:50\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2927f3a7bc9b9e59318b2ae0f97964a67853418c",
        "target": "[RepairTarget] GCC:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2fd41f516fac94ed08e156f489f56ca3a80b04d0",
        "target": "[RepairTarget] EBTC:distributeEBTC:42\nCODE: balances[addresses[i]] += 245719916000\nOPERATION: balances[addresses[i]] [+=] 245719916000\nSSA: REF_4 [+] 245719916000 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2fd41f516fac94ed08e156f489f56ca3a80b04d0",
        "target": "[RepairTarget] EBTC:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2fd41f516fac94ed08e156f489f56ca3a80b04d0",
        "target": "[RepairTarget] EBTC:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x306f04ccdd1c00aa725ad225daa5a920a0f7d1f5",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x30d3a214d9f1f39a3c03de63d6df6f021fcdc674",
        "target": "[RepairTarget] TestCrowdsaleCryptoMind:fallback:51\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x36bdfebc5c817bd1b1bc042410439170267b31e5",
        "target": "[RepairTarget] Crowdsale:fallback:50\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x36bdfebc5c817bd1b1bc042410439170267b31e5",
        "target": "[RepairTarget] Crowdsale:fallback:49\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x379e391e3d2277b50ae2550fce2841f2f57ca008",
        "target": "[RepairTarget] PayBits:AirDropPayBitsR1:42\nCODE: balances[owner] -= 400000000000000000000\nOPERATION: balances[owner] [-=] 400000000000000000000\nSSA: REF_2 [-] 400000000000000000000 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x379e391e3d2277b50ae2550fce2841f2f57ca008",
        "target": "[RepairTarget] PayBits:AirDropPayBitsR2:51\nCODE: balances[addresses[i]] += 300000000000000000000\nOPERATION: balances[addresses[i]] [+=] 300000000000000000000\nSSA: REF_9 [+] 300000000000000000000 --> REF_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x379e391e3d2277b50ae2550fce2841f2f57ca008",
        "target": "[RepairTarget] PayBits:AirDropPayBitsR1:43\nCODE: balances[addresses[i]] += 400000000000000000000\nOPERATION: balances[addresses[i]] [+=] 400000000000000000000\nSSA: REF_4 [+] 400000000000000000000 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x379e391e3d2277b50ae2550fce2841f2f57ca008",
        "target": "[RepairTarget] PayBits:AirDropPayBitsBounty:68\nCODE: balances[addresses[i]] += 100000000000000000000\nOPERATION: balances[addresses[i]] [+=] 100000000000000000000\nSSA: REF_19 [+] 100000000000000000000 --> REF_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x379e391e3d2277b50ae2550fce2841f2f57ca008",
        "target": "[RepairTarget] PayBits:AirDropPayBitsR3:59\nCODE: balances[addresses[i]] += 200000000000000000000\nOPERATION: balances[addresses[i]] [+=] 200000000000000000000\nSSA: REF_14 [+] 200000000000000000000 --> REF_14\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x379e391e3d2277b50ae2550fce2841f2f57ca008",
        "target": "[RepairTarget] PayBits:AirDropPayBitsBounty:66\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x379e391e3d2277b50ae2550fce2841f2f57ca008",
        "target": "[RepairTarget] PayBits:transfer:86\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_25 [-] _amount_1 --> REF_25\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x379e391e3d2277b50ae2550fce2841f2f57ca008",
        "target": "[RepairTarget] PayBits:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_34 [-] _amount_1 --> REF_34\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x390b6a6ab0daf5615909528aabb5e7da4a52409c",
        "target": "[RepairTarget] COSSDemo:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x390b6a6ab0daf5615909528aabb5e7da4a52409c",
        "target": "[RepairTarget] COSSDemo:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3bf050019c7ffe990c8a4667b40f246aee352e7a",
        "target": "[RepairTarget] eXMR:_transfer:30\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3bf050019c7ffe990c8a4667b40f246aee352e7a",
        "target": "[RepairTarget] eXMR:_transfer:34\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3cba7924c6c8ca8e8bc39557debe1369b688866e",
        "target": "[RepairTarget] MoneroClassic:_transfer:52\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3f2cc0a71c1d6362c8bcd485329655fab354fccb",
        "target": "[RepairTarget] FatoToken:_transfer:48\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3f5e60c4e294ab62ea706f3858adf42454b0d3ba",
        "target": "[RepairTarget] BlockPrinceCoin:TokenERC20:33\nCODE: totalSupply = initialSupply * 10000\nOPERATION: initialSupply [*] 10000\nSSA: initialSupply_1 [*] 10000 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4055ce7003525c966beff40cfe6f04ab4c0dd82f",
        "target": "[RepairTarget] StandardToken:transferFrom:70\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x44a6bae1dba4d2b91ff7b0b54506fd0e1f9c44de",
        "target": "[RepairTarget] TunTokenERC20:transfer:25\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x44a6bae1dba4d2b91ff7b0b54506fd0e1f9c44de",
        "target": "[RepairTarget] TunTokenERC20:transfer:29\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x44a6bae1dba4d2b91ff7b0b54506fd0e1f9c44de",
        "target": "[RepairTarget] TunTokenERC20:transferFrom:39\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_19 [-] _value_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x44a6bae1dba4d2b91ff7b0b54506fd0e1f9c44de",
        "target": "[RepairTarget] TunTokenERC20:transferFrom:42\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_21 [+] REF_22 --> TMP_23\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x460a40f16a00e3c6be9c55ef6696e7b036db2703",
        "target": "[RepairTarget] ZupplyToken:withdrawTokens:289\nCODE: totalWitdrowedToken += _value\nOPERATION: totalWitdrowedToken [+=] _value\nSSA: totalWitdrowedToken_7 [+] _value_1 --> totalWitdrowedToken_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x460a40f16a00e3c6be9c55ef6696e7b036db2703",
        "target": "[RepairTarget] ZupplyToken:buyTokensPresale:229\nCODE: presaleSoldTokens+= newTokens\nOPERATION: presaleSoldTokens [+=] newTokens\nSSA: presaleSoldTokens_2 [+] newTokens_1 --> presaleSoldTokens_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x460a40f16a00e3c6be9c55ef6696e7b036db2703",
        "target": "[RepairTarget] ZupplyToken:buyTokensICO:238\nCODE: require(msg.value >= ((1 ether / 1 wei) / 100))\nOPERATION: (1 ether / 1 wei) [/] 100\nSSA: TMP_130 [/] 100 --> TMP_131\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x460a40f16a00e3c6be9c55ef6696e7b036db2703",
        "target": "[RepairTarget] ZupplyToken:buyTokensICO:238\nCODE: require(msg.value >= ((1 ether / 1 wei) / 100))\nOPERATION: 1 ether [/] 1 wei\nSSA: 1000000000000000000 [/] 1 --> TMP_130\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x464e6abc2f9a61cd17e6c52ad06802fbb4af7eab",
        "target": "[RepairTarget] StandardToken:transferFrom:35\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4836658ebc0585d2b12869f2d689c286ee50b4a0",
        "target": "[RepairTarget] EternalToken:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4b35e0ab998ebe8414871c13cf778f9d0bbdf609",
        "target": "[RepairTarget] StandardToken:transferFrom:54\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4c6e23e5d9dc901991128b3ced739bb0167d7474",
        "target": "[RepairTarget] Sgethereum:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4ce68b018062cfccd66c7fbbb2cc1f0161d22150",
        "target": "[RepairTarget] BOWTERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5258e585f8efe5d7ecca0a9232fc26fd8ca02436",
        "target": "[RepairTarget] KCOIN:burnFrom:153\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5258e585f8efe5d7ecca0a9232fc26fd8ca02436",
        "target": "[RepairTarget] KCOIN:_transfer:58\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x52e30201f31283dc5f7928b4198896083f604416",
        "target": "[RepairTarget] StandardToken:transferFrom:100\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc",
        "target": "[RepairTarget] Multiplexer:sendEth:26\nCODE: uint256 remainingValue = beforeValue - afterValue\nOPERATION: beforeValue [-] afterValue\nSSA: beforeValue_1 [-] afterValue_2 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc",
        "target": "[RepairTarget] Multiplexer:sendEth:22\nCODE: afterValue = afterValue + _value[i]\nOPERATION: afterValue [+] _value[i]\nSSA: afterValue_2 [+] REF_4 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x53e3c9d46fa3f0a3aecd1887f2281a1407f23a32",
        "target": "[RepairTarget] PayBits:transfer:52\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x53e3c9d46fa3f0a3aecd1887f2281a1407f23a32",
        "target": "[RepairTarget] PayBits:transferFrom:71\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x540e5fff293f523acd26291b5bc7ac5713991feb",
        "target": "[RepairTarget] PitisCoin:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x540e5fff293f523acd26291b5bc7ac5713991feb",
        "target": "[RepairTarget] PitisCoin:transferFrom:73\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x540e67af900d2cc981ffc5d4cf4732f0dd0ca502",
        "target": "[RepairTarget] EvolutionCoin:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x556241b90b4c55457a31e27eb612bdc11815d989",
        "target": "[RepairTarget] NemixToken:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5815182a0e30aa0ecad298c34cd905e6a854e406",
        "target": "[RepairTarget] SemixToken:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x581a653c16ed7ae3f3fa86b549aba090abd42e8b",
        "target": "[RepairTarget] BYB:burnFrom:153\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x581a653c16ed7ae3f3fa86b549aba090abd42e8b",
        "target": "[RepairTarget] BYB:_transfer:58\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x596e1ca1c0c9c069a3c2baa0c14629ef3d144887",
        "target": "[RepairTarget] TokenERC20:_transfer:35\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x596e1ca1c0c9c069a3c2baa0c14629ef3d144887",
        "target": "[RepairTarget] TokenERC20:burnFrom:79\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_24 [-] _value_1 --> REF_24\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x59c48b9ea261181893de2951249362b896559b5a",
        "target": "[RepairTarget] BTK:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x59e900aa5af678550854dfb7c34b3acb6929f0e2",
        "target": "[RepairTarget] CrowdsaleCryptoMindPreICO:fallback:49\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5b3f340e286b9a7382f50b1d98ef7cb073660ab9",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5da8f9b476d9ecc3b437264e2919daa51f765365",
        "target": "[RepairTarget] LogiETHToken:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_13\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5dbd23a64ee5b80dabde8e0b8474f901b4d0b5ae",
        "target": "[RepairTarget] BEXToken:transfer:52\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5dbd23a64ee5b80dabde8e0b8474f901b4d0b5ae",
        "target": "[RepairTarget] BEXToken:transferFrom:64\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5ff0e9dad9d452851167a45818c412d955d7a661",
        "target": "[RepairTarget] PushToken:transfer:76\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5ff0e9dad9d452851167a45818c412d955d7a661",
        "target": "[RepairTarget] PushToken:transferFrom:101\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x61a9758686bf7a9c687444c7f0879f7ccdff2abe",
        "target": "[RepairTarget] FoundGameCoin:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x636740e327726fa05f720b10ec2d71e0cd4ae2a4",
        "target": "[RepairTarget] VitalikToken:transferFrom:64\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x636740e327726fa05f720b10ec2d71e0cd4ae2a4",
        "target": "[RepairTarget] VitalikToken:transfer:36\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x640b0809a3e3fb11e46b7aad55a040b9cd117b1f",
        "target": "[RepairTarget] EmiratesCoin:_transfer:52\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x65af351ab4efb2cde3b8f6cfd560c8274970e778",
        "target": "[RepairTarget] XHO:transferFrom:40\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6d306c48ee21a9d125d366bab9e2a6f0ffe53c5b",
        "target": "[RepairTarget] IconFoundation:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6d306c48ee21a9d125d366bab9e2a6f0ffe53c5b",
        "target": "[RepairTarget] IconFoundation:transferFrom:73\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6d358ad6eca1461f092659797e8dceb2d5150fa6",
        "target": "[RepairTarget] EthereumPrivate:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6dee0a976370ee9f0f8c4619ab3386441a42ceb3",
        "target": "[RepairTarget] CoinifinexToken:CoinifinexToken:119\nCODE: tokenForTeam[0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F] =\t500  * 10 ** 3 * 10 ** uint256(decimals)\nOPERATION: 500 [*] 10 ** 3\nSSA: 500 [*] TMP_38 --> TMP_39\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6dee0a976370ee9f0f8c4619ab3386441a42ceb3",
        "target": "[RepairTarget] CoinifinexToken:CoinifinexToken:119\nCODE: tokenForTeam[0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F] =\t500  * 10 ** 3 * 10 ** uint256(decimals)\nOPERATION: 500  * 10 ** 3 [*] 10 ** uint256(decimals)\nSSA: TMP_39 [*] TMP_41 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6dee0a976370ee9f0f8c4619ab3386441a42ceb3",
        "target": "[RepairTarget] CoinifinexToken:_transfer:215\nCODE: require(balanceOf[_to] + _value > balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_81 [+] _value_1 --> TMP_148\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x71f7b56f9f8641f73ca71512a93857a7868d1443",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7229bb50da9c01b28b9f1aace7711605d88afbd3",
        "target": "[RepairTarget] OysterPrePearl:fallback:71\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_1 [+] amount_1 --> totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7229bb50da9c01b28b9f1aace7711605d88afbd3",
        "target": "[RepairTarget] OysterPrePearl:fallback:73\nCODE: funds += msg.value\nOPERATION: funds [+=] msg.value\nSSA: funds_1 [+] msg.value --> funds_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7229bb50da9c01b28b9f1aace7711605d88afbd3",
        "target": "[RepairTarget] OysterPrePearl:fallback:72\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7229bb50da9c01b28b9f1aace7711605d88afbd3",
        "target": "[RepairTarget] OysterPrePearl:_transfer:96\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x728781e75735dc0962df3a51d7ef47e798a7107e",
        "target": "[RepairTarget] SafeMath:safeMul:6\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7747aeb32d89e527e5ebbf646871ca79805989ad",
        "target": "[RepairTarget] LitecoinCash:transfer:99\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7747aeb32d89e527e5ebbf646871ca79805989ad",
        "target": "[RepairTarget] LitecoinCash:transferFrom:114\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7db5e506a6d24a1557682467104e30758aa93b96",
        "target": "[RepairTarget] HighLimit:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2",
        "target": "[RepairTarget] blockoptions:main_ico:271\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_53 [-] REF_54 --> TMP_109\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2",
        "target": "[RepairTarget] blockoptions:pre_ico:249\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_32 [+] REF_33 --> REF_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2",
        "target": "[RepairTarget] blockoptions:main_ico:261\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_41 [-] REF_42 --> TMP_99\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2",
        "target": "[RepairTarget] blockoptions:main_ico:281\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_65 [-] REF_66 --> TMP_119\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2",
        "target": "[RepairTarget] blockoptions:main_ico:272\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_56 [+] REF_57 --> REF_56\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2",
        "target": "[RepairTarget] blockoptions:main_ico:262\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_44 [+] REF_45 --> REF_44\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2",
        "target": "[RepairTarget] blockoptions:main_ico:265\nCODE: now >= (ico_start + 7 days) && now <= (ico_start + 14 days)\nOPERATION: ico_start [+] 7 days\nSSA: ico_start_3 [+] 604800 --> TMP_101\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2",
        "target": "[RepairTarget] blockoptions:main_ico:265\nCODE: now >= (ico_start + 7 days) && now <= (ico_start + 14 days)\nOPERATION: ico_start [+] 14 days\nSSA: ico_start_3 [+] 1209600 --> TMP_103\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2",
        "target": "[RepairTarget] blockoptions:main_ico:275\nCODE: now >= (ico_start + 14 days) && now <= (ico_start + 31 days)\nOPERATION: ico_start [+] 14 days\nSSA: ico_start_3 [+] 2678400 --> TMP_113\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x7f1e2c7d6a69bf34824d72c53b4550e895c0d8c2",
        "target": "[RepairTarget] blockoptions:main_ico:275\nCODE: now >= (ico_start + 14 days) && now <= (ico_start + 31 days)\nOPERATION: ico_start [+] 31 days\nSSA: ico_start_3 [+] 1209600 --> TMP_111\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x7f75b0a047e24805058737e12d37e7923aad4ebe",
        "target": "[RepairTarget] MyToken:_transfer:56\nCODE: index++\nOPERATION: [++] index\nSSA: index_2 [+] 1 --> index_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8275dfa0a01d85f77c33a0230c4242b74eb9a7e2",
        "target": "[RepairTarget] RBC:transferFrom:40\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x841b42c7ee6a15904d1926bf15ffdb6d30a77723",
        "target": "[RepairTarget] GDC:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x849019a489c3c26c7a7668e468be81a4d132781f",
        "target": "[RepairTarget] SimpleDeposit:Deposit:135\nCODE: Available+=msg.value\nOPERATION: Available [+=] msg.value\nSSA: Available_1 [+] msg.value --> Available_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8636ebeb9f6e5486409314f5128941b5448d2da8",
        "target": "[RepairTarget] BeefGold:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x86621332963202937650cb9153b1afc8e73296a1",
        "target": "[RepairTarget] OysterPrePearl:fallback:66\nCODE: funds += msg.value\nOPERATION: funds [+=] msg.value\nSSA: funds_1 [+] msg.value --> funds_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x86621332963202937650cb9153b1afc8e73296a1",
        "target": "[RepairTarget] OysterPrePearl:fallback:64\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_1 [+] amount_1 --> totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x86621332963202937650cb9153b1afc8e73296a1",
        "target": "[RepairTarget] OysterPrePearl:fallback:65\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x86621332963202937650cb9153b1afc8e73296a1",
        "target": "[RepairTarget] OysterPrePearl:fallback:63\nCODE: amount = msg.value * buyPrice\nOPERATION: msg.value [*] buyPrice\nSSA: msg.value [*] buyPrice_7 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x86621332963202937650cb9153b1afc8e73296a1",
        "target": "[RepairTarget] OysterPrePearl:_transfer:87\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x87bc61a21e8a4435051873f9f5ad653174ca00d5",
        "target": "[RepairTarget] EducationFundToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x87bc61a21e8a4435051873f9f5ad653174ca00d5",
        "target": "[RepairTarget] EducationFundToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x887ed27475f60f2df56fefc1f18f3aa8da65fb22",
        "target": "[RepairTarget] ParkCoin:_transfer:29\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x887ed27475f60f2df56fefc1f18f3aa8da65fb22",
        "target": "[RepairTarget] ParkCoin:_transfer:33\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8e843bde3bb2831a279a4df91ec1b4912bdfa0e4",
        "target": "[RepairTarget] KidsEducationFund:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8e843bde3bb2831a279a4df91ec1b4912bdfa0e4",
        "target": "[RepairTarget] KidsEducationFund:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x925351ca4b4d69af7e9315f7a3f524b1e34d03ab",
        "target": "[RepairTarget] ENTC:_transfer:58\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x92a92648bd788dcaa086773c975d928b4a60a182",
        "target": "[RepairTarget] koth_v1b:fallback:78\nCODE: pot += highestBet\nOPERATION: pot [+=] highestBet\nSSA: pot_1 [+] highestBet_2 --> pot_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x92a92648bd788dcaa086773c975d928b4a60a182",
        "target": "[RepairTarget] koth_v1b:fallback:81\nCODE: uint blocksRemaining = uint( 10 ** ((64-5*pot/1000000000000000000) / 40) )\nOPERATION: 5 [*] pot\nSSA: 5 [*] pot_2 --> TMP_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x92a92648bd788dcaa086773c975d928b4a60a182",
        "target": "[RepairTarget] koth_v1b:fallback:81\nCODE: uint blocksRemaining = uint( 10 ** ((64-5*pot/1000000000000000000) / 40) )\nOPERATION: 64 [-] 5*pot/1000000000000000000\nSSA: 64 [-] TMP_16 --> TMP_17\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x92a92648bd788dcaa086773c975d928b4a60a182",
        "target": "[RepairTarget] koth_v1b:fallback:81\nCODE: uint blocksRemaining = uint( 10 ** ((64-5*pot/1000000000000000000) / 40) )\nOPERATION: 5*pot [/] 1000000000000000000\nSSA: TMP_15 [/] 1000000000000000000 --> TMP_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x92a92648bd788dcaa086773c975d928b4a60a182",
        "target": "[RepairTarget] koth_v1b:fallback:81\nCODE: uint blocksRemaining = uint( 10 ** ((64-5*pot/1000000000000000000) / 40) )\nOPERATION: (64-5*pot/1000000000000000000) [/] 40\nSSA: TMP_17 [/] 40 --> TMP_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x92e578ecb8a93f26a6f650341aa500629d04777b",
        "target": "[RepairTarget] TokenERC20:_transfer:39\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x92e578ecb8a93f26a6f650341aa500629d04777b",
        "target": "[RepairTarget] TokenERC20:_transfer:42\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x966251ebf7121721e802c90bf4ffba6c5c36cd3c",
        "target": "[RepairTarget] MTDCERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x974973d316be10725444ef4f6e3bf1eb5e9f6678",
        "target": "[RepairTarget] koth_v1b:fallback:80\nCODE: uint blocksRemaining = uint( 10 ** ((64-5*pot) / 40) )\nOPERATION: 64 [-] 5*pot\nSSA: 64 [-] TMP_15 --> TMP_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x974973d316be10725444ef4f6e3bf1eb5e9f6678",
        "target": "[RepairTarget] koth_v1b:fallback:78\nCODE: pot += highestBet\nOPERATION: pot [+=] highestBet\nSSA: pot_1 [+] highestBet_2 --> pot_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x974973d316be10725444ef4f6e3bf1eb5e9f6678",
        "target": "[RepairTarget] koth_v1b:fallback:80\nCODE: uint blocksRemaining = uint( 10 ** ((64-5*pot) / 40) )\nOPERATION: 5 [*] pot\nSSA: 5 [*] pot_2 --> TMP_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x974973d316be10725444ef4f6e3bf1eb5e9f6678",
        "target": "[RepairTarget] koth_v1b:fallback:80\nCODE: uint blocksRemaining = uint( 10 ** ((64-5*pot) / 40) )\nOPERATION: (64-5*pot) [/] 40\nSSA: TMP_16 [/] 40 --> TMP_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x976c1926b162f4cebbd461a39fe5e5a695c132ae",
        "target": "[RepairTarget] XiDingCoin:TokenERC20:33\nCODE: totalSupply = initialSupply * 168000000\nOPERATION: initialSupply [*] 168000000\nSSA: initialSupply_1 [*] 168000000 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9c0c5a14fde1306686a8a270f271165acda670c2",
        "target": "[RepairTarget] EtherToTheMoon:takeMyMoney:34\nCODE: totalContribution += msg.value\nOPERATION: totalContribution [+=] msg.value\nSSA: totalContribution_1 [+] msg.value --> totalContribution_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9fbeb4a0970c844fd5c0214003841b73beab4224",
        "target": "[RepairTarget] BlockPrinceCoin:TokenERC20:33\nCODE: totalSupply = initialSupply * 1000000 ** uint256(decimals)\nOPERATION: initialSupply [*] 1000000 ** uint256(decimals)\nSSA: initialSupply_1 [*] TMP_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa0785242f6509329c983b1c80fb5f5c22ebfb6eb",
        "target": "[RepairTarget] TenthosToken:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa22de97ea1c3c7ef9862971b7e7e393328e5576f",
        "target": "[RepairTarget] Neulaut:transfer:26\nCODE: balances[_to] += (_value - fee)\nOPERATION: balances[_to] [+=] (_value - fee)\nSSA: REF_3 [+] TMP_5 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa22de97ea1c3c7ef9862971b7e7e393328e5576f",
        "target": "[RepairTarget] Neulaut:transfer:26\nCODE: balances[_to] += (_value - fee)\nOPERATION: _value [-] fee\nSSA: _value_1 [-] fee_1 --> TMP_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa22de97ea1c3c7ef9862971b7e7e393328e5576f",
        "target": "[RepairTarget] Neulaut:transfer:28\nCODE: Transfer(msg.sender, _to, (_value - fee))\nOPERATION: _value [-] fee\nSSA: _value_1 [-] fee_1 --> TMP_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa4573dee4e2ae6a97e71828195d8081fc06fb8b0",
        "target": "[RepairTarget] FICERC20:burnFrom:147\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa4573dee4e2ae6a97e71828195d8081fc06fb8b0",
        "target": "[RepairTarget] FICERC20:burn:128\nCODE: balanceOf[msg.sender] -= _value\nOPERATION: balanceOf[msg.sender] [-=] _value\nSSA: REF_18 [-] _value_1 --> REF_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa4d17ab1ee0efdd23edc2869e7ba96b89eecf9ab",
        "target": "[RepairTarget] TRUEToken:transfer:99\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa4d17ab1ee0efdd23edc2869e7ba96b89eecf9ab",
        "target": "[RepairTarget] TRUEToken:transferFrom:134\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_19 [-] _value_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa6a2f489fbe8de8e127cb3fbbae5b9295a364364",
        "target": "[RepairTarget] ZIRC:transferFrom:40\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa6e0bc809290257b2972a4f9ad9df004a1459ca7",
        "target": "[RepairTarget] TokenERC20:_transfer:159\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa8015120379d11602999d9caf162b7d507ca650a",
        "target": "[RepairTarget] SynthornToken:transferFrom:62\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa8015120379d11602999d9caf162b7d507ca650a",
        "target": "[RepairTarget] SynthornToken:fallback:112\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_4 [+] tokensIssued_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa8015120379d11602999d9caf162b7d507ca650a",
        "target": "[RepairTarget] SynthornToken:transfer:34\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xa98462679f1da80248750d495510ed72e9cda06d",
        "target": "[RepairTarget] MtumToken:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_9 [+] REF_10 --> TMP_18\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa9d8ac371a2d7873775697dadea9051933e241e1",
        "target": "[RepairTarget] Crowdsale:fallback:49\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa9d8ac371a2d7873775697dadea9051933e241e1",
        "target": "[RepairTarget] Crowdsale:fallback:50\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xac1ec693655caad71eade80094f69b2f7b82b483",
        "target": "[RepairTarget] EBLCreation:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xad6ca8f9d78eda5612aff7111f30fce6f60c006f",
        "target": "[RepairTarget] TunTokenERC20:transfer:25\nCODE: uint previousBalances = balanceOf[msg.sender] + balanceOf[_to]\nOPERATION: balanceOf[msg.sender] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad6ca8f9d78eda5612aff7111f30fce6f60c006f",
        "target": "[RepairTarget] TunTokenERC20:transfer:29\nCODE: assert(balanceOf[msg.sender] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[msg.sender] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad6ca8f9d78eda5612aff7111f30fce6f60c006f",
        "target": "[RepairTarget] TunTokenERC20:transferFrom:39\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_19 [-] _value_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xad6ca8f9d78eda5612aff7111f30fce6f60c006f",
        "target": "[RepairTarget] TunTokenERC20:transferFrom:42\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_21 [+] REF_22 --> TMP_23\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xafffcba7d4870056f7555dc767be73dfbcb0237e",
        "target": "[RepairTarget] TokenNedCoin:transferFrom:49\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb0b028210a1c3865556dc02cda6bed8a4c324300",
        "target": "[RepairTarget] LDXCToken:transferFrom:45\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb0ea8da75cb8695d2519d12f5f2bfafd15a29514",
        "target": "[RepairTarget] StandardToken:transferFrom:35\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb1d9f149e833510a3af3ab54dc1568ad11244bf7",
        "target": "[RepairTarget] blockoptions:main_ico:262\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_44 [+] REF_45 --> REF_44\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb1d9f149e833510a3af3ab54dc1568ad11244bf7",
        "target": "[RepairTarget] blockoptions:main_ico:271\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_53 [-] REF_54 --> TMP_109\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb1d9f149e833510a3af3ab54dc1568ad11244bf7",
        "target": "[RepairTarget] blockoptions:main_ico:272\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_56 [+] REF_57 --> REF_56\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb1d9f149e833510a3af3ab54dc1568ad11244bf7",
        "target": "[RepairTarget] blockoptions:main_ico:261\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_41 [-] REF_42 --> TMP_99\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb1d9f149e833510a3af3ab54dc1568ad11244bf7",
        "target": "[RepairTarget] blockoptions:pre_ico:249\nCODE: balances[investor[counter]]+=optsSent[counter]\nOPERATION: balances[investor[counter]] [+=] optsSent[counter]\nSSA: REF_32 [+] REF_33 --> REF_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb1d9f149e833510a3af3ab54dc1568ad11244bf7",
        "target": "[RepairTarget] blockoptions:main_ico:281\nCODE: balances[owner]=balances[owner]-optsSent[counter]\nOPERATION: balances[owner] [-] optsSent[counter]\nSSA: REF_65 [-] REF_66 --> TMP_119\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb1d9f149e833510a3af3ab54dc1568ad11244bf7",
        "target": "[RepairTarget] blockoptions:main_ico:265\nCODE: now >= (ico_start + 7 days) && now <= (ico_start + 14 days)\nOPERATION: ico_start [+] 7 days\nSSA: ico_start_3 [+] 1209600 --> TMP_103\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xb1d9f149e833510a3af3ab54dc1568ad11244bf7",
        "target": "[RepairTarget] blockoptions:main_ico:265\nCODE: now >= (ico_start + 7 days) && now <= (ico_start + 14 days)\nOPERATION: ico_start [+] 14 days\nSSA: ico_start_3 [+] 604800 --> TMP_101\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xb1d9f149e833510a3af3ab54dc1568ad11244bf7",
        "target": "[RepairTarget] blockoptions:main_ico:275\nCODE: now >= (ico_start + 14 days) && now <= (ico_start + 31 days)\nOPERATION: ico_start [+] 31 days\nSSA: ico_start_3 [+] 2678400 --> TMP_113\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xb1d9f149e833510a3af3ab54dc1568ad11244bf7",
        "target": "[RepairTarget] blockoptions:main_ico:275\nCODE: now >= (ico_start + 14 days) && now <= (ico_start + 31 days)\nOPERATION: ico_start [+] 14 days\nSSA: ico_start_3 [+] 1209600 --> TMP_111\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xb2069ca2122e652c0f6ed4d408c915bc103e24b8",
        "target": "[RepairTarget] DailycoinCrowdsale:getNumTokens:203\nCODE: now <= deadline - 35 days\nOPERATION: deadline [-] 35 days\nSSA: deadline_2 [-] 3024000 --> TMP_50\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb2069ca2122e652c0f6ed4d408c915bc103e24b8",
        "target": "[RepairTarget] DailycoinCrowdsale:getNumTokens:208\nCODE: multiple = multiple * 105 / 100\nOPERATION: multiple [*] 105\nSSA: multiple_1 [*] 105 --> TMP_58\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb2069ca2122e652c0f6ed4d408c915bc103e24b8",
        "target": "[RepairTarget] DailycoinCrowdsale:getNumTokens:208\nCODE: multiple = multiple * 105 / 100\nOPERATION: multiple * 105 [/] 100\nSSA: TMP_58 [/] 100 --> TMP_59\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb31ffc2eca634937a1acc375811d8a2c969ae61b",
        "target": "[RepairTarget] OysterPrePearl:fallback:63\nCODE: amount = msg.value * buyPrice\nOPERATION: msg.value [*] buyPrice\nSSA: msg.value [*] buyPrice_7 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb31ffc2eca634937a1acc375811d8a2c969ae61b",
        "target": "[RepairTarget] OysterPrePearl:fallback:64\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_1 [+] amount_1 --> totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb31ffc2eca634937a1acc375811d8a2c969ae61b",
        "target": "[RepairTarget] OysterPrePearl:fallback:65\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb31ffc2eca634937a1acc375811d8a2c969ae61b",
        "target": "[RepairTarget] OysterPrePearl:fallback:66\nCODE: funds += msg.value\nOPERATION: funds [+=] msg.value\nSSA: funds_1 [+] msg.value --> funds_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb31ffc2eca634937a1acc375811d8a2c969ae61b",
        "target": "[RepairTarget] OysterPrePearl:_transfer:87\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb4caeb542a927b55b7777c9c5b23f49835fee326",
        "target": "[RepairTarget] WNCT:transfer:25\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb4caeb542a927b55b7777c9c5b23f49835fee326",
        "target": "[RepairTarget] WNCT:transferFrom:34\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb515c702ea8d0f8e1d19499de2b40fec90d9832d",
        "target": "[RepairTarget] InRiddimCrowdsale:buy:122\nCODE: balanceOf[_buyer] += newTokens\nOPERATION: balanceOf[_buyer] [+=] newTokens\nSSA: REF_9 [+] newTokens_1 --> REF_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb5766f61911f8b520b0e938aae100834aa3048c6",
        "target": "[RepairTarget] BountyHunt:claimBounty:20\nCODE: totalBountyAmount -= balance\nOPERATION: totalBountyAmount [-=] balance\nSSA: totalBountyAmount_6 [-] balance_1 --> totalBountyAmount_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb5766f61911f8b520b0e938aae100834aa3048c6",
        "target": "[RepairTarget] BountyHunt:transferBounty:27\nCODE: bountyAmount[to] += value\nOPERATION: bountyAmount[to] [+=] value\nSSA: REF_6 [+] value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb5766f61911f8b520b0e938aae100834aa3048c6",
        "target": "[RepairTarget] BountyHunt:grantBounty:13\nCODE: bountyAmount[beneficiary] += amount\nOPERATION: bountyAmount[beneficiary] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb5766f61911f8b520b0e938aae100834aa3048c6",
        "target": "[RepairTarget] BountyHunt:grantBounty:14\nCODE: totalBountyAmount += amount\nOPERATION: totalBountyAmount [+=] amount\nSSA: totalBountyAmount_2 [+] amount_1 --> totalBountyAmount_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb71cd8f21d5c21edcd113ca2807189ddcaf9dd44",
        "target": "[RepairTarget] koth_v1b:fallback:78\nCODE: pot += highestBet\nOPERATION: pot [+=] highestBet\nSSA: pot_1 [+] highestBet_2 --> pot_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb71cd8f21d5c21edcd113ca2807189ddcaf9dd44",
        "target": "[RepairTarget] koth_v1b:fallback:81\nCODE: uint potEther = pot/1000000000000000000\nOPERATION: pot [/] 1000000000000000000\nSSA: pot_2 [/] 1000000000000000000 --> TMP_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb85581c73afbf7f899abacb84d795202abe5033d",
        "target": "[RepairTarget] Goal:_transfer:87\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb8742486c723793cf5162bb5d3425ed9cd73d049",
        "target": "[RepairTarget] TCASH:distributeTCASH:42\nCODE: balances[addresses[i]] += 245719916000\nOPERATION: balances[addresses[i]] [+=] 245719916000\nSSA: REF_4 [+] 245719916000 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb8742486c723793cf5162bb5d3425ed9cd73d049",
        "target": "[RepairTarget] TCASH:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb8742486c723793cf5162bb5d3425ed9cd73d049",
        "target": "[RepairTarget] TCASH:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb89727f22dcd13b2199b5f4476fe293e33c45c4b",
        "target": "[RepairTarget] FixedSupplyToken:transfer:73\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb89727f22dcd13b2199b5f4476fe293e33c45c4b",
        "target": "[RepairTarget] FixedSupplyToken:transferFrom:98\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb90e64082d00437e65a76d4c8187596bc213480a",
        "target": "[RepairTarget] StickerRegistry:claim:198\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb9132c68dd9f8b35334ceb2171c6b9fc09fc9233",
        "target": "[RepairTarget] SafeMath:mul:20\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xba7dcba2ade319bc772db4df75a76ba00dfb31b0",
        "target": "[RepairTarget] TokenERC20:_transfer:111\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbb1b3e8ddded8165d58b0c192d19cd360682b170",
        "target": "[RepairTarget] TokenERC20:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbc512b1d63110c286fd821a73855117fc395464d",
        "target": "[RepairTarget] MultiSigWallet:removeOwner:150\nCODE: owners.length -= 1\nOPERATION: owners.length [-=] 1\nSSA: REF_11 [-] 1 --> REF_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc1d7ccb5cc1b4e0b1bba69657392e28f0c0514bc",
        "target": "[RepairTarget] OysterPrePearl:fallback:72\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc1d7ccb5cc1b4e0b1bba69657392e28f0c0514bc",
        "target": "[RepairTarget] OysterPrePearl:fallback:71\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_1 [+] amount_1 --> totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc1d7ccb5cc1b4e0b1bba69657392e28f0c0514bc",
        "target": "[RepairTarget] OysterPrePearl:fallback:73\nCODE: funds += msg.value\nOPERATION: funds [+=] msg.value\nSSA: funds_1 [+] msg.value --> funds_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc1d7ccb5cc1b4e0b1bba69657392e28f0c0514bc",
        "target": "[RepairTarget] OysterPrePearl:_transfer:96\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc74ee75264c5f9036fd977f1b79f70ad310e0d55",
        "target": "[RepairTarget] GCA:transferFrom:40\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcea67610efccf2ba4f06f65ebb2c056112fe165f",
        "target": "[RepairTarget] ASSET:_transfer:91\nCODE: require(balanceOf[_to] + _value >= balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_2 [+] _value_1 --> TMP_7\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xcf2f68e9a1b38f9c154f87e52c2d2263f54e6ea2",
        "target": "[RepairTarget] TokenERC20:_transfer:33\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xcf2f68e9a1b38f9c154f87e52c2d2263f54e6ea2",
        "target": "[RepairTarget] TokenERC20:burnFrom:77\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_24 [-] _value_1 --> REF_24\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd125af3f2e26d69a2e0098e44f607e31197fa30e",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd1fce0e6272c1129194dd6eaf9b1451e5b49c9da",
        "target": "[RepairTarget] ETHPalace:distributeEPAL:42\nCODE: balances[addresses[i]] += 245719916000\nOPERATION: balances[addresses[i]] [+=] 245719916000\nSSA: REF_4 [+] 245719916000 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd1fce0e6272c1129194dd6eaf9b1451e5b49c9da",
        "target": "[RepairTarget] ETHPalace:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd1fce0e6272c1129194dd6eaf9b1451e5b49c9da",
        "target": "[RepairTarget] ETHPalace:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd44bb6663936cab1310584a277f7daa6943d4904",
        "target": "[RepairTarget] Winco:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_11\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd65960facb8e4a2dfcb2c2212cb2e44a02e2a57e",
        "target": "[RepairTarget] SoarCoin:transfer:78\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd65960facb8e4a2dfcb2c2212cb2e44a02e2a57e",
        "target": "[RepairTarget] SoarCoin:transferFrom:109\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd6d7d5722b5925f36055d27e1742b27bebad5bb7",
        "target": "[RepairTarget] FooToken:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd9c58ef8afcfe2df9884724de1614205a7b5f3f5",
        "target": "[RepairTarget] StandardToken:transfer:27\nCODE: balances[_to].lcValue += _value\nOPERATION: balances[_to].lcValue [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdb967cceb5ce4adb1524dad8f1fad6007fd7e86e",
        "target": "[RepairTarget] TokenERC20:_transfer:65\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdbdb79ad0a2243c947cc413798e8b90caba0b9df",
        "target": "[RepairTarget] DSMath:add:5\nCODE: require((z = x + y) >= x)\nOPERATION: x [+] y\nSSA: x_1 [+] y_1 --> TMP_0\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdcf533abdbae655e8fd438a9435733dbd9068b89",
        "target": "[RepairTarget] SolidusToken:fallback:96\nCODE: uint256 tokensIssued = (msg.value * tokenMultiplier)\nOPERATION: msg.value [*] tokenMultiplier\nSSA: msg.value [*] tokenMultiplier_4 --> TMP_35\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xde39e5e5a1b0eeb3afe717d6d011cae88d19451e",
        "target": "[RepairTarget] DimonCoin:transfer:99\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xde39e5e5a1b0eeb3afe717d6d011cae88d19451e",
        "target": "[RepairTarget] DimonCoin:transferFrom:114\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdfc658e95763d677203866b06982dcc6c5f3aeb2",
        "target": "[RepairTarget] PeerBudsToken:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdfc658e95763d677203866b06982dcc6c5f3aeb2",
        "target": "[RepairTarget] PeerBudsToken:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe437452b48455d592e351d43004dfbfd150d42c1",
        "target": "[RepairTarget] Supershop:_transfer:41\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe437452b48455d592e351d43004dfbfd150d42c1",
        "target": "[RepairTarget] Supershop:_transfer:44\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe56994e5be61b79402d204a5550843bd01ff71e9",
        "target": "[RepairTarget] CataloniaCoin:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe651b926a0b94a4832b2e7fcb2533c41d41291fe",
        "target": "[RepairTarget] RollToken:_transfer:87\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe8b151c05a27bf095c0534bd5531523769e2abc8",
        "target": "[RepairTarget] AMULETS:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xeb73cc4f11643666a79c34925886529da67f4fe6",
        "target": "[RepairTarget] TEST2:distributeTEST:42\nCODE: balances[addresses[i]] += 1000000 * 10**8\nOPERATION: balances[addresses[i]] [+=] 1000000 * 10**8\nSSA: 1000000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeb73cc4f11643666a79c34925886529da67f4fe6",
        "target": "[RepairTarget] TEST2:distributeTEST:42\nCODE: balances[addresses[i]] += 1000000 * 10**8\nOPERATION: 1000000 [*] 10**8\nSSA: 1000000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeb73cc4f11643666a79c34925886529da67f4fe6",
        "target": "[RepairTarget] TEST2:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xeb73cc4f11643666a79c34925886529da67f4fe6",
        "target": "[RepairTarget] TEST2:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xed2a2294bd1045b96386d21d22a13b343140bf9d",
        "target": "[RepairTarget] TEST:distributeTEST:42\nCODE: balances[addresses[i]] += 1000000 * 10**18\nOPERATION: balances[addresses[i]] [+=] 1000000 * 10**18\nSSA: 1000000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xed2a2294bd1045b96386d21d22a13b343140bf9d",
        "target": "[RepairTarget] TEST:distributeTEST:42\nCODE: balances[addresses[i]] += 1000000 * 10**18\nOPERATION: 1000000 [*] 10**18\nSSA: 1000000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xed2a2294bd1045b96386d21d22a13b343140bf9d",
        "target": "[RepairTarget] TEST:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xed2a2294bd1045b96386d21d22a13b343140bf9d",
        "target": "[RepairTarget] TEST:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xeef69ecf4851f7ee36196f26da23f6229855076b",
        "target": "[RepairTarget] StandardToken:transfer:28\nCODE: balances[_to].lcValue += _value\nOPERATION: balances[_to].lcValue [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeefb40cd8224c2986f391b62b206c7a018885517",
        "target": "[RepairTarget] touristoken:_transfer:42\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xeefb40cd8224c2986f391b62b206c7a018885517",
        "target": "[RepairTarget] touristoken:_transfer:45\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xef81796941e13116b087a35c0602aa4e3a82c5cc",
        "target": "[RepairTarget] CyberToken:transfer:31\nCODE: balanceOf[msg.sender] -= _value\nOPERATION: balanceOf[msg.sender] [-=] _value\nSSA: REF_1 [-] _value_1 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xef81796941e13116b087a35c0602aa4e3a82c5cc",
        "target": "[RepairTarget] CyberToken:burn:41\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf03f8d65bafa598611c3495124093c56e8f638f0",
        "target": "[RepairTarget] DSMath:mul:120\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_41\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf03f8d65bafa598611c3495124093c56e8f638f0",
        "target": "[RepairTarget] DSMath:mul:120\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: (z = x * y) [/] y\nSSA: z_1 [/] y_1 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf03f8d65bafa598611c3495124093c56e8f638f0",
        "target": "[RepairTarget] DSMath:sub:117\nCODE: require((z = x - y) <= x)\nOPERATION: x [-] y\nSSA: x_1 [-] y_1 --> TMP_37\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf084d5bc3e35e3d903260267ebd545c49c6013d0",
        "target": "[RepairTarget] DimonCoin:distributeFUD:48\nCODE: balances[addresses[i]] += _value\nOPERATION: balances[addresses[i]] [+=] _value\nSSA: REF_5 [+] _value_1 --> REF_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf4ac7eccd66a282920c131f96e716e3457120e03",
        "target": "[RepairTarget] ERC20:transfer:57\nCODE: tokenOwned[msg.sender] -= value\nOPERATION: tokenOwned[msg.sender] [-=] value\nSSA: REF_3 [-] value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf4ac7eccd66a282920c131f96e716e3457120e03",
        "target": "[RepairTarget] ERC20:transferFrom:75\nCODE: tokenOwned[to] += value\nOPERATION: tokenOwned[to] [+=] value\nSSA: REF_10 [+] value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf536757e2eb6f976b7f7eb386c648bdce07bf576",
        "target": "[RepairTarget] StandardToken:transfer:83\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf536757e2eb6f976b7f7eb386c648bdce07bf576",
        "target": "[RepairTarget] StandardToken:transferFrom:94\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf5ac04111dfecaf859071c4a424ebcda1379825b",
        "target": "[RepairTarget] Airdrop:fallback:52\nCODE: tokenReward.transfer(msg.sender, (amount / price) * 1000000)\nOPERATION: (amount / price) [*] 1000000\nSSA: TMP_13 [*] 1000000 --> TMP_14\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf5ac04111dfecaf859071c4a424ebcda1379825b",
        "target": "[RepairTarget] Airdrop:fallback:52\nCODE: tokenReward.transfer(msg.sender, (amount / price) * 1000000)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf5d161f170cb657a91216bebe3cdfc7738856b4d",
        "target": "[RepairTarget] ZupplyToken:buyTokensPresale:229\nCODE: presaleSoldTokens+= newTokens\nOPERATION: presaleSoldTokens [+=] newTokens\nSSA: presaleSoldTokens_2 [+] newTokens_1 --> presaleSoldTokens_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf5d161f170cb657a91216bebe3cdfc7738856b4d",
        "target": "[RepairTarget] ZupplyToken:buyTokensICO:238\nCODE: require(msg.value >= ((1 ether / 1 wei) / 100))\nOPERATION: (1 ether / 1 wei) [/] 100\nSSA: TMP_130 [/] 100 --> TMP_131\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf5d161f170cb657a91216bebe3cdfc7738856b4d",
        "target": "[RepairTarget] ZupplyToken:buyTokensICO:238\nCODE: require(msg.value >= ((1 ether / 1 wei) / 100))\nOPERATION: 1 ether [/] 1 wei\nSSA: 1000000000000000000 [/] 1 --> TMP_130\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xf9b978cd0d25713440164b2430b0caf3debfed9d",
        "target": "[RepairTarget] FixedSupplyToken:transfer:73\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf9b978cd0d25713440164b2430b0caf3debfed9d",
        "target": "[RepairTarget] FixedSupplyToken:transferFrom:98\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfa21d56a4058e571da42c627e4f59826e78cf0b8",
        "target": "[RepairTarget] EnjinBuyer:withdraw_refund:89\nCODE: refund_eth_value -= eth_to_withdraw\nOPERATION: refund_eth_value [-=] eth_to_withdraw\nSSA: refund_eth_value_1 [-] eth_to_withdraw_1 --> refund_eth_value_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfe38739c4b70cd6d1d3674e70d17fb1999cb4f9f",
        "target": "[RepairTarget] MPY:transferFrom:141\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfe81b2bb25c34dfb2a023d1378a5f41759973067",
        "target": "[RepairTarget] ValueToken:transfer:50\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfe81b2bb25c34dfb2a023d1378a5f41759973067",
        "target": "[RepairTarget] ValueToken:transferFrom:74\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xff1ab9af70681f0dead85ac3233a2214cfd1112d",
        "target": "[RepairTarget] OTC2:_transfer:33\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xff1ab9af70681f0dead85ac3233a2214cfd1112d",
        "target": "[RepairTarget] OTC2:_transfer:37\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xff833d42c6a9953342dcb2e24f5579dea8305995",
        "target": "[RepairTarget] CrowdsaleCryptoMindSR:fallback:51\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0180ec945191fda23c52b1d05eec64a2e3f68781",
        "target": "[RepairTarget] BnsPresale:sendRefund:138\nCODE: total_refunded += amount_to_refund\nOPERATION: total_refunded [+=] amount_to_refund\nSSA: total_refunded_3 [+] amount_to_refund_1 --> total_refunded_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x047187e53477be70dbe8ea5b799318f2e165052f",
        "target": "[RepairTarget] DSMath:mul:120\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: (z = x * y) [/] y\nSSA: z_1 [/] y_1 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x047187e53477be70dbe8ea5b799318f2e165052f",
        "target": "[RepairTarget] DSMath:mul:120\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_41\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x05580ac8bdcdecee70c39592cd07c303992d58b8",
        "target": "[RepairTarget] MTBUSD:transfer:80\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x05580ac8bdcdecee70c39592cd07c303992d58b8",
        "target": "[RepairTarget] MTBUSD:transferFrom:105\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7",
        "target": "[RepairTarget] VNC:drop:218\nCODE: assert(balances[owner] >= amt * addresses.length)\nOPERATION: amt [*] addresses.length\nSSA: amt_1 [*] REF_86 --> TMP_82\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x09f5ee84f440eeba099fcfa6bcf421811a051168",
        "target": "[RepairTarget] ELTC:distributeELTC:42\nCODE: balances[addresses[i]] += 1000000000000\nOPERATION: balances[addresses[i]] [+=] 1000000000000\nSSA: REF_4 [+] 1000000000000 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x09f5ee84f440eeba099fcfa6bcf421811a051168",
        "target": "[RepairTarget] ELTC:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x09f5ee84f440eeba099fcfa6bcf421811a051168",
        "target": "[RepairTarget] ELTC:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1694ee5ef3d9f172e440004dda88bb60441ce6c5",
        "target": "[RepairTarget] BitcoinGreen:distributeBTCG:44\nCODE: balances[addresses[i]] += _amount * 10**8\nOPERATION: balances[addresses[i]] [+=] _amount * 10**8\nSSA: _amount_1 [*] TMP_3 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1694ee5ef3d9f172e440004dda88bb60441ce6c5",
        "target": "[RepairTarget] BitcoinGreen:distributeBTCG:45\nCODE: Transfer(owner, addresses[i], _amount * 10**8)\nOPERATION: _amount [*] 10**8\nSSA: _amount_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1694ee5ef3d9f172e440004dda88bb60441ce6c5",
        "target": "[RepairTarget] BitcoinGreen:distributeBTCG:44\nCODE: balances[addresses[i]] += _amount * 10**8\nOPERATION: _amount [*] 10**8\nSSA: _amount_1 [*] TMP_3 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1694ee5ef3d9f172e440004dda88bb60441ce6c5",
        "target": "[RepairTarget] BitcoinGreen:transfer:63\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1694ee5ef3d9f172e440004dda88bb60441ce6c5",
        "target": "[RepairTarget] BitcoinGreen:transferFrom:82\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x19f08ceb3783658c30c33b8692c80eecfd8457bd",
        "target": "[RepairTarget] EtherCard:createGift:49\nCODE: msg.value * 1000 < 1\nOPERATION: msg.value [*] 1000\nSSA: msg.value [*] 1000 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1e8cc3c765c4adb887f2886b2fa0c7ea5ee5b5ba",
        "target": "[RepairTarget] MTB:transfer:80\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1e8cc3c765c4adb887f2886b2fa0c7ea5ee5b5ba",
        "target": "[RepairTarget] MTB:transferFrom:105\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2a4b256440fe78cbb6eb95271b6205988ab259ca",
        "target": "[RepairTarget] StandardToken:transferFrom:71\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x313411d56f191cbc367aea5e9bde69817b7c537d",
        "target": "[RepairTarget] PresaleToken:buyTokens:108\nCODE: assert(ethBalances[_buyer] + ethValue >= ethBalances[_buyer])\nOPERATION: ethBalances[_buyer] [+] ethValue\nSSA: REF_3 [+] ethValue_1 --> TMP_29\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x33b44a1d150f3feaa40503ad20a75634adc39b18",
        "target": "[RepairTarget] TimeCapsule:deposit:24\nCODE: deposits[msg.sender] += msg.value\nOPERATION: deposits[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3526cf7d12c95b11a680678cc1f705cba667578d",
        "target": "[RepairTarget] StaffFunds:deposit:19\nCODE: deposits[msg.sender] += msg.value\nOPERATION: deposits[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3c22ae85b4ee099f4fd656872343c95ff74d57d4",
        "target": "[RepairTarget] Number1Dime:fallback:150\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_20 [+] tokensIssued_1 --> REF_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3c22ae85b4ee099f4fd656872343c95ff74d57d4",
        "target": "[RepairTarget] Number1Dime:transfer:103\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_5 [+] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3c22ae85b4ee099f4fd656872343c95ff74d57d4",
        "target": "[RepairTarget] Number1Dime:transferFrom:123\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3d34cc988d583dd2757acaa18a1e90cfab8b7b1d",
        "target": "[RepairTarget] StandardToken:transferFrom:100\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x404803e04be686f70f69ea2c2bbd59c33fbb4db2",
        "target": "[RepairTarget] OysterPrePearl:fallback:71\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x404803e04be686f70f69ea2c2bbd59c33fbb4db2",
        "target": "[RepairTarget] OysterPrePearl:fallback:72\nCODE: funds += msg.value\nOPERATION: funds [+=] msg.value\nSSA: funds_1 [+] msg.value --> funds_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x404803e04be686f70f69ea2c2bbd59c33fbb4db2",
        "target": "[RepairTarget] OysterPrePearl:fallback:70\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_1 [+] amount_1 --> totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x404803e04be686f70f69ea2c2bbd59c33fbb4db2",
        "target": "[RepairTarget] OysterPrePearl:_transfer:94\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x428c57de1a1d519e953334553b1cc7ef3216e0db",
        "target": "[RepairTarget] StandardToken:transferFrom:100\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x461733c17b0755ca5649b6db08b3e213fcf22546",
        "target": "[RepairTarget] DSMath:mul:120\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: (z = x * y) [/] y\nSSA: z_1 [/] y_1 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x461733c17b0755ca5649b6db08b3e213fcf22546",
        "target": "[RepairTarget] DSMath:mul:120\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_41\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x461733c17b0755ca5649b6db08b3e213fcf22546",
        "target": "[RepairTarget] DSMath:sub:117\nCODE: require((z = x - y) <= x)\nOPERATION: x [-] y\nSSA: x_1 [-] y_1 --> TMP_37\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4c7c98c4d64c29ef8103b005eeccf5145cfdf8c1",
        "target": "[RepairTarget] Savings:deposit:32\nCODE: deposits[msg.sender] += msg.value\nOPERATION: deposits[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4f3e1a467d2ce2e01941a789ab226c13202d880e",
        "target": "[RepairTarget] AvPresale:sendMoneyBack:117\nCODE: total_money_back += amount_to_money_back\nOPERATION: total_money_back [+=] amount_to_money_back\nSSA: total_money_back_3 [+] amount_to_money_back_1 --> total_money_back_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x54e20fea922df728daf9701c704e52018c70edf9",
        "target": "[RepairTarget] StandardToken:transferFrom:101\nCODE: allowed[_from][msg.sender] -= totalTokensToTransfer\nOPERATION: allowed[_from][msg.sender] [-=] totalTokensToTransfer\nSSA: REF_7 [-] totalTokensToTransfer_1 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x57a1acbf4205eef6a0ac6d41b481268c3db3d768",
        "target": "[RepairTarget] StudioCrowdsale:fallback:48\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x57a1acbf4205eef6a0ac6d41b481268c3db3d768",
        "target": "[RepairTarget] StudioCrowdsale:fallback:49\nCODE: tokensSold += amount / price\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x57a1acbf4205eef6a0ac6d41b481268c3db3d768",
        "target": "[RepairTarget] StudioCrowdsale:fallback:49\nCODE: tokensSold += amount / price\nOPERATION: tokensSold [+=] amount / price\nSSA: tokensSold_1 [+] TMP_10 --> tokensSold_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5bf554632a059ae0537a3eeb20aced49348b8f99",
        "target": "[RepairTarget] ERC20Token:transferFrom:92\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5e6b6d9abad9093fdc861ea1600eba1b355cd940",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5e9c58aaed30f2ece3d2baf7814be9dc4425a6d9",
        "target": "[RepairTarget] StandardToken:transfer:110\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5e9c58aaed30f2ece3d2baf7814be9dc4425a6d9",
        "target": "[RepairTarget] StandardToken:transferFrom:129\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_11 [+] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x65c52ae9b15dd6f30902e9f8164c91e912ee2be3",
        "target": "[RepairTarget] Vault:deposit:35\nCODE: Deposits[msg.sender] += msg.value\nOPERATION: Deposits[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x662abcad0b7f345ab7ffb1b1fbb9df7894f18e66",
        "target": "[RepairTarget] StandardToken:transfer:124\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x662abcad0b7f345ab7ffb1b1fbb9df7894f18e66",
        "target": "[RepairTarget] StandardToken:transferFrom:145\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_18 [-] _value_1 --> REF_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x67682915bdfe37a04edcb8888c0f162181e9f400",
        "target": "[RepairTarget] StandardToken:transferFrom:91\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x681f453510adab676724074d212c986ecb53726e",
        "target": "[RepairTarget] AvPresale:sendMoneyBack:117\nCODE: total_money_back += amount_to_money_back\nOPERATION: total_money_back [+=] amount_to_money_back\nSSA: total_money_back_3 [+] amount_to_money_back_1 --> total_money_back_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x725374b9671f3f2d326359750f9f2da4a5fe5d08",
        "target": "[RepairTarget] initLib:creditUserPool:541\nCODE: poolBalance[_year][_month] = poolBalance[_year][_month].add((_duration * _price * 90) / 100)\nOPERATION: _duration * _price [*] 90\nSSA: TMP_213 [*] 90 --> TMP_214\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x725374b9671f3f2d326359750f9f2da4a5fe5d08",
        "target": "[RepairTarget] DateTime:addMonth:225\nCODE: _nwMonth = _month + _add\nOPERATION: _month [+] _add\nSSA: _month_1 [+] _add_1 --> TMP_88\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x725374b9671f3f2d326359750f9f2da4a5fe5d08",
        "target": "[RepairTarget] initLib:creditUserPool:541\nCODE: poolBalance[_year][_month] = poolBalance[_year][_month].add((_duration * _price * 90) / 100)\nOPERATION: _duration [*] _price\nSSA: _duration_1 [*] _price_1 --> TMP_213\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x725374b9671f3f2d326359750f9f2da4a5fe5d08",
        "target": "[RepairTarget] initLib:creditUserPool:541\nCODE: poolBalance[_year][_month] = poolBalance[_year][_month].add((_duration * _price * 90) / 100)\nOPERATION: (_duration * _price * 90) [/] 100\nSSA: TMP_214 [/] 100 --> TMP_215\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x77ceff4173a56cd22b6184fa59c668b364ae55b8",
        "target": "[RepairTarget] StandardToken:transfer:124\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x77ceff4173a56cd22b6184fa59c668b364ae55b8",
        "target": "[RepairTarget] StandardToken:transferFrom:145\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_18 [-] _value_1 --> REF_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7d8ecd4387af5024d60ef6fe79148d0e11a5b7ed",
        "target": "[RepairTarget] PublicMxResolver:setABI:187\nCODE: ((contentType - 1) & contentType) != 0\nOPERATION: contentType [-] 1\nSSA: contentType_1 [-] 1 --> TMP_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7e8bae58a61805858186d6ff869c36a8162db3c0",
        "target": "[RepairTarget] TBCoin:getRateAt:240\nCODE: at < (startDate + 27 days)\nOPERATION: startDate [+] 27 days\nSSA: startDate_2 [+] 2332800 --> TMP_96\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7e8bae58a61805858186d6ff869c36a8162db3c0",
        "target": "[RepairTarget] TBCoin:getRateAt:238\nCODE: at < (startDate + 21 days)\nOPERATION: startDate [+] 21 days\nSSA: startDate_2 [+] 1814400 --> TMP_94\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x81c798ea668b6d7e07ea198014265e0c1d64b5a8",
        "target": "[RepairTarget] Vault:deposit:29\nCODE: Deposits[msg.sender] += msg.value\nOPERATION: Deposits[msg.sender] [+=] msg.value\nSSA: REF_2 [+] msg.value --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8f005c668c05ca75eccffd092e24feaf6fe26b27",
        "target": "[RepairTarget] eBTG:distributeeBTG:42\nCODE: balances[addresses[i]] += 245719916000\nOPERATION: balances[addresses[i]] [+=] 245719916000\nSSA: REF_4 [+] 245719916000 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8f005c668c05ca75eccffd092e24feaf6fe26b27",
        "target": "[RepairTarget] eBTG:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8f005c668c05ca75eccffd092e24feaf6fe26b27",
        "target": "[RepairTarget] eBTG:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8f69cfd1151ccbd04ec04cf6d279dab03ae95c24",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x95609c7c7cbc0f3ed3f7005379f5ae5f872408e2",
        "target": "[RepairTarget] BnsPresale:sendRefund:138\nCODE: total_refunded += amount_to_refund\nOPERATION: total_refunded [+=] amount_to_refund\nSSA: total_refunded_3 [+] amount_to_refund_1 --> total_refunded_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x981930b9c44fc164084491ad3e1c8568ba3b0fb6",
        "target": "[RepairTarget] StandardToken:transferFrom:105\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9854d5c1e479307dcb07d1f1102d2ac68dab5b6c",
        "target": "[RepairTarget] BaileyToken:send1Mil:40\nCODE: balances[msg.sender] -= 1000000 * 10**18\nOPERATION: balances[msg.sender] [-=] 1000000 * 10**18\nSSA: REF_1 [-] TMP_3 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9854d5c1e479307dcb07d1f1102d2ac68dab5b6c",
        "target": "[RepairTarget] BaileyToken:send1Mil:40\nCODE: balances[msg.sender] -= 1000000 * 10**18\nOPERATION: 1000000 [*] 10**18\nSSA: 1000000 [*] TMP_2 --> TMP_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9854d5c1e479307dcb07d1f1102d2ac68dab5b6c",
        "target": "[RepairTarget] BaileyToken:transfer:58\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_7 [-] _amount_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9854d5c1e479307dcb07d1f1102d2ac68dab5b6c",
        "target": "[RepairTarget] BaileyToken:transferFrom:77\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9a51f8fdd2d43c79da4549d452d35970bbefc48f",
        "target": "[RepairTarget] StandardToken:transferFrom:102\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9a9ffd00147046ce4df1c954c953b27f9b4f6529",
        "target": "[RepairTarget] EDNR:distributeEDNR:42\nCODE: balances[addresses[i]] += 245719916000\nOPERATION: balances[addresses[i]] [+=] 245719916000\nSSA: REF_4 [+] 245719916000 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9a9ffd00147046ce4df1c954c953b27f9b4f6529",
        "target": "[RepairTarget] EDNR:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9a9ffd00147046ce4df1c954c953b27f9b4f6529",
        "target": "[RepairTarget] EDNR:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa3d48af5b7541658e7b663905f11433f1b4074f5",
        "target": "[RepairTarget] OysterPearl:claim:98\nCODE: balanceOf[_fee] -= feeAmount\nOPERATION: balanceOf[_fee] [-=] feeAmount\nSSA: REF_13 [-] feeAmount_3 --> REF_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa3d48af5b7541658e7b663905f11433f1b4074f5",
        "target": "[RepairTarget] OysterPearl:fallback:109\nCODE: funds += msg.value\nOPERATION: funds [+=] msg.value\nSSA: funds_1 [+] msg.value --> funds_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa3d48af5b7541658e7b663905f11433f1b4074f5",
        "target": "[RepairTarget] OysterPearl:fallback:106\nCODE: require(totalSupply + amount <= (500000000 * 10 ** uint256(decimals)))\nOPERATION: 500000000 [*] 10 ** uint256(decimals)\nSSA: 500000000 [*] TMP_62 --> TMP_63\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa3d48af5b7541658e7b663905f11433f1b4074f5",
        "target": "[RepairTarget] OysterPearl:fallback:106\nCODE: require(totalSupply + amount <= (500000000 * 10 ** uint256(decimals)))\nOPERATION: totalSupply [+] amount\nSSA: totalSupply_5 [+] amount_1 --> TMP_60\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa3d48af5b7541658e7b663905f11433f1b4074f5",
        "target": "[RepairTarget] OysterPearl:fallback:108\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_14 [+] amount_1 --> REF_14\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa7a5dc2e89511c1ba1aa0eae97f5802c65e57f01",
        "target": "[RepairTarget] BITCH:send1Mil:41\nCODE: balances[add] += 1000000\nOPERATION: balances[add] [+=] 1000000\nSSA: REF_2 [+] 1000000 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa7a5dc2e89511c1ba1aa0eae97f5802c65e57f01",
        "target": "[RepairTarget] BITCH:transfer:58\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_7 [-] _amount_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa7a5dc2e89511c1ba1aa0eae97f5802c65e57f01",
        "target": "[RepairTarget] BITCH:transferFrom:77\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa865a4bebe83940631e7cb1207a8ea76f0b2e49f",
        "target": "[RepairTarget] PuppyCoin:transfer:86\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_23 [-] _amount_1 --> REF_23\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa865a4bebe83940631e7cb1207a8ea76f0b2e49f",
        "target": "[RepairTarget] PuppyCoin:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_32 [-] _amount_1 --> REF_32\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaa33983acfc48be1d76e0f8fe377ffe956ad84ad",
        "target": "[RepairTarget] DailyCoinToken:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb70835d7822ebb9426b56543e391846c107bd32c",
        "target": "[RepairTarget] StandardToken:transferFrom:105\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc0661b1fce0e77ea21a3268c5d42a5442dd96817",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc2ac61bc8645e5571b433b2af6110dbd2f094d05",
        "target": "[RepairTarget] TBCoin:getRateAt:238\nCODE: at < (startDate + 21 days)\nOPERATION: startDate [+] 21 days\nSSA: startDate_2 [+] 1814400 --> TMP_94\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc2ac61bc8645e5571b433b2af6110dbd2f094d05",
        "target": "[RepairTarget] TBCoin:getRateAt:240\nCODE: at < (startDate + 28 days)\nOPERATION: startDate [+] 28 days\nSSA: startDate_2 [+] 2419200 --> TMP_96\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd091eb3a1cbb2182d1b98435be25bbaf89746540",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd8d80210106e2a431c9c43ac133ec22a008a2f07",
        "target": "[RepairTarget] PresaleToken:buyTokens:74\nCODE: totalSupply + newTokens > TOKEN_SUPPLY_LIMIT\nOPERATION: totalSupply [+] newTokens\nSSA: totalSupply_2 [+] newTokens_1 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9b487b5db05dfb5df9b456c6259a821ffbaea30",
        "target": "[RepairTarget] OysterPrePearl:fallback:72\nCODE: funds += msg.value\nOPERATION: funds [+=] msg.value\nSSA: funds_1 [+] msg.value --> funds_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9b487b5db05dfb5df9b456c6259a821ffbaea30",
        "target": "[RepairTarget] OysterPrePearl:fallback:71\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9b487b5db05dfb5df9b456c6259a821ffbaea30",
        "target": "[RepairTarget] OysterPrePearl:fallback:70\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_1 [+] amount_1 --> totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9b487b5db05dfb5df9b456c6259a821ffbaea30",
        "target": "[RepairTarget] OysterPrePearl:_transfer:94\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdbbb7c56a5c8f60a9e5a38501a168f673cd61754",
        "target": "[RepairTarget] AvPresale:sendMoneyBack:117\nCODE: total_money_back += amount_to_money_back\nOPERATION: total_money_back [+=] amount_to_money_back\nSSA: total_money_back_3 [+] amount_to_money_back_1 --> total_money_back_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe5bc02fe7f2ed6a76a95219ee4d6555cf90c86b3",
        "target": "[RepairTarget] DToken:transfer:74\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe5bc02fe7f2ed6a76a95219ee4d6555cf90c86b3",
        "target": "[RepairTarget] DToken:transferFrom:99\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe60b241a21dad25876379c617b846ad4143bd3c5",
        "target": "[RepairTarget] StudioCrowdsale:fallback:48\nCODE: tokensSold += amount / price\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe60b241a21dad25876379c617b846ad4143bd3c5",
        "target": "[RepairTarget] StudioCrowdsale:fallback:47\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe60b241a21dad25876379c617b846ad4143bd3c5",
        "target": "[RepairTarget] StudioCrowdsale:fallback:48\nCODE: tokensSold += amount / price\nOPERATION: tokensSold [+=] amount / price\nSSA: tokensSold_1 [+] TMP_10 --> tokensSold_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xed1eba8b87cd7e04e9389f65f7aeca750c85a010",
        "target": "[RepairTarget] DSMath:mul:120\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_41\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xed1eba8b87cd7e04e9389f65f7aeca750c85a010",
        "target": "[RepairTarget] DSMath:mul:120\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: (z = x * y) [/] y\nSSA: z_1 [/] y_1 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xed1eba8b87cd7e04e9389f65f7aeca750c85a010",
        "target": "[RepairTarget] DSMath:sub:117\nCODE: require((z = x - y) <= x)\nOPERATION: x [-] y\nSSA: x_1 [-] y_1 --> TMP_37\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xef828938155cabfe83affbe726b55d188b4f45c0",
        "target": "[RepairTarget] StandardToken:transferFrom:55\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf4991089fdc65a9e23771adef47544742a0096c4",
        "target": "[RepairTarget] TokenERC20:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfb9c566774c2f1de4d364a272cbf0de7c23dd825",
        "target": "[RepairTarget] StandardToken:transferFrom:107\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x002842529757eab873cce9c251087e1b993f9200",
        "target": "[RepairTarget] SafeMath:mul:10\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x003f79d7be15dc1ad90ce00e6ea68f335e2b789b",
        "target": "[RepairTarget] TzTToken:distributeToken:42\nCODE: balances[addresses[i]] += _value * 10**8\nOPERATION: balances[addresses[i]] [+=] _value * 10**8\nSSA: _value_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x003f79d7be15dc1ad90ce00e6ea68f335e2b789b",
        "target": "[RepairTarget] TzTToken:distributeToken:43\nCODE: Transfer(owner, addresses[i], _value * 10**8)\nOPERATION: _value [*] 10**8\nSSA: _value_1 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x003f79d7be15dc1ad90ce00e6ea68f335e2b789b",
        "target": "[RepairTarget] TzTToken:distributeToken:42\nCODE: balances[addresses[i]] += _value * 10**8\nOPERATION: _value [*] 10**8\nSSA: _value_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x003f79d7be15dc1ad90ce00e6ea68f335e2b789b",
        "target": "[RepairTarget] TzTToken:transfer:63\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x003f79d7be15dc1ad90ce00e6ea68f335e2b789b",
        "target": "[RepairTarget] TzTToken:transferFrom:82\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x010be8a86d416dbcf1e18a5ad59910f12a360ec7",
        "target": "[RepairTarget] Token:transfer:68\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0156888f51d68f858ac88aba45df699e2af2e4cc",
        "target": "[RepairTarget] StandardToken:transfer:63\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0156888f51d68f858ac88aba45df699e2af2e4cc",
        "target": "[RepairTarget] StandardToken:transferFrom:80\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_15 [+] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0156888f51d68f858ac88aba45df699e2af2e4cc",
        "target": "[RepairTarget] StandardToken:transferFrom:83\nCODE: assert(balances[_from] + balances[_to] == previousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_18 [+] REF_19 --> TMP_21\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0229cc0290da2a9d2a80a8c7cd283d046b1ada57",
        "target": "[RepairTarget] VertNite:transferFrom:59\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x03dcbedc7f08f9fe276948d7b06a180834e80ece",
        "target": "[RepairTarget] LTCD:transferFrom:71\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0438ce30335047edf6655f64de599c6b5727d54d",
        "target": "[RepairTarget] JesusCoin:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0438ce30335047edf6655f64de599c6b5727d54d",
        "target": "[RepairTarget] JesusCoin:transferFrom:79\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x085558b7561b51ffb0a4dabe7459d359c05b58cc",
        "target": "[RepairTarget] CrowdDreaming:transfer:101\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x085558b7561b51ffb0a4dabe7459d359c05b58cc",
        "target": "[RepairTarget] CrowdDreaming:transferFrom:116\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0952702680b4bf531702385f948a7ee998b53580",
        "target": "[RepairTarget] Crowdsale:fallback:33\nCODE: tokenReward.transfer(msg.sender, msg.value * price)\nOPERATION: msg.value [*] price\nSSA: msg.value [*] price_1 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0952702680b4bf531702385f948a7ee998b53580",
        "target": "[RepairTarget] Crowdsale:fallback:31\nCODE: balanceOf[msg.sender] += msg.value\nOPERATION: balanceOf[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x09678741bd50c3e74301f38fbd0136307099ae5d",
        "target": "[RepairTarget] LocalEthereumEscrows:resolveDispute:268\nCODE: _seller.transfer((_value - _totalFees) * (100 - _buyerPercent) / 100)\nOPERATION: (_value - _totalFees) [*] (100 - _buyerPercent)\nSSA: TMP_84 [*] TMP_85 --> TMP_86\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x09678741bd50c3e74301f38fbd0136307099ae5d",
        "target": "[RepairTarget] LocalEthereumEscrows:resolveDispute:268\nCODE: _seller.transfer((_value - _totalFees) * (100 - _buyerPercent) / 100)\nOPERATION: 100 [-] _buyerPercent\nSSA: 100 [-] _buyerPercent_1 --> TMP_85\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x09678741bd50c3e74301f38fbd0136307099ae5d",
        "target": "[RepairTarget] LocalEthereumEscrows:resolveDispute:268\nCODE: _seller.transfer((_value - _totalFees) * (100 - _buyerPercent) / 100)\nOPERATION: _value [-] _totalFees\nSSA: _value_1 [-] _totalFees_1 --> TMP_84\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x09678741bd50c3e74301f38fbd0136307099ae5d",
        "target": "[RepairTarget] LocalEthereumEscrows:resolveDispute:268\nCODE: _seller.transfer((_value - _totalFees) * (100 - _buyerPercent) / 100)\nOPERATION: (_value - _totalFees) * (100 - _buyerPercent) [/] 100\nSSA: TMP_86 [/] 100 --> TMP_87\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x09e3f27d540edbcd9a6b3e75dcae501ecaed510b",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0a283ed40e2f050b53094d08bde36f67db50bcfa",
        "target": "[RepairTarget] FreeCoin:transfer:58\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_6 [-] _amount_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0a283ed40e2f050b53094d08bde36f67db50bcfa",
        "target": "[RepairTarget] FreeCoin:transferFrom:81\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0c1a3a44e2161c871b08ebbafda46bd12748953f",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0e915b35cc269b2dfc8bbd8e4a88ed4884a53efc",
        "target": "[RepairTarget] CrowdSale:purchase:51\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0e915b35cc269b2dfc8bbd8e4a88ed4884a53efc",
        "target": "[RepairTarget] CrowdSale:purchase:52\nCODE: tokenReward.transferFrom(beneficiary, msg.sender, (amount * price) / 1 ether)\nOPERATION: amount [*] price\nSSA: amount_1 [*] price_2 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0e915b35cc269b2dfc8bbd8e4a88ed4884a53efc",
        "target": "[RepairTarget] CrowdSale:purchase:52\nCODE: tokenReward.transferFrom(beneficiary, msg.sender, (amount * price) / 1 ether)\nOPERATION: (amount * price) [/] 1 ether\nSSA: TMP_5 [/] 1000000000000000000 --> TMP_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0f9b1d1d39118480cf8b9575419ea4e5189c88dd",
        "target": "[RepairTarget] wellieat:distributeToken:198\nCODE: balanceOf[addresses[i]] += _value\nOPERATION: balanceOf[addresses[i]] [+=] _value\nSSA: REF_29 [+] _value_1 --> REF_29\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0f9b1d1d39118480cf8b9575419ea4e5189c88dd",
        "target": "[RepairTarget] wellieat:_transfer:93\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x108caf59641fc5d27502a87e641872b62d606ae2",
        "target": "[RepairTarget] EtherGreen:transfer:101\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x108caf59641fc5d27502a87e641872b62d606ae2",
        "target": "[RepairTarget] EtherGreen:transferFrom:116\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1133fcf62407ec316816ec69e0ee2b4910b9a27d",
        "target": "[RepairTarget] GOLD:transfer:17\nCODE: uint previousBalances = balanceOf[msg.sender] + balanceOf[_to]\nOPERATION: balanceOf[msg.sender] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1133fcf62407ec316816ec69e0ee2b4910b9a27d",
        "target": "[RepairTarget] GOLD:transfer:21\nCODE: assert(balanceOf[msg.sender] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[msg.sender] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x12759512d326303b45f1cec8f7b6fd96f387778e",
        "target": "[RepairTarget] StandardToken:transferFrom:107\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x13a9aa9dac776dfdf7a3da39aa9a250dde3081b2",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x13f25cd52b21650caa8225c9942337d914c9b030",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x14d9779b6585f3a7d4f768383b3cb030705dad2e",
        "target": "[RepairTarget] TokenBase:transfer:58\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x14d9779b6585f3a7d4f768383b3cb030705dad2e",
        "target": "[RepairTarget] TokenBase:transferFrom:75\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_15 [+] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x156f9176717422089b49c90d9aa20af2841d582c",
        "target": "[RepairTarget] WhiteList:addToWhiteListMultiple:95\nCODE: ++i\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x170836bdfbbe668480c311f45e416dd9bde303f4",
        "target": "[RepairTarget] TwoExRush:deposit:42\nCODE: contractATH += msg.value\nOPERATION: contractATH [+=] msg.value\nSSA: contractATH_2 [+] msg.value --> contractATH_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x170836bdfbbe668480c311f45e416dd9bde303f4",
        "target": "[RepairTarget] TwoExRush:deposit:43\nCODE: contractBalance += msg.value\nOPERATION: contractBalance [+=] msg.value\nSSA: contractBalance_4 [+] msg.value --> contractBalance_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x17c8d8b7659141273a1c2223030c89b96713a44a",
        "target": "[RepairTarget] XPS:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1844b21593262668b7248d0f57a220caaba46ab9",
        "target": "[RepairTarget] OysterPearl:claim:260\nCODE: balances[_fee] += feeAmount\nOPERATION: balances[_fee] [+=] feeAmount\nSSA: REF_20 [+] feeAmount_3 --> REF_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1844b21593262668b7248d0f57a220caaba46ab9",
        "target": "[RepairTarget] OysterPearl:_transfer:333\nCODE: assert(balances[_from] + balances[_to] == previousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_35 [+] REF_36 --> TMP_114\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x18486c451fdc6eac512d468967f75729d11b89ea",
        "target": "[RepairTarget] LiteCoinW:transfer:98\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_11 [+] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x18486c451fdc6eac512d468967f75729d11b89ea",
        "target": "[RepairTarget] LiteCoinW:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_19 [-] _amount_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x188ff41cc7960dd51b3aa802fcb17ba17c41276d",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x197a2df00e374b7c6760b85ff49d381fee3568b3",
        "target": "[RepairTarget] InsightsNetwork1:register:25\nCODE: _totalSupply += issueAmount\nOPERATION: _totalSupply [+=] issueAmount\nSSA: _totalSupply_1 [+] issueAmount_1 --> _totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x197a2df00e374b7c6760b85ff49d381fee3568b3",
        "target": "[RepairTarget] InsightsNetwork1:register:33\nCODE: uint unlockTime = currentTime + 365*24*60*60\nOPERATION: currentTime [+] 365*24*60*60\nSSA: currentTime_1 [+] TMP_13 --> TMP_14\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x197a2df00e374b7c6760b85ff49d381fee3568b3",
        "target": "[RepairTarget] InsightsNetwork1:register:33\nCODE: uint unlockTime = currentTime + 365*24*60*60\nOPERATION: 365 [*] 24\nSSA: 365 [*] 24 --> TMP_11\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x197a2df00e374b7c6760b85ff49d381fee3568b3",
        "target": "[RepairTarget] InsightsNetwork1:register:33\nCODE: uint unlockTime = currentTime + 365*24*60*60\nOPERATION: 365*24 [*] 60\nSSA: TMP_11 [*] 60 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x197a2df00e374b7c6760b85ff49d381fee3568b3",
        "target": "[RepairTarget] InsightsNetwork1:register:33\nCODE: uint unlockTime = currentTime + 365*24*60*60\nOPERATION: 365*24*60 [*] 60\nSSA: TMP_12 [*] 60 --> TMP_13\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x1b05e6557768650c0df0c9377c32c621ac1ccf17",
        "target": "[RepairTarget] NFTHouseGame:calculateCurrentPrice:390\nCODE: return currentPeriod * (listing.startPrice + listing.endPrice)\nOPERATION: currentPeriod [*] (listing.startPrice + listing.endPrice)\nSSA: currentPeriod_1 [*] TMP_127 --> TMP_128\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1b05e6557768650c0df0c9377c32c621ac1ccf17",
        "target": "[RepairTarget] NFTHouseGame:calculateCurrentPrice:390\nCODE: return currentPeriod * (listing.startPrice + listing.endPrice)\nOPERATION: listing.startPrice [+] listing.endPrice\nSSA: REF_82 [+] REF_83 --> TMP_127\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1b442a27fc37b5527ecd5c5ead301dac1638810d",
        "target": "[RepairTarget] Raffle:enter:51\nCODE: total += msg.value\nOPERATION: total [+=] msg.value\nSSA: total_1 [+] msg.value --> total_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1bce560a1e0c67dbd8d00e389a4e3ee3c46997be",
        "target": "[RepairTarget] OmiseGOClassic:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_13\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1c0a9bbaddb924b42e3145610960dde119779560",
        "target": "[RepairTarget] RDFDM:fiatToEth:189\nCODE: uint _charityCredit = (msg.value - _operatorCut) - _tokenCut\nOPERATION: msg.value [-] _operatorCut\nSSA: msg.value [-] _operatorCut_1 --> TMP_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1c0a9bbaddb924b42e3145610960dde119779560",
        "target": "[RepairTarget] RDFDM:fiatToEth:187\nCODE: uint _tokenCut = (msg.value * 4) / 100\nOPERATION: msg.value [*] 4\nSSA: msg.value [*] 4 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1c0a9bbaddb924b42e3145610960dde119779560",
        "target": "[RepairTarget] RDFDM:fiatCollected:176\nCODE: charities[_charity].fiatCollected += _fiat\nOPERATION: charities[_charity].fiatCollected [+=] _fiat\nSSA: REF_11 [+] _fiat_1 --> REF_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1c0a9bbaddb924b42e3145610960dde119779560",
        "target": "[RepairTarget] RDFDM:fiatToEth:189\nCODE: uint _charityCredit = (msg.value - _operatorCut) - _tokenCut\nOPERATION: (msg.value - _operatorCut) [-] _tokenCut\nSSA: TMP_24 [-] _tokenCut_1 --> TMP_25\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1c0a9bbaddb924b42e3145610960dde119779560",
        "target": "[RepairTarget] RDFDM:ethDonation:228\nCODE: charities[_charity].ethBalance += _charityCredit\nOPERATION: charities[_charity].ethBalance [+=] _charityCredit\nSSA: REF_46 [+] _charityCredit_1 --> REF_46\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1c0a9bbaddb924b42e3145610960dde119779560",
        "target": "[RepairTarget] RDFDM:fiatToEth:188\nCODE: uint _operatorCut = (msg.value * 16) / 100\nOPERATION: msg.value [*] 16\nSSA: msg.value [*] 16 --> TMP_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1c0a9bbaddb924b42e3145610960dde119779560",
        "target": "[RepairTarget] RDFDM:fiatToEth:187\nCODE: uint _tokenCut = (msg.value * 4) / 100\nOPERATION: (msg.value * 4) [/] 100\nSSA: TMP_20 [/] 100 --> TMP_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1c0a9bbaddb924b42e3145610960dde119779560",
        "target": "[RepairTarget] RDFDM:fiatToEth:188\nCODE: uint _operatorCut = (msg.value * 16) / 100\nOPERATION: (msg.value * 16) [/] 100\nSSA: TMP_22 [/] 100 --> TMP_23\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1c0a9bbaddb924b42e3145610960dde119779560",
        "target": "[RepairTarget] RDFDM:fiatDelivered:213\nCODE: charities[_charity].fiatBalanceOut -= _fiat\nOPERATION: charities[_charity].fiatBalanceOut [-=] _fiat\nSSA: REF_38 [-] _fiat_1 --> REF_38\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1e2e0b9703d1e6bd3dbbbccf39a8e081969c0448",
        "target": "[RepairTarget] TTC3:transfer:126\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_8 [+] _amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1ec10eab27b76968cd8b854914cc6eb9f886ce27",
        "target": "[RepairTarget] PETRO:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1ec10eab27b76968cd8b854914cc6eb9f886ce27",
        "target": "[RepairTarget] PETRO:transferFrom:79\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1ec8fe51a9b6a3a6c427d17d9ecc3060fbc4a45c",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1f2659bd1f38ea484b3ed7d03749fe157326ad16",
        "target": "[RepairTarget] DPOS:vote:51\nCODE: voteItems[_id].disagreeNum += 1\nOPERATION: voteItems[_id].disagreeNum [+=] 1\nSSA: REF_6 [+] 1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1ff826b46424033d54e5c9ef092ac575604f9295",
        "target": "[RepairTarget] PearlBonus:fallback:95\nCODE: uint256 partnerShare = (this.balance / 100) * share\nOPERATION: (this.balance / 100) [*] share\nSSA: TMP_19 [*] share_4 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1ff826b46424033d54e5c9ef092ac575604f9295",
        "target": "[RepairTarget] PearlBonus:fallback:95\nCODE: uint256 partnerShare = (this.balance / 100) * share\nOPERATION: this.balance [/] 100\nSSA: REF_5 [/] 100 --> TMP_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x22cea63950eaf7f8f78e4b9a81e0f30df9ba534c",
        "target": "[RepairTarget] OneStep:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x23ee8009de5c4001de883ff1d3057a71491d77ad",
        "target": "[RepairTarget] TokenERC20:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x24af7a0fbf8af8d198dbbecafa63bed86a4ee9db",
        "target": "[RepairTarget] TestToken:fallback:192\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_3 [+] amount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x24af7a0fbf8af8d198dbbecafa63bed86a4ee9db",
        "target": "[RepairTarget] TestToken:_transfer:221\nCODE: assert(balances[_from] + balances[_to] == previousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_35 [+] REF_36 --> TMP_108\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x267398927b5886df921b235afe9dbbe47fbcc37d",
        "target": "[RepairTarget] NobarToken:_transfer:34\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x267398927b5886df921b235afe9dbbe47fbcc37d",
        "target": "[RepairTarget] NobarToken:_transfer:38\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x26b1fbe292502da2c8fcdccf9426304d0900b703",
        "target": "[RepairTarget] FixedSupplyToken:transfer:83\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x26b1fbe292502da2c8fcdccf9426304d0900b703",
        "target": "[RepairTarget] FixedSupplyToken:transferFrom:108\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x295b52907435bfa10e6edaa7d11d976e6e97ca1e",
        "target": "[RepairTarget] LiteCoinW_Plus:transfer:98\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_11 [+] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x295b52907435bfa10e6edaa7d11d976e6e97ca1e",
        "target": "[RepairTarget] LiteCoinW_Plus:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_19 [-] _amount_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x29be8344f0e80be4ce9bcf6b1de233f57f2f1101",
        "target": "[RepairTarget] Veriseum:transfer:101\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x29be8344f0e80be4ce9bcf6b1de233f57f2f1101",
        "target": "[RepairTarget] Veriseum:transferFrom:116\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2bedbafb6b9be554a120ebaaaa90577c618b1e82",
        "target": "[RepairTarget] USDMTB:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2bedbafb6b9be554a120ebaaaa90577c618b1e82",
        "target": "[RepairTarget] USDMTB:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2c1180e2818069e5a9f911e636fb8f3db5106a9f",
        "target": "[RepairTarget] StandardToken:transferFrom:40\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2c80d54416625c3519d5de14528d92f25d03d433",
        "target": "[RepairTarget] TTC:transferFrom:169\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_16 [+] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2c90a3fcf2cfa89f53530e4a7bb6d565ac4e74a6",
        "target": "[RepairTarget] ERC20:_transfer:40\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2c90a3fcf2cfa89f53530e4a7bb6d565ac4e74a6",
        "target": "[RepairTarget] ERC20:_transfer:44\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2ca8e1fbcde534c8c71d8f39864395c2ed76fb0e",
        "target": "[RepairTarget] StandardToken:transferFrom:89\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2cf3a4af0c34c4f12f4bc391bd123d13eeefd7fc",
        "target": "[RepairTarget] TokenERC20:_transfer:107\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2e63cceffa42b095f0bd6d0fcadb521200b8fef5",
        "target": "[RepairTarget] EtherAuction:bid:71\nCODE: auctionEndTime += 3600\nOPERATION: auctionEndTime [+=] 3600\nSSA: auctionEndTime_2 [+] 3600 --> auctionEndTime_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2e63cceffa42b095f0bd6d0fcadb521200b8fef5",
        "target": "[RepairTarget] EtherAuction:bid:56\nCODE: require (_newBid  == highestBid + (5 * 10 ** 16))\nOPERATION: highestBid [+] (5 * 10 ** 16)\nSSA: highestBid_1 [+] TMP_21 --> TMP_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2e63cceffa42b095f0bd6d0fcadb521200b8fef5",
        "target": "[RepairTarget] EtherAuction:bid:56\nCODE: require (_newBid  == highestBid + (5 * 10 ** 16))\nOPERATION: 5 [*] 10 ** 16\nSSA: 5 [*] TMP_20 --> TMP_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2e63cceffa42b095f0bd6d0fcadb521200b8fef5",
        "target": "[RepairTarget] EtherAuction:startAuction:39\nCODE: auctionEndTime = now + (3600 * 24 * 7)\nOPERATION: 3600 [*] 24\nSSA: 3600 [*] 24 --> TMP_8\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x2e63cceffa42b095f0bd6d0fcadb521200b8fef5",
        "target": "[RepairTarget] EtherAuction:startAuction:39\nCODE: auctionEndTime = now + (3600 * 24 * 7)\nOPERATION: 3600 * 24 [*] 7\nSSA: TMP_8 [*] 7 --> TMP_9\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x2e63cceffa42b095f0bd6d0fcadb521200b8fef5",
        "target": "[RepairTarget] EtherAuction:startAuction:39\nCODE: auctionEndTime = now + (3600 * 24 * 7)\nOPERATION: now [+] (3600 * 24 * 7)\nSSA: now [+] TMP_9 --> TMP_10\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x2ee91aa44b381a266f12108eaf00b5043d42c5e1",
        "target": "[RepairTarget] MoneyRain:transfer:43\nCODE: balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]\nOPERATION: balances[_to] [+] _amount\nSSA: REF_3 [+] _amount_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x2ee91aa44b381a266f12108eaf00b5043d42c5e1",
        "target": "[RepairTarget] MoneyRain:transferFrom:53\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x31041f1b393c46e324d9a23406e39a13705eb204",
        "target": "[RepairTarget] TGCTokenBase:_transfer:85\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x330e24d4aa0a60acac8f9fe6d674d3cf1e8042c6",
        "target": "[RepairTarget] LocalEthereumEscrows:resolveDispute:268\nCODE: _seller.transfer((_value - _totalFees) * (100 - _buyerPercent) / 100)\nOPERATION: (_value - _totalFees) [*] (100 - _buyerPercent)\nSSA: TMP_78 [*] TMP_79 --> TMP_80\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x330e24d4aa0a60acac8f9fe6d674d3cf1e8042c6",
        "target": "[RepairTarget] LocalEthereumEscrows:resolveDispute:268\nCODE: _seller.transfer((_value - _totalFees) * (100 - _buyerPercent) / 100)\nOPERATION: _value [-] _totalFees\nSSA: _value_1 [-] _totalFees_1 --> TMP_78\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x330e24d4aa0a60acac8f9fe6d674d3cf1e8042c6",
        "target": "[RepairTarget] LocalEthereumEscrows:resolveDispute:268\nCODE: _seller.transfer((_value - _totalFees) * (100 - _buyerPercent) / 100)\nOPERATION: 100 [-] _buyerPercent\nSSA: 100 [-] _buyerPercent_1 --> TMP_79\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x330e24d4aa0a60acac8f9fe6d674d3cf1e8042c6",
        "target": "[RepairTarget] LocalEthereumEscrows:resolveDispute:268\nCODE: _seller.transfer((_value - _totalFees) * (100 - _buyerPercent) / 100)\nOPERATION: (_value - _totalFees) * (100 - _buyerPercent) [/] 100\nSSA: TMP_80 [/] 100 --> TMP_81\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x342fa1885c24fa7c455271ac17755c87766c8b93",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3460f675d521b4c673d437e6525164e2c189dd49",
        "target": "[RepairTarget] ERC20Token:transfer:21\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3460f675d521b4c673d437e6525164e2c189dd49",
        "target": "[RepairTarget] ERC20Token:transferFrom:29\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x34737a1ed7508ca6bda6747825c901831f3cd8c0",
        "target": "[RepairTarget] Weko:fallback:151\nCODE: balances[msg.sender] += amount\nOPERATION: balances[msg.sender] [+=] amount\nSSA: REF_24 [+] amount_1 --> REF_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x34737a1ed7508ca6bda6747825c901831f3cd8c0",
        "target": "[RepairTarget] Weko:_transfer:168\nCODE: assert(balances[_from] + balances[_to] == previousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_35 [+] REF_36 --> TMP_108\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x34be9a55eb8e10e0010fcf3dba9f37b9bb70ca33",
        "target": "[RepairTarget] etherKing:getHistory:210\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x35ae65a0544aa47e4429e0eac5e823ebc7b8d136",
        "target": "[RepairTarget] LCD_newTest:transferFrom:81\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x36a30a5bbfa28d3fc909eb3de5ae6b71ff3aa738",
        "target": "[RepairTarget] Multimember:revoke:73\nCODE: pending.membersDone -= memberIndexBit\nOPERATION: pending.membersDone [-=] memberIndexBit\nSSA: REF_12 [-] memberIndexBit_1 --> REF_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x373ad45763e2d30a67af55e15855256df7049c1a",
        "target": "[RepairTarget] WCCCOIN:lockupAccounts:213\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3883f5e181fccaf8410fa61e12b59bad963fb645",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d",
        "target": "[RepairTarget] RDFDM:fiatToEth:189\nCODE: uint _charityCredit = (msg.value - _operatorCut) - _tokenCut\nOPERATION: msg.value [-] _operatorCut\nSSA: msg.value [-] _operatorCut_1 --> TMP_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d",
        "target": "[RepairTarget] RDFDM:fiatToEth:189\nCODE: uint _charityCredit = (msg.value - _operatorCut) - _tokenCut\nOPERATION: (msg.value - _operatorCut) [-] _tokenCut\nSSA: TMP_24 [-] _tokenCut_1 --> TMP_25\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d",
        "target": "[RepairTarget] RDFDM:fiatToEth:188\nCODE: uint _operatorCut = (msg.value * 16) / 100\nOPERATION: msg.value [*] 16\nSSA: msg.value [*] 16 --> TMP_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d",
        "target": "[RepairTarget] RDFDM:ethDonation:228\nCODE: charities[charityCount].ethBalance += _charityCredit\nOPERATION: charities[charityCount].ethBalance [+=] _charityCredit\nSSA: REF_46 [+] _charityCredit_1 --> REF_46\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d",
        "target": "[RepairTarget] RDFDM:ethToFiat:204\nCODE: charities[charityCount].fiatBalanceOut += _fiat\nOPERATION: charities[charityCount].fiatBalanceOut [+=] _fiat\nSSA: REF_33 [+] _fiat_1 --> REF_33\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d",
        "target": "[RepairTarget] RDFDM:fiatToEth:187\nCODE: uint _tokenCut = (msg.value * 4) / 100\nOPERATION: msg.value [*] 4\nSSA: msg.value [*] 4 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d",
        "target": "[RepairTarget] RDFDM:fiatCollected:175\nCODE: charities[charityCount].fiatBalanceIn += _fiat\nOPERATION: charities[charityCount].fiatBalanceIn [+=] _fiat\nSSA: REF_9 [+] _fiat_1 --> REF_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d",
        "target": "[RepairTarget] RDFDM:fiatToEth:187\nCODE: uint _tokenCut = (msg.value * 4) / 100\nOPERATION: (msg.value * 4) [/] 100\nSSA: TMP_20 [/] 100 --> TMP_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d",
        "target": "[RepairTarget] RDFDM:fiatToEth:188\nCODE: uint _operatorCut = (msg.value * 16) / 100\nOPERATION: (msg.value * 16) [/] 100\nSSA: TMP_22 [/] 100 --> TMP_23\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x38e2cfa5627b2fef3d0556638b13ea6bf6a5e34d",
        "target": "[RepairTarget] RDFDM:fiatDelivered:213\nCODE: charities[_charity].fiatBalanceOut -= _fiat\nOPERATION: charities[_charity].fiatBalanceOut [-=] _fiat\nSSA: REF_38 [-] _fiat_1 --> REF_38\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3ac6cb00f5a44712022a51fbace4c7497f56ee31",
        "target": "[RepairTarget] StandardToken:transferFrom:148\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_21 [-] _value_1 --> REF_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3b5e99da4df32b933e9887ef58b740a06ad38961",
        "target": "[RepairTarget] Learn:transfer:98\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_11 [+] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3b5e99da4df32b933e9887ef58b740a06ad38961",
        "target": "[RepairTarget] Learn:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_19 [-] _amount_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3eb91d237e491e0dee8582c402d85cb440fb6b54",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3eec78485181da25a0b7c47db9a51849481df859",
        "target": "[RepairTarget] Scrinium:transferFrom:138\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_21 [-] _value_1 --> REF_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3f4b726668da46f5e0e75aa5d478acec9f38210f",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x41b54744d077a60104a9f3dfdd681ad2694eb5e4",
        "target": "[RepairTarget] TokenAdrTokenSale:getCurrentStatus:263\nCODE: now > startTime + duration\nOPERATION: startTime [+] duration\nSSA: startTime_3 [+] duration_3 --> TMP_125\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x42791bc733a15e2ef061adb66749880758ae91d2",
        "target": "[RepairTarget] StandardToken:transferFrom:43\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x42f67fe3c40b90c00adee3377f92afc3cb9fa8ac",
        "target": "[RepairTarget] TokenBase:_transfer:47\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x42f67fe3c40b90c00adee3377f92afc3cb9fa8ac",
        "target": "[RepairTarget] TokenBase:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_13\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x43f6a1be992dee408721748490772b15143ce0a7",
        "target": "[RepairTarget] Potatoin:unsowed:73\nCODE: balance = (cellars[farmer] * (decay - elapsed) + decay-1) / decay\nOPERATION: cellars[farmer] * (decay - elapsed) + decay [-] 1\nSSA: TMP_10 [-] 1 --> TMP_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x43f6a1be992dee408721748490772b15143ce0a7",
        "target": "[RepairTarget] Potatoin:unsowed:73\nCODE: balance = (cellars[farmer] * (decay - elapsed) + decay-1) / decay\nOPERATION: cellars[farmer] * (decay - elapsed) [+] decay\nSSA: TMP_9 [+] decay_2 --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x43f6a1be992dee408721748490772b15143ce0a7",
        "target": "[RepairTarget] Potatoin:recycle:217\nCODE: rotten = cellars[farmer] * elapsed / decay\nOPERATION: cellars[farmer] [*] elapsed\nSSA: REF_72 [*] elapsed_1 --> TMP_97\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x43f6a1be992dee408721748490772b15143ce0a7",
        "target": "[RepairTarget] Potatoin:unsowed:73\nCODE: balance = (cellars[farmer] * (decay - elapsed) + decay-1) / decay\nOPERATION: cellars[farmer] [*] (decay - elapsed)\nSSA: REF_3 [*] TMP_8 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x43f6a1be992dee408721748490772b15143ce0a7",
        "target": "[RepairTarget] Potatoin:unsowed:73\nCODE: balance = (cellars[farmer] * (decay - elapsed) + decay-1) / decay\nOPERATION: decay [-] elapsed\nSSA: decay_2 [-] elapsed_1 --> TMP_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x43f6a1be992dee408721748490772b15143ce0a7",
        "target": "[RepairTarget] Potatoin:unsowed:73\nCODE: balance = (cellars[farmer] * (decay - elapsed) + decay-1) / decay\nOPERATION: (cellars[farmer] * (decay - elapsed) + decay-1) [/] decay\nSSA: TMP_11 [/] decay_2 --> TMP_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x43f6a1be992dee408721748490772b15143ce0a7",
        "target": "[RepairTarget] Potatoin:recycle:217\nCODE: rotten = cellars[farmer] * elapsed / decay\nOPERATION: cellars[farmer] * elapsed [/] decay\nSSA: TMP_97 [/] decay_6 --> TMP_98\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x45125b61f06b2e9b8fc8a2ea688c35e27086d2ae",
        "target": "[RepairTarget] OysterPearl:claim:252\nCODE: balances[_fee] += feeAmount\nOPERATION: balances[_fee] [+=] feeAmount\nSSA: REF_20 [+] feeAmount_3 --> REF_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x46dda57b152aeada30a0dec5a31e5ba600a0bd51",
        "target": "[RepairTarget] OysterPearl:claim:255\nCODE: balances[_fee] += feeAmount\nOPERATION: balances[_fee] [+=] feeAmount\nSSA: REF_20 [+] feeAmount_3 --> REF_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x46dda57b152aeada30a0dec5a31e5ba600a0bd51",
        "target": "[RepairTarget] OysterPearl:_transfer:328\nCODE: assert(balances[_from] + balances[_to] == previousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_35 [+] REF_36 --> TMP_114\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x47cdd2922ead6958fc0090a60be135ce1289813e",
        "target": "[RepairTarget] YoutubersCoin:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x47cdd2922ead6958fc0090a60be135ce1289813e",
        "target": "[RepairTarget] YoutubersCoin:transferFrom:79\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4830c97fcb6a40e09fa67ba20806c80a6dbc55a8",
        "target": "[RepairTarget] SHISHU:_transfer:34\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4830c97fcb6a40e09fa67ba20806c80a6dbc55a8",
        "target": "[RepairTarget] SHISHU:_transfer:38\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4add749fcd5a44ecad43dc6f3dafdd306bd931f8",
        "target": "[RepairTarget] EtherConnect:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4ade568854ed1fceeca5286ee68d17f48e7554e7",
        "target": "[RepairTarget] Crowdsale:fallback:35\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4b24f0c8230c06e0d7caf722ace3f22ba5b80c33",
        "target": "[RepairTarget] StandardToken:transferFrom:92\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4d2c05109a1309c6de0d3b7f06f397c9c41b8fae",
        "target": "[RepairTarget] TokenERC20:_transfer:52\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4eb3ce14fda3a874ecad0e9ad988258c827bae82",
        "target": "[RepairTarget] DepositBank:FixProfit:149\nCODE: Lenders[msg.sender].Reserved += CheckProfit(msg.sender)\nOPERATION: Lenders[msg.sender].Reserved [+=] CheckProfit(msg.sender)\nSSA: REF_19 [+] TMP_41 --> REF_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4f0d20468571d7b6a1045656dc110fbc73143fb3",
        "target": "[RepairTarget] ERC20Token:transfer:21\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4f0d20468571d7b6a1045656dc110fbc73143fb3",
        "target": "[RepairTarget] ERC20Token:transferFrom:29\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4f780f0693a5dec6bb4481dae7061004d3a0ae28",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4f8e1b037874010259b3b85cb07add59337af747",
        "target": "[RepairTarget] NOBAR:_transfer:34\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4f8e1b037874010259b3b85cb07add59337af747",
        "target": "[RepairTarget] NOBAR:_transfer:38\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5046e860ff274fb8c66106b0ffb8155849fb0787",
        "target": "[RepairTarget] JavaScriptToken:transfer:99\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5046e860ff274fb8c66106b0ffb8155849fb0787",
        "target": "[RepairTarget] JavaScriptToken:transferFrom:114\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x50f3801515a3a378aaa1e5db30d71ad17bd66a1f",
        "target": "[RepairTarget] ElPetro:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x50f3801515a3a378aaa1e5db30d71ad17bd66a1f",
        "target": "[RepairTarget] ElPetro:transferFrom:79\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x51109152d0335fa841443fd78ba678b0cf276ed7",
        "target": "[RepairTarget] Crowdsale:fallback:53\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x51109152d0335fa841443fd78ba678b0cf276ed7",
        "target": "[RepairTarget] Crowdsale:fallback:52\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x53848e6049e19bf83acba186aeb42117011becb6",
        "target": "[RepairTarget] AffiliateNetwork:addAffiliate:19\nCODE: idx += 1\nOPERATION: idx [+=] 1\nSSA: idx_1 [+] 1 --> idx_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x55648de19836338549130b1af587f16bea46f66b",
        "target": "[RepairTarget] Pebbles:withdrawDeferred:139\nCODE: uint256 teamTokensAvailable = balanceTeam / 5 * yearsSinceLaunch\nOPERATION: balanceTeam / 5 [*] yearsSinceLaunch\nSSA: TMP_24 [*] yearsSinceLaunch_1 --> TMP_25\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x55648de19836338549130b1af587f16bea46f66b",
        "target": "[RepairTarget] Pebbles:withdrawDeferred:139\nCODE: uint256 teamTokensAvailable = balanceTeam / 5 * yearsSinceLaunch\nOPERATION: balanceTeam [/] 5\nSSA: balanceTeam_3 [/] 5 --> TMP_24\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x55de1300690deac6ef1851d6dd9f6d25415cd9bd",
        "target": "[RepairTarget] Peculium:_transfer:52\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x57fa167e4b7438a618468cca3c132fb62e280f6e",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x58054e51c19fa796443043418be91032b99992a3",
        "target": "[RepairTarget] iGniter:totalSupply:201\nCODE: return iGniting + initialSupply - burnt\nOPERATION: iGniting [+] initialSupply\nSSA: iGniting_1 [+] initialSupply_2 --> TMP_51\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x58054e51c19fa796443043418be91032b99992a3",
        "target": "[RepairTarget] iGniter:totalSupply:201\nCODE: return iGniting + initialSupply - burnt\nOPERATION: iGniting + initialSupply [-] burnt\nSSA: TMP_51 [-] burnt_1 --> TMP_52\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x58054e51c19fa796443043418be91032b99992a3",
        "target": "[RepairTarget] iGniter:balanceOf:169\nCODE: availableAmount = rewardPerBlockPerAddress * minedBlocks\nOPERATION: rewardPerBlockPerAddress [*] minedBlocks\nSSA: rewardPerBlockPerAddress_2 [*] minedBlocks_1 --> TMP_46\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x592ada458d0a03f7a9e01da2cc58ed475bb29020",
        "target": "[RepairTarget] Presale:fallback:53\nCODE: tokenReward.transfer(msg.sender, amount * tokensPerEther)\nOPERATION: amount [*] tokensPerEther\nSSA: amount_1 [*] tokensPerEther_2 --> TMP_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x592ada458d0a03f7a9e01da2cc58ed475bb29020",
        "target": "[RepairTarget] Presale:fallback:52\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5953628b88e67935c70be95d8d3bd8655cedc996",
        "target": "[RepairTarget] Token:burn:69\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5955b1b8f7e2934f1ce98710566a19357a055ca8",
        "target": "[RepairTarget] BCSN:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x59c2b0d4f09da1efa1dfbc99595076cd879a173c",
        "target": "[RepairTarget] TokenERC20:transferFrom:141\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_13 [-] _value_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5ab5dded8c5c384015c8f3a27d59bf71b952a3a4",
        "target": "[RepairTarget] PearlBonus:fallback:108\nCODE: uint256 partnerShare = (this.balance / 100) * share\nOPERATION: (this.balance / 100) [*] share\nSSA: TMP_20 [*] share_4 --> TMP_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5ab5dded8c5c384015c8f3a27d59bf71b952a3a4",
        "target": "[RepairTarget] PearlBonus:fallback:108\nCODE: uint256 partnerShare = (this.balance / 100) * share\nOPERATION: this.balance [/] 100\nSSA: REF_5 [/] 100 --> TMP_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5c227eb319c24249df66d0c5879515aa59787471",
        "target": "[RepairTarget] BitAlpha:BitAlphaAirdrop:42\nCODE: balances[addresses[i]] += 1500 * 10**8\nOPERATION: 1500 [*] 10**8\nSSA: 1500 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5c227eb319c24249df66d0c5879515aa59787471",
        "target": "[RepairTarget] BitAlpha:BitAlphaAirdrop:43\nCODE: Transfer(owner, addresses[i], 1500 * 10**8)\nOPERATION: 1500 [*] 10**8\nSSA: 1500 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5c227eb319c24249df66d0c5879515aa59787471",
        "target": "[RepairTarget] BitAlpha:BitAlphaAirdrop:42\nCODE: balances[addresses[i]] += 1500 * 10**8\nOPERATION: balances[addresses[i]] [+=] 1500 * 10**8\nSSA: 1500 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5c227eb319c24249df66d0c5879515aa59787471",
        "target": "[RepairTarget] BitAlpha:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5c227eb319c24249df66d0c5879515aa59787471",
        "target": "[RepairTarget] BitAlpha:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5dd67e19d9a8db52c0e90f2439d8c8c2a4854559",
        "target": "[RepairTarget] TokenBase:_transfer:47\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5dd67e19d9a8db52c0e90f2439d8c8c2a4854559",
        "target": "[RepairTarget] TokenBase:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_13\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5e7da22c6466db3aa05e7ee999071d1e5e4a0259",
        "target": "[RepairTarget] YumeGorilla:freezeAccounts:433\nCODE: targets[j] != 0x0);\r\n\r\n   \nOPERATION: [++]  \nSSA: REF_12 [!=] 0 --> TMP_38\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5f6e7fb7fe92ea7822472bb0e8f1be60d6a4ea50",
        "target": "[RepairTarget] Artemine:PublicMine:243\nCODE: balances[msg.sender] += publicMiningReward\nOPERATION: balances[msg.sender] [+=] publicMiningReward\nSSA: REF_70 [+] publicMiningReward_3 --> REF_70\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5f6e7fb7fe92ea7822472bb0e8f1be60d6a4ea50",
        "target": "[RepairTarget] Artemine:setGenesisAddress:75\nCODE: genesisRewardPerBlock[_address] += (amount / maxBlocks)\nOPERATION: genesisRewardPerBlock[_address] [+=] (amount / maxBlocks)\nSSA: REF_3 [+] TMP_3 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5f6e7fb7fe92ea7822472bb0e8f1be60d6a4ea50",
        "target": "[RepairTarget] Artemine:PublicMine:244\nCODE: publicMiningSupply += publicMiningReward\nOPERATION: publicMiningSupply [+=] publicMiningReward\nSSA: publicMiningSupply_4 [+] publicMiningReward_3 --> publicMiningSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5f6e7fb7fe92ea7822472bb0e8f1be60d6a4ea50",
        "target": "[RepairTarget] Artemine:setGenesisAddress:74\nCODE: genesisInitialSupply[_address] += amount\nOPERATION: genesisInitialSupply[_address] [+=] amount\nSSA: REF_2 [+] amount_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5f6e7fb7fe92ea7822472bb0e8f1be60d6a4ea50",
        "target": "[RepairTarget] Artemine:setGenesisAddress:75\nCODE: genesisRewardPerBlock[_address] += (amount / maxBlocks)\nOPERATION: amount [/] maxBlocks\nSSA: amount_1 [/] maxBlocks_1 --> TMP_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5f6e7fb7fe92ea7822472bb0e8f1be60d6a4ea50",
        "target": "[RepairTarget] Artemine:transferFrom:145\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_25 [+] _amount_1 --> REF_25\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5f9605823c32a09bfaeb7e744784705f4b7e2f59",
        "target": "[RepairTarget] ConvertLib:b32toHexString:627\nCODE: uint8 low = by - 16*high\nOPERATION: by [-] 16*high\nSSA: by_1 [-] TMP_34 --> TMP_35\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5f9605823c32a09bfaeb7e744784705f4b7e2f59",
        "target": "[RepairTarget] ConvertLib:b32toHexString:627\nCODE: uint8 low = by - 16*high\nOPERATION: 16 [*] high\nSSA: 16 [*] high_1 --> TMP_34\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5f960a7fe869f5e7a7ab5e4688911b5ec7202812",
        "target": "[RepairTarget] TokenERC20:_transfer:77\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x603515243b98d6624adf243e1f4607144d21e281",
        "target": "[RepairTarget] ZToken:transferFrom:54\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6158e3f89b4398f5fb20d20dbfc5a5c955f0f6dd",
        "target": "[RepairTarget] TBCoin:getRateAt:238\nCODE: at < (startDate + 21 days)\nOPERATION: startDate [+] 21 days\nSSA: startDate_2 [+] 1814400 --> TMP_94\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6158e3f89b4398f5fb20d20dbfc5a5c955f0f6dd",
        "target": "[RepairTarget] TBCoin:getRateAt:240\nCODE: at < (startDate + 27 days)\nOPERATION: startDate [+] 27 days\nSSA: startDate_2 [+] 2332800 --> TMP_96\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x63011ea1d431f54297d90543689d69177b1846ef",
        "target": "[RepairTarget] SafeMath:mul:5\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x63c94b6221b4021b564f4563ec72688655b2604a",
        "target": "[RepairTarget] astorgame:_transfer:30\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x63c94b6221b4021b564f4563ec72688655b2604a",
        "target": "[RepairTarget] astorgame:_transfer:34\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x65ba2b92faee7e5786c5edd6142b4a74e55330b2",
        "target": "[RepairTarget] ScorpuToken:distributeToken:42\nCODE: balances[addresses[i]] += _value * 10**8\nOPERATION: _value [*] 10**8\nSSA: _value_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x65ba2b92faee7e5786c5edd6142b4a74e55330b2",
        "target": "[RepairTarget] ScorpuToken:distributeToken:43\nCODE: Transfer(owner, addresses[i], _value * 10**8)\nOPERATION: _value [*] 10**8\nSSA: _value_1 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x65ba2b92faee7e5786c5edd6142b4a74e55330b2",
        "target": "[RepairTarget] ScorpuToken:distributeToken:42\nCODE: balances[addresses[i]] += _value * 10**8\nOPERATION: balances[addresses[i]] [+=] _value * 10**8\nSSA: _value_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x65ba2b92faee7e5786c5edd6142b4a74e55330b2",
        "target": "[RepairTarget] ScorpuToken:transfer:63\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x65ba2b92faee7e5786c5edd6142b4a74e55330b2",
        "target": "[RepairTarget] ScorpuToken:transferFrom:82\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x666b35005cba52675efe34642e01e2fba8332fac",
        "target": "[RepairTarget] ERC20:_transfer:40\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x666b35005cba52675efe34642e01e2fba8332fac",
        "target": "[RepairTarget] ERC20:_transfer:44\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x66b1e7e51a441f41a0584820a629ba36fd2e2dda",
        "target": "[RepairTarget] TheRichestWins:getBlocksToNextRound:133\nCODE: return lastBuyBlock + newRoundDelay + 1 - block.number\nOPERATION: lastBuyBlock [+] newRoundDelay\nSSA: lastBuyBlock_3 [+] newRoundDelay_2 --> TMP_46\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x66b1e7e51a441f41a0584820a629ba36fd2e2dda",
        "target": "[RepairTarget] TheRichestWins:getBlocksToNextRound:133\nCODE: return lastBuyBlock + newRoundDelay + 1 - block.number\nOPERATION: lastBuyBlock + newRoundDelay + 1 [-] block.number\nSSA: TMP_47 [-] block.number --> TMP_48\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x66b1e7e51a441f41a0584820a629ba36fd2e2dda",
        "target": "[RepairTarget] TheRichestWins:getBlocksToNextRound:133\nCODE: return lastBuyBlock + newRoundDelay + 1 - block.number\nOPERATION: lastBuyBlock + newRoundDelay [+] 1\nSSA: TMP_46 [+] 1 --> TMP_47\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x66b1e7e51a441f41a0584820a629ba36fd2e2dda",
        "target": "[RepairTarget] SafeMath:mul:12\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x679badc551626e01b23ceecefbc9b877ea18fc46",
        "target": "[RepairTarget] CcoreTokenContract:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6827a2fac3b4be1ba1f22d5802bb13c1ed7af405",
        "target": "[RepairTarget] EEURO:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6827a2fac3b4be1ba1f22d5802bb13c1ed7af405",
        "target": "[RepairTarget] EEURO:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x694404595e3075a942397f466aacd462ff1a7bd0",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x69786859bc92e0ca82fcfe1bffc502b7bea6a069",
        "target": "[RepairTarget] TokenERC20:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x69b148395ce0015c13e36bffbad63f49ef874e03",
        "target": "[RepairTarget] TokenERC20:_transfer:77\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x69cd4e1e2e1cec76eb7f3b1acdddaddcc6d60fc1",
        "target": "[RepairTarget] StandardToken:transferFrom:92\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6a41250a0f864cb9f53d043cb961091514a7b06b",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6aac8cb9861e42bf8259f5abdc6ae3ae89909e11",
        "target": "[RepairTarget] BitcoinRed:distributeBTR:43\nCODE: Transfer(owner, addresses[i], 2000 * 10**8)\nOPERATION: 2000 [*] 10**8\nSSA: 2000 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6aac8cb9861e42bf8259f5abdc6ae3ae89909e11",
        "target": "[RepairTarget] BitcoinRed:distributeBTR:42\nCODE: balances[addresses[i]] += 2000 * 10**8\nOPERATION: balances[addresses[i]] [+=] 2000 * 10**8\nSSA: 2000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6aac8cb9861e42bf8259f5abdc6ae3ae89909e11",
        "target": "[RepairTarget] BitcoinRed:distributeBTR:42\nCODE: balances[addresses[i]] += 2000 * 10**8\nOPERATION: 2000 [*] 10**8\nSSA: 2000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6aac8cb9861e42bf8259f5abdc6ae3ae89909e11",
        "target": "[RepairTarget] BitcoinRed:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6aac8cb9861e42bf8259f5abdc6ae3ae89909e11",
        "target": "[RepairTarget] BitcoinRed:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6b14c373c24556165002a00cba4174fd96fe28f0",
        "target": "[RepairTarget] SSENTE:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6b14c373c24556165002a00cba4174fd96fe28f0",
        "target": "[RepairTarget] SSENTE:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6b3b198577e9a1e96ef681ee60e551845dd4ea79",
        "target": "[RepairTarget] Detonator:transfer:101\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6b3b198577e9a1e96ef681ee60e551845dd4ea79",
        "target": "[RepairTarget] Detonator:transferFrom:116\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6f152d5fc00d648604af67ce07d9baefec4958d4",
        "target": "[RepairTarget] MyToken:_transfer:103\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_11 [+] REF_12 --> TMP_19\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x70b792d45151bd5f7489af3394a49ed90f2b09d6",
        "target": "[RepairTarget] TokenERC20:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x724169e6cce74ae59401446b832c16892bbcf497",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x74951b677de32d596ee851a233336926e6a2cd09",
        "target": "[RepairTarget] WeBetCrypto:platformLogin:523\nCODE: cooldown[msg.sender] -= 1\nOPERATION: cooldown[msg.sender] [-=] 1\nSSA: REF_107 [-] 1 --> REF_107\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7568b9ece8966ae20e7f5edf90bcd6b77c2a47ca",
        "target": "[RepairTarget] EnergyEcoToken:_transfer:22\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_5\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7568b9ece8966ae20e7f5edf90bcd6b77c2a47ca",
        "target": "[RepairTarget] EnergyEcoToken:_transfer:26\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x77e89cb283f39ed72f4383c6eec786bd7e7c12d5",
        "target": "[RepairTarget] eBitcoinCash:transfer:86\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_23 [-] _amount_1 --> REF_23\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x77e89cb283f39ed72f4383c6eec786bd7e7c12d5",
        "target": "[RepairTarget] eBitcoinCash:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_32 [-] _amount_1 --> REF_32\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7bd52bdff0acf4e18dd80c6ee86db205d83f88ce",
        "target": "[RepairTarget] HodlerInvestmentClub:deposit:40\nCODE: m_hodlers++\nOPERATION: [++] m_hodlers\nSSA: m_hodlers_1 [+] 1 --> m_hodlers_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7bd52bdff0acf4e18dd80c6ee86db205d83f88ce",
        "target": "[RepairTarget] HodlerInvestmentClub:deposit:42\nCODE: hodlers[_to].value += msg.value\nOPERATION: hodlers[_to].value [+=] msg.value\nSSA: REF_9 [+] msg.value --> REF_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7bf89e99da54db3f9b4090ad483fe992b5152303",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7cdec53fe4770729dac314756c10e2f37b8d2b2f",
        "target": "[RepairTarget] BOLD:transferFrom:65\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7d6c1fcd1ee018cb12bcaeaa2f160dbf041fe37b",
        "target": "[RepairTarget] EIDTokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7e9d62e1ff4e34096f91ee0153222ab81f7184f0",
        "target": "[RepairTarget] ELTC:transfer:86\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_23 [-] _amount_1 --> REF_23\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7e9d62e1ff4e34096f91ee0153222ab81f7184f0",
        "target": "[RepairTarget] ELTC:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_32 [-] _amount_1 --> REF_32\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7f0f620dbad4517de25f037bb3e81d144cbf5079",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7f5a7a6a25e06ddc94901cf596f9234f7d190bed",
        "target": "[RepairTarget] SafeMath:mul:14\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7facf5286883d4068b5adb4c7c4d3ef714fad5a9",
        "target": "[RepairTarget] BnsPresale:sendRefund:138\nCODE: total_refunded += amount_to_refund\nOPERATION: total_refunded [+=] amount_to_refund\nSSA: total_refunded_3 [+] amount_to_refund_1 --> total_refunded_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x80ba3b3780187eca1ca7b4f8636549ac1f0c1faa",
        "target": "[RepairTarget] SellKiCoin:BuyToken:73\nCODE: change  = msg.value - maxethers\nOPERATION: msg.value [-] maxethers\nSSA: msg.value [-] maxethers_1 --> TMP_23\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x80c13052ea39bc9f78d6723bfcef273f5a7ff651",
        "target": "[RepairTarget] test:add:10\nCODE: totalSupply += _add\nOPERATION: totalSupply [+=] _add\nSSA: totalSupply_2 [+] _add_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x80c13052ea39bc9f78d6723bfcef273f5a7ff651",
        "target": "[RepairTarget] test:add:12\nCODE: totalSupply++\nOPERATION: [++] totalSupply\nSSA: totalSupply_2 [+] 1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8207bcaacd247a03fbd68e1a941092fa678cf492",
        "target": "[RepairTarget] StandardToken:transferFrom:64\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x823c431dec478103a3fd637d2b60f948b810ca86",
        "target": "[RepairTarget] StrongHandsIcoToken:transferFrom:76\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x823c431dec478103a3fd637d2b60f948b810ca86",
        "target": "[RepairTarget] StrongHandsIcoToken:fallback:159\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_26 [+] tokensIssued_3 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x82a79ed5ab6f96047995579fab331a415727fccb",
        "target": "[RepairTarget] SubPrimeCrypto:calculateCurrentPrice:399\nCODE: uint secondSinceStart = now - listing.startedAt\nOPERATION: now [-] listing.startedAt\nSSA: now [-] REF_89 --> TMP_140\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x84c8129f145ae59cba7a0221702fcbc4c2a1472f",
        "target": "[RepairTarget] TwoDimensions:lockupAccounts:216\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8542325b72c6d9fc0ad2ca965a78435413a915a0",
        "target": "[RepairTarget] OysterShell:claim:235\nCODE: balances[_payout] += payAmount\nOPERATION: balances[_payout] [+=] payAmount\nSSA: REF_21 [+] payAmount_1 --> REF_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x85df7eac31157bbdef55f05b0e8f25d3a74f7f88",
        "target": "[RepairTarget] ERC20:_transfer:44\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x85df7eac31157bbdef55f05b0e8f25d3a74f7f88",
        "target": "[RepairTarget] ERC20:_transfer:48\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8713d26637cf49e1b6b4a7ce57106aabc9325343",
        "target": "[RepairTarget] CNNTokenBase:_transfer:85\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8862d55fa8e1d766b386f08d869d7fbcf5b96a06",
        "target": "[RepairTarget] MultiSigWallet:removeOwner:111\nCODE: owners[i] = owners[owners.length - 1]\nOPERATION: owners.length [-] 1\nSSA: REF_8 [-] 1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x88ca8f76aab5f99987bece8b9147f2d4be98403a",
        "target": "[RepairTarget] StandardToken:transferFrom:55\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8b7027881bd7f5538aa4c07a5ecb2b41149ead24",
        "target": "[RepairTarget] WWNCoin:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8bf1e43e3ca6f5c25c380803154ae687d682ad32",
        "target": "[RepairTarget] RDFDM:fiatCollected:176\nCODE: charities[_charity].fiatCollected += _fiat\nOPERATION: charities[_charity].fiatCollected [+=] _fiat\nSSA: REF_11 [+] _fiat_1 --> REF_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8bf1e43e3ca6f5c25c380803154ae687d682ad32",
        "target": "[RepairTarget] RDFDM:ethDonation:228\nCODE: charities[_charity].ethBalance += _charityCredit\nOPERATION: charities[_charity].ethBalance [+=] _charityCredit\nSSA: REF_46 [+] _charityCredit_1 --> REF_46\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8bf1e43e3ca6f5c25c380803154ae687d682ad32",
        "target": "[RepairTarget] RDFDM:fiatToEth:187\nCODE: uint _tokenCut = (msg.value * 4) / 100\nOPERATION: msg.value [*] 4\nSSA: msg.value [*] 4 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8bf1e43e3ca6f5c25c380803154ae687d682ad32",
        "target": "[RepairTarget] RDFDM:fiatToEth:188\nCODE: uint _operatorCut = (msg.value * 16) / 100\nOPERATION: msg.value [*] 16\nSSA: msg.value [*] 16 --> TMP_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8bf1e43e3ca6f5c25c380803154ae687d682ad32",
        "target": "[RepairTarget] RDFDM:fiatToEth:189\nCODE: uint _charityCredit = (msg.value - _operatorCut) - _tokenCut\nOPERATION: (msg.value - _operatorCut) [-] _tokenCut\nSSA: TMP_24 [-] _tokenCut_1 --> TMP_25\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8bf1e43e3ca6f5c25c380803154ae687d682ad32",
        "target": "[RepairTarget] RDFDM:fiatToEth:189\nCODE: uint _charityCredit = (msg.value - _operatorCut) - _tokenCut\nOPERATION: msg.value [-] _operatorCut\nSSA: msg.value [-] _operatorCut_1 --> TMP_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8bf1e43e3ca6f5c25c380803154ae687d682ad32",
        "target": "[RepairTarget] RDFDM:fiatToEth:187\nCODE: uint _tokenCut = (msg.value * 4) / 100\nOPERATION: (msg.value * 4) [/] 100\nSSA: TMP_20 [/] 100 --> TMP_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8bf1e43e3ca6f5c25c380803154ae687d682ad32",
        "target": "[RepairTarget] RDFDM:fiatToEth:188\nCODE: uint _operatorCut = (msg.value * 16) / 100\nOPERATION: (msg.value * 16) [/] 100\nSSA: TMP_22 [/] 100 --> TMP_23\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8bf1e43e3ca6f5c25c380803154ae687d682ad32",
        "target": "[RepairTarget] RDFDM:fiatDelivered:213\nCODE: charities[_charity].fiatBalanceOut -= _fiat\nOPERATION: charities[_charity].fiatBalanceOut [-=] _fiat\nSSA: REF_38 [-] _fiat_1 --> REF_38\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8d6df35bd383033ad6e4a050f8eabf3677b540f6",
        "target": "[RepairTarget] TokenGCT:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8db8ad2888b338dc8ad715347821c24bbbcac5b0",
        "target": "[RepairTarget] ESCARCE:transferFrom:69\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8db8ad2888b338dc8ad715347821c24bbbcac5b0",
        "target": "[RepairTarget] ESCARCE:aidrop:99\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8e517df4b2378b2ab021368081841b95b193bac7",
        "target": "[RepairTarget] Token:fallback:55\nCODE: _CurrentDistribPublicSupply += _amount\nOPERATION: _CurrentDistribPublicSupply [+=] _amount\nSSA: _CurrentDistribPublicSupply_2 [+] _amount_1 --> _CurrentDistribPublicSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8e517df4b2378b2ab021368081841b95b193bac7",
        "target": "[RepairTarget] Token:StopDistrib:142\nCODE: balances[_remainingTokensReceiverAddress] += _remainingAmount\nOPERATION: balances[_remainingTokensReceiverAddress] [+=] _remainingAmount\nSSA: REF_5 [+] _remainingAmount_1 --> REF_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8e517df4b2378b2ab021368081841b95b193bac7",
        "target": "[RepairTarget] Token:fallback:56\nCODE: balances[msg.sender] += _amount\nOPERATION: balances[msg.sender] [+=] _amount\nSSA: REF_1 [+] _amount_1 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8e517df4b2378b2ab021368081841b95b193bac7",
        "target": "[RepairTarget] Token:fallback:57\nCODE: _totalSupply += _amount\nOPERATION: _totalSupply [+=] _amount\nSSA: _totalSupply_2 [+] _amount_1 --> _totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8ed5004542f7b98a3c08e1f3471586ca66a082aa",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8febf7551eea6ce499f96537ae0e2075c5a7301a",
        "target": "[RepairTarget] StandardToken:transferFrom:148\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_21 [-] _value_1 --> REF_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x936d118702ad19aa39d6e0aed5efd434a577f6bf",
        "target": "[RepairTarget] StandardToken:transferFrom:64\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9375f79b3c186e9cc380f9d5890110e21bf0f04d",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9713b3bf42b0f39c688999185c53db425d864a8a",
        "target": "[RepairTarget] Lemonade:_transfer:42\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9713b3bf42b0f39c688999185c53db425d864a8a",
        "target": "[RepairTarget] Lemonade:_transfer:47\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9b20dabcec77f6289113e61893f7beefaeb1990a",
        "target": "[RepairTarget] TokenERC20:_transfer:81\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9b66270a18f696711a56cec0cdd1f7801433536f",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9b6e2ef9666051804c1e6796962c5f17fda15463",
        "target": "[RepairTarget] AgurisToken:_transfer:37\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9b6e2ef9666051804c1e6796962c5f17fda15463",
        "target": "[RepairTarget] AgurisToken:_transfer:40\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9f05670b96ecb6e2303e98572712f2edffd28b6c",
        "target": "[RepairTarget] StandardToken:burn:58\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_1 [-] _value_1 --> totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9f05670b96ecb6e2303e98572712f2edffd28b6c",
        "target": "[RepairTarget] StandardToken:burnFrom:68\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_3 [-] _value_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9f05670b96ecb6e2303e98572712f2edffd28b6c",
        "target": "[RepairTarget] StandardToken:_transfer:21\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9f05670b96ecb6e2303e98572712f2edffd28b6c",
        "target": "[RepairTarget] StandardToken:_transfer:25\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2",
        "target": "[RepairTarget] DSMath:mul:102\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: (z = x * y) [/] y\nSSA: z_1 [/] y_1 --> TMP_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2",
        "target": "[RepairTarget] DSMath:mul:102\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2",
        "target": "[RepairTarget] DSMath:sub:99\nCODE: require((z = x - y) <= x)\nOPERATION: x [-] y\nSSA: x_1 [-] y_1 --> TMP_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa0872ee815b8dd0f6937386fd77134720d953581",
        "target": "[RepairTarget] StandardToken:transfer:63\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa0872ee815b8dd0f6937386fd77134720d953581",
        "target": "[RepairTarget] StandardToken:transferFrom:80\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_15 [+] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa0872ee815b8dd0f6937386fd77134720d953581",
        "target": "[RepairTarget] StandardToken:transferFrom:83\nCODE: assert(balances[_from] + balances[_to] == previousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_18 [+] REF_19 --> TMP_21\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa119f0f5fd06ebadff8883c0f3c40b2d22e7a44f",
        "target": "[RepairTarget] Corethum:transfer:99\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa119f0f5fd06ebadff8883c0f3c40b2d22e7a44f",
        "target": "[RepairTarget] Corethum:transferFrom:114\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa24f50fa560d2ec57956955f929273e899994bca",
        "target": "[RepairTarget] SafeMath:mul:15\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa3d3f829adfebceaeb7f439adf9157043929a6ed",
        "target": "[RepairTarget] InRiddimCrowdsale:buy:122\nCODE: balanceOf[_buyer] += newTokens\nOPERATION: balanceOf[_buyer] [+=] newTokens\nSSA: REF_9 [+] newTokens_1 --> REF_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa70f4fecbe032135ad970dceeb9e5076a5be8b1d",
        "target": "[RepairTarget] iGniter:totalSupply:351\nCODE: _tier1Rewards = _tier1AvgDiff * T1DividendsPerBlockPerAddress * Tier1Amt\nOPERATION: _tier1AvgDiff [*] T1DividendsPerBlockPerAddress\nSSA: _tier1AvgDiff_1 [*] T1DividendsPerBlockPerAddress_3 --> TMP_92\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa70f4fecbe032135ad970dceeb9e5076a5be8b1d",
        "target": "[RepairTarget] iGniter:totalSupply:351\nCODE: _tier1Rewards = _tier1AvgDiff * T1DividendsPerBlockPerAddress * Tier1Amt\nOPERATION: _tier1AvgDiff * T1DividendsPerBlockPerAddress [*] Tier1Amt\nSSA: TMP_92 [*] Tier1Amt_1 --> TMP_93\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa70f4fecbe032135ad970dceeb9e5076a5be8b1d",
        "target": "[RepairTarget] iGniter:totalSupply:390\nCODE: totalRewards = _tier1Rewards + _tier2Rewards + _tier3Rewards + _tier4Rewards + _tier5Rewards + _hodlRewards + divRewards\nOPERATION: _tier1Rewards + _tier2Rewards + _tier3Rewards + _tier4Rewards + _tier5Rewards + _hodlRewards [+] divRewards\nSSA: TMP_126 [+] divRewards_1 --> TMP_127\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa70f4fecbe032135ad970dceeb9e5076a5be8b1d",
        "target": "[RepairTarget] iGniter:totalSupply:390\nCODE: totalRewards = _tier1Rewards + _tier2Rewards + _tier3Rewards + _tier4Rewards + _tier5Rewards + _hodlRewards + divRewards\nOPERATION: _tier1Rewards + _tier2Rewards + _tier3Rewards + _tier4Rewards [+] _tier5Rewards\nSSA: TMP_124 [+] _tier5Rewards_1 --> TMP_125\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa70f4fecbe032135ad970dceeb9e5076a5be8b1d",
        "target": "[RepairTarget] iGniter:totalSupply:390\nCODE: totalRewards = _tier1Rewards + _tier2Rewards + _tier3Rewards + _tier4Rewards + _tier5Rewards + _hodlRewards + divRewards\nOPERATION: _tier1Rewards [+] _tier2Rewards\nSSA: _tier1Rewards_1 [+] _tier2Rewards_1 --> TMP_122\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa70f4fecbe032135ad970dceeb9e5076a5be8b1d",
        "target": "[RepairTarget] iGniter:totalSupply:390\nCODE: totalRewards = _tier1Rewards + _tier2Rewards + _tier3Rewards + _tier4Rewards + _tier5Rewards + _hodlRewards + divRewards\nOPERATION: _tier1Rewards + _tier2Rewards + _tier3Rewards + _tier4Rewards + _tier5Rewards [+] _hodlRewards\nSSA: TMP_125 [+] _hodlRewards_1 --> TMP_126\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa70f4fecbe032135ad970dceeb9e5076a5be8b1d",
        "target": "[RepairTarget] iGniter:totalSupply:390\nCODE: totalRewards = _tier1Rewards + _tier2Rewards + _tier3Rewards + _tier4Rewards + _tier5Rewards + _hodlRewards + divRewards\nOPERATION: _tier1Rewards + _tier2Rewards [+] _tier3Rewards\nSSA: TMP_122 [+] _tier3Rewards_1 --> TMP_123\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa70f4fecbe032135ad970dceeb9e5076a5be8b1d",
        "target": "[RepairTarget] iGniter:totalSupply:390\nCODE: totalRewards = _tier1Rewards + _tier2Rewards + _tier3Rewards + _tier4Rewards + _tier5Rewards + _hodlRewards + divRewards\nOPERATION: _tier1Rewards + _tier2Rewards + _tier3Rewards [+] _tier4Rewards\nSSA: TMP_123 [+] _tier4Rewards_1 --> TMP_124\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa8ba4095833a3f924d86cb3941099c1abb75ea13",
        "target": "[RepairTarget] SUB1X:aidrop:99\nCODE: require (balances[msg.sender] >= (addresses.length * 125000000000000))\nOPERATION: addresses.length [*] 125000000000000\nSSA: REF_21 [*] 125000000000000 --> TMP_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa8ba4095833a3f924d86cb3941099c1abb75ea13",
        "target": "[RepairTarget] SUB1X:transferFrom:69\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa97c8e603d56d042943c5c341d83709edf749600",
        "target": "[RepairTarget] Crowdsale:fallback:56\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa97c8e603d56d042943c5c341d83709edf749600",
        "target": "[RepairTarget] Crowdsale:fallback:55\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaa19a4bdb4aa3f77b025afd78c1cc6d1851222db",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaa1acb5512f9b2ed1804ac6d79e309bc0602c125",
        "target": "[RepairTarget] Token100:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xab0b54efe35457d92cfcddcf4d2cd6f0cb788036",
        "target": "[RepairTarget] EtherealToken:transferFrom:134\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_27 [-] _value_1 --> REF_27\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xabea06495abd2498ef7371bda82b0c5269cb8eff",
        "target": "[RepairTarget] MultiSigWallet:getTransactionIds:575\nCODE: _transactionIds = new uint[](to - from)\nOPERATION: to [-] from\nSSA: to_1 [-] from_1 --> TMP_127\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xac838aee2f650a6b970ecea56d4651653c1f84a1",
        "target": "[RepairTarget] ClearCoin:transferFrom:56\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xac935d89f390c700e69230b369cb83e7eb0ea3d2",
        "target": "[RepairTarget] LifetimeLottery:fallback:45\nCODE: random = uint(keccak256(block.timestamp + block.number + uint(msg.sender) + nonce)) % lotteryList.length\nOPERATION: block.timestamp + block.number [+] uint(msg.sender)\nSSA: TMP_10 [+] TMP_11 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xac935d89f390c700e69230b369cb83e7eb0ea3d2",
        "target": "[RepairTarget] LifetimeLottery:fallback:45\nCODE: random = uint(keccak256(block.timestamp + block.number + uint(msg.sender) + nonce)) % lotteryList.length\nOPERATION: block.timestamp + block.number + uint(msg.sender) [+] nonce\nSSA: TMP_12 [+] nonce_3 --> TMP_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xac935d89f390c700e69230b369cb83e7eb0ea3d2",
        "target": "[RepairTarget] LifetimeLottery:fallback:45\nCODE: random = uint(keccak256(block.timestamp + block.number + uint(msg.sender) + nonce)) % lotteryList.length\nOPERATION: block.timestamp [+] block.number\nSSA: block.timestamp [+] block.number --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xacbcd546b05fad88966607809c4efa96c0884587",
        "target": "[RepairTarget] PurxERC20:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xae54444f4cf2908dce2f60a4c0055d514b3192f2",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaed206d6d77e34672721c4b0d2d42b6217658325",
        "target": "[RepairTarget] RDFDM:fiatToEth:185\nCODE: uint _tokenCut = (msg.value * 4) / 100\nOPERATION: msg.value [*] 4\nSSA: msg.value [*] 4 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaed206d6d77e34672721c4b0d2d42b6217658325",
        "target": "[RepairTarget] RDFDM:ethToFiat:202\nCODE: charities[_charity].fiatBalanceOut += _fiat\nOPERATION: charities[_charity].fiatBalanceOut [+=] _fiat\nSSA: REF_33 [+] _fiat_1 --> REF_33\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaed206d6d77e34672721c4b0d2d42b6217658325",
        "target": "[RepairTarget] RDFDM:fiatToEth:187\nCODE: uint _charityCredit = (msg.value - _operatorCut) - _tokenCut\nOPERATION: msg.value [-] _operatorCut\nSSA: msg.value [-] _operatorCut_1 --> TMP_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaed206d6d77e34672721c4b0d2d42b6217658325",
        "target": "[RepairTarget] RDFDM:fiatCollected:174\nCODE: charities[_charity].fiatCollected += _fiat\nOPERATION: charities[_charity].fiatCollected [+=] _fiat\nSSA: REF_11 [+] _fiat_1 --> REF_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaed206d6d77e34672721c4b0d2d42b6217658325",
        "target": "[RepairTarget] RDFDM:ethDonation:226\nCODE: charities[_charity].ethBalance += _charityCredit\nOPERATION: charities[_charity].ethBalance [+=] _charityCredit\nSSA: REF_46 [+] _charityCredit_1 --> REF_46\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaed206d6d77e34672721c4b0d2d42b6217658325",
        "target": "[RepairTarget] RDFDM:fiatToEth:186\nCODE: uint _operatorCut = (msg.value * 16) / 100\nOPERATION: msg.value [*] 16\nSSA: msg.value [*] 16 --> TMP_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaed206d6d77e34672721c4b0d2d42b6217658325",
        "target": "[RepairTarget] RDFDM:fiatToEth:187\nCODE: uint _charityCredit = (msg.value - _operatorCut) - _tokenCut\nOPERATION: (msg.value - _operatorCut) [-] _tokenCut\nSSA: TMP_24 [-] _tokenCut_1 --> TMP_25\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaed206d6d77e34672721c4b0d2d42b6217658325",
        "target": "[RepairTarget] RDFDM:fiatToEth:185\nCODE: uint _tokenCut = (msg.value * 4) / 100\nOPERATION: (msg.value * 4) [/] 100\nSSA: TMP_20 [/] 100 --> TMP_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaed206d6d77e34672721c4b0d2d42b6217658325",
        "target": "[RepairTarget] RDFDM:fiatToEth:186\nCODE: uint _operatorCut = (msg.value * 16) / 100\nOPERATION: (msg.value * 16) [/] 100\nSSA: TMP_22 [/] 100 --> TMP_23\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaed206d6d77e34672721c4b0d2d42b6217658325",
        "target": "[RepairTarget] RDFDM:fiatDelivered:211\nCODE: charities[_charity].fiatBalanceOut -= _fiat\nOPERATION: charities[_charity].fiatBalanceOut [-=] _fiat\nSSA: REF_38 [-] _fiat_1 --> REF_38\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb24d62b2a2cb42f3c459b6f45556cd9205fb1815",
        "target": "[RepairTarget] STEP:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb4429467a26157ff9f1d0a9ebbfdc6630c16d67c",
        "target": "[RepairTarget] StandardToken:transferFrom:64\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb5d3f782d5b08b6b1eea977ab7f4520b983088d1",
        "target": "[RepairTarget] TourismEcologyChainBase:_transfer:74\nCODE: require(balances[_to] + _value > balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_7\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xb61802c06fc7d5bea7d8b4853e6a7fcb53c6a8b0",
        "target": "[RepairTarget] StandardToken:transferFrom:55\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb622fa46001b8ab78350ea25d6cf17349510102b",
        "target": "[RepairTarget] SSENTE:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb622fa46001b8ab78350ea25d6cf17349510102b",
        "target": "[RepairTarget] SSENTE:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb6aea65e014ede0d88707ac3ecc243d6de25b812",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb6bbf89c3dbba20cb4d5cabaa4a386acbbab455e",
        "target": "[RepairTarget] ETHMap:buyZone:72\nCODE: uint256 ownersShare = msg.value - contractOwnerCut\nOPERATION: msg.value [-] contractOwnerCut\nSSA: msg.value [-] contractOwnerCut_1 --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb81aa5339756c630491a6f06e086ac91667d3bc4",
        "target": "[RepairTarget] Airdrop:whitelistAddresses:87\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb9131e894259d0d374bf189ca640ffc472a7d143",
        "target": "[RepairTarget] StandardToken:transfer:110\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb9131e894259d0d374bf189ca640ffc472a7d143",
        "target": "[RepairTarget] StandardToken:transferFrom:131\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_18 [-] _value_1 --> REF_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb957b54c347342893b7d79abe2aaf543f7598531",
        "target": "[RepairTarget] StandardToken:transferFrom:89\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb98d8070dfc448c82dd044f73ae80c24ee11e4d8",
        "target": "[RepairTarget] SafeMath:mul:5\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb99080b9407436ebb2b8fe56d45ffa47e9bb8877",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb9e469d029abe8c1d546c549e4ab712d5556b45e",
        "target": "[RepairTarget] SafeMath:safeMul:45\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbabfe0ae175b847543724c386700065137d30e3b",
        "target": "[RepairTarget] PrivateBank:Deposit:30\nCODE: balances[msg.sender]+=msg.value\nOPERATION: balances[msg.sender] [+=] msg.value\nSSA: REF_1 [+] msg.value --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbb28bc9a43f60eb00e15e3654acc9e6ced43856f",
        "target": "[RepairTarget] EthereumUltimateToken:fallback:138\nCODE: balances[msg.sender] += numTokens\nOPERATION: balances[msg.sender] [+=] numTokens\nSSA: REF_9 [+] numTokens_1 --> REF_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbb28bc9a43f60eb00e15e3654acc9e6ced43856f",
        "target": "[RepairTarget] EthereumUltimateToken:fallback:136\nCODE: soldAfterPowerHour += numTokens\nOPERATION: soldAfterPowerHour [+=] numTokens\nSSA: soldAfterPowerHour_5 [+] numTokens_1 --> soldAfterPowerHour_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbd6a3418cb51418c94cc11d2d49012a2b79e10fe",
        "target": "[RepairTarget] WeaponsCore:getWeaponIds:114\nCODE: weaponId++\nOPERATION: [++] weaponId\nSSA: weaponId_2 [+] 1 --> weaponId_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc0289015dfc96c1a141ce742f9e36edfb72cbc8d",
        "target": "[RepairTarget] SYNTH:transferFrom:66\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc438b4c0dfbb1593be6dee03bbd1a84bb3aa6213",
        "target": "[RepairTarget] StandardToken:transfer:75\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc438b4c0dfbb1593be6dee03bbd1a84bb3aa6213",
        "target": "[RepairTarget] StandardToken:transferFrom:92\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc48b1ac1417db27c4e2c2ed3dae5a3d2fbb07dc5",
        "target": "[RepairTarget] TokenERC20:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc4fd6c87218a2c0f2f7cfed260e1778d62020688",
        "target": "[RepairTarget] TestingCoin:fixedLog:206\nCODE: scale--\nOPERATION: [--] scale\nSSA: scale_3 [-] 1 --> scale_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc51c938c4d513780c66c722a41c197d3a89fa9a8",
        "target": "[RepairTarget] eBTG:transfer:48\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc51c938c4d513780c66c722a41c197d3a89fa9a8",
        "target": "[RepairTarget] eBTG:transferFrom:67\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc5bfcb042f5bc5402d7f6980f17695bf8147dfb0",
        "target": "[RepairTarget] TokenERC20:_transfer:85\nCODE: _balanceOf[_from] -= _value\nOPERATION: _balanceOf[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc67c1f88f31e724b137a057292e55cb42a5f3241",
        "target": "[RepairTarget] Crowdsale:fallback:43\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc67c1f88f31e724b137a057292e55cb42a5f3241",
        "target": "[RepairTarget] Crowdsale:fallback:44\nCODE: tokenReward.transfer(msg.sender, amount*10000)\nOPERATION: amount [*] 10000\nSSA: amount_1 [*] 10000 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc6c9db23d0dd0469b0bf97f365ae816274baa19a",
        "target": "[RepairTarget] StandardToken:transferFrom:93\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc6c9db23d0dd0469b0bf97f365ae816274baa19a",
        "target": "[RepairTarget] eastadsCREDITS:fallback:153\nCODE: balances[fundsWallet] = balances[fundsWallet] - amount\nOPERATION: balances[fundsWallet] [-] amount\nSSA: REF_33 [-] amount_1 --> TMP_38\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc9d202b7db1c08db49bff77010e2d388bbc42979",
        "target": "[RepairTarget] iPUMP:drop:157\nCODE: assert(balances[owner] >= amt * addresses.length)\nOPERATION: amt [*] addresses.length\nSSA: amt_1 [*] REF_86 --> TMP_80\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcabd49302c9bfb2685331126854b5727e60171cb",
        "target": "[RepairTarget] Margaret:transfer:101\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcabd49302c9bfb2685331126854b5727e60171cb",
        "target": "[RepairTarget] Margaret:transferFrom:116\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcae348eeb5d0b9fd59a8fd179d8b3e8a7b871b5f",
        "target": "[RepairTarget] Hexagon:_transfer:82\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_16 [+] _value_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcb2ab9fdb42de8955987304009494ee4c2a08852",
        "target": "[RepairTarget] StandardToken:transferFrom:69\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcb8d1c16f97f86b4aaa400a50771bc958b9ba116",
        "target": "[RepairTarget] Vault:deposit:35\nCODE: Deposits[msg.sender] += msg.value\nOPERATION: Deposits[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xccd588b9bc05a2b251fee2a7f7fd20484fd504c9",
        "target": "[RepairTarget] FuturecomToken:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xccd588b9bc05a2b251fee2a7f7fd20484fd504c9",
        "target": "[RepairTarget] FuturecomToken:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcda0f7d68eb1398d459458fa3b31751a65030e6e",
        "target": "[RepairTarget] XmasToken:transfer:36\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xcdb7ecfd3403eef3882c65b761ef9b5054890a47",
        "target": "[RepairTarget] Hurify:tokensup:49\nCODE: balances[owner] = safeAdd(balances[owner], _value * (10 ** decimals))\nOPERATION: _value [*] (10 ** decimals)\nSSA: _value_1 [*] TMP_16 --> TMP_17\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcdb9348af83e6329ea94ed35df3eec856eaa2164",
        "target": "[RepairTarget] BasicToken:batchTransfer:96\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xce0cd513a069e8ec9cb625fcdf6d5f29aa912dbc",
        "target": "[RepairTarget] Token:transfer:70\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xce1d3da32e3a45d27dc841781f09e40c41cac677",
        "target": "[RepairTarget] StandardToken:transferFrom:55\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xce4d20b74faf8c1ab15e2b0fd3f1cccfe6f6d419",
        "target": "[RepairTarget] JpToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xce4d20b74faf8c1ab15e2b0fd3f1cccfe6f6d419",
        "target": "[RepairTarget] JpToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xce77c7ab6caaaf8aa65808d8966c4d09e491c964",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xce9ed0b322a1420da4b6990e3047796f57471336",
        "target": "[RepairTarget] LifetimeLottery:fallback:33\nCODE: random = uint(keccak256(block.timestamp + block.number + uint(msg.sender) + nonce)) % lotteryList.length\nOPERATION: block.timestamp + block.number [+] uint(msg.sender)\nSSA: TMP_10 [+] TMP_11 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xce9ed0b322a1420da4b6990e3047796f57471336",
        "target": "[RepairTarget] LifetimeLottery:fallback:33\nCODE: random = uint(keccak256(block.timestamp + block.number + uint(msg.sender) + nonce)) % lotteryList.length\nOPERATION: block.timestamp [+] block.number\nSSA: block.timestamp [+] block.number --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xce9ed0b322a1420da4b6990e3047796f57471336",
        "target": "[RepairTarget] LifetimeLottery:fallback:33\nCODE: random = uint(keccak256(block.timestamp + block.number + uint(msg.sender) + nonce)) % lotteryList.length\nOPERATION: block.timestamp + block.number + uint(msg.sender) [+] nonce\nSSA: TMP_12 [+] nonce_3 --> TMP_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcea093ff08f94ebfcd921b8cd1e6a9f18826ccab",
        "target": "[RepairTarget] LearnX:transfer:98\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_11 [+] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcea093ff08f94ebfcd921b8cd1e6a9f18826ccab",
        "target": "[RepairTarget] LearnX:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_19 [-] _amount_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcf636b55e5fe32e7d8b8257518666b6bc7077c75",
        "target": "[RepairTarget] ConvertLib:b32toHexString:630\nCODE: uint8 low = by - 16*high\nOPERATION: by [-] 16*high\nSSA: by_1 [-] TMP_34 --> TMP_35\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcf636b55e5fe32e7d8b8257518666b6bc7077c75",
        "target": "[RepairTarget] ConvertLib:b32toHexString:630\nCODE: uint8 low = by - 16*high\nOPERATION: 16 [*] high\nSSA: 16 [*] high_1 --> TMP_34\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcfc60841bb8a64446771704159a1130a526d4b86",
        "target": "[RepairTarget] DepositBank:FixProfit:149\nCODE: Lenders[msg.sender].Reserved += CheckProfit(msg.sender)\nOPERATION: Lenders[msg.sender].Reserved [+=] CheckProfit(msg.sender)\nSSA: REF_19 [+] TMP_41 --> REF_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd1928831616d0cd498a204a81516b05531aea9c8",
        "target": "[RepairTarget] Century:transfer:98\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_11 [+] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd1928831616d0cd498a204a81516b05531aea9c8",
        "target": "[RepairTarget] Century:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_19 [-] _amount_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd4551f6776022a2aa3edbd4a98081b25a9ad5533",
        "target": "[RepairTarget] StandardToken:transfer:112\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd4551f6776022a2aa3edbd4a98081b25a9ad5533",
        "target": "[RepairTarget] StandardToken:transferFrom:133\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_18 [-] _value_1 --> REF_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd4c045255da06e593bd9e6207920b5496b814efe",
        "target": "[RepairTarget] StandardToken:lockupAccounts:226\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd61eaa2d5d7f9a92060d596a49c03be162e760a8",
        "target": "[RepairTarget] DSMath:mul:132\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_41\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd61eaa2d5d7f9a92060d596a49c03be162e760a8",
        "target": "[RepairTarget] DSMath:mul:132\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: (z = x * y) [/] y\nSSA: z_1 [/] y_1 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd68f38076056b9db89a9431f0fdf9c6927a871ee",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd6f9b1df49718eb134d02a06ac048e50931a7a6c",
        "target": "[RepairTarget] ZastrinPay:buyCourse:44\nCODE: customers[msg.sender][_courseId].amount += msg.value\nOPERATION: customers[msg.sender][_courseId].amount [+=] msg.value\nSSA: REF_4 [+] msg.value --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd703d5914c76a78d283415ed5c3fbe9bfd44f768",
        "target": "[RepairTarget] StandardToken:transferFrom:92\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd7e53311e79521e68a68d7d8a5fa543143f959fe",
        "target": "[RepairTarget] ClickRUB:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd94f31ea5883199522f045866aa0340bfae4881e",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd99c17fc653176a32734031be3000bc82f261eb0",
        "target": "[RepairTarget] Whitelist:registerAddresses:69\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd99c17fc653176a32734031be3000bc82f261eb0",
        "target": "[RepairTarget] Whitelist:unregisterAddresses:82\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd9a19471e4c4e6766518f7a91a8e4237dead5647",
        "target": "[RepairTarget] Feed:submitMessage:86\nCODE: _last_Show_data=_last_Show_data+(((now-_last_Show_data)/showInterval)+1)*showInterval\nOPERATION: now [-] _last_Show_data\nSSA: now [-] _last_Show_data_1 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9a19471e4c4e6766518f7a91a8e4237dead5647",
        "target": "[RepairTarget] Feed:queueCount:58\nCODE: messageInfo[i].show_date<(now-showInterval) && messageInfo[i].rejected==0\nOPERATION: now [-] showInterval\nSSA: now [-] showInterval_1 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9a19471e4c4e6766518f7a91a8e4237dead5647",
        "target": "[RepairTarget] Feed:currentMessage:68\nCODE: messageInfo[i].show_date>=(_now-showInterval) && messageInfo[i].show_date<_now && messageInfo[i].rejected==0\nOPERATION: _now [-] showInterval\nSSA: _now_3 [-] showInterval_2 --> TMP_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9a19471e4c4e6766518f7a91a8e4237dead5647",
        "target": "[RepairTarget] Feed:submitMessage:86\nCODE: _last_Show_data=_last_Show_data+(((now-_last_Show_data)/showInterval)+1)*showInterval\nOPERATION: ((now-_last_Show_data)/showInterval) [+] 1\nSSA: TMP_43 [+] 1 --> TMP_44\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9a19471e4c4e6766518f7a91a8e4237dead5647",
        "target": "[RepairTarget] Feed:submitMessage:86\nCODE: _last_Show_data=_last_Show_data+(((now-_last_Show_data)/showInterval)+1)*showInterval\nOPERATION: _last_Show_data [+] (((now-_last_Show_data)/showInterval)+1)*showInterval\nSSA: _last_Show_data_1 [+] TMP_45 --> TMP_46\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9a19471e4c4e6766518f7a91a8e4237dead5647",
        "target": "[RepairTarget] Feed:submitMessage:86\nCODE: _last_Show_data=_last_Show_data+(((now-_last_Show_data)/showInterval)+1)*showInterval\nOPERATION: (now-_last_Show_data) [/] showInterval\nSSA: TMP_42 [/] showInterval_4 --> TMP_43\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9a19471e4c4e6766518f7a91a8e4237dead5647",
        "target": "[RepairTarget] Feed:submitMessage:86\nCODE: _last_Show_data=_last_Show_data+(((now-_last_Show_data)/showInterval)+1)*showInterval\nOPERATION: (((now-_last_Show_data)/showInterval)+1) [*] showInterval\nSSA: TMP_44 [*] showInterval_4 --> TMP_45\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xda017d3417d7fcdd4db134e2491f30292ec647c7",
        "target": "[RepairTarget] Mexicoin:fallback:126\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xda017d3417d7fcdd4db134e2491f30292ec647c7",
        "target": "[RepairTarget] Mexicoin:transferFrom:65\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xda017d3417d7fcdd4db134e2491f30292ec647c7",
        "target": "[RepairTarget] Mexicoin:transfer:37\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xda5b14f24f15d1344d052392b03504e23f282c0f",
        "target": "[RepairTarget] AdminToken:sell:100\nCODE: tokenPrice -= 200\nOPERATION: tokenPrice [-=] 200\nSSA: tokenPrice_2 [-] 200 --> tokenPrice_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xda5b14f24f15d1344d052392b03504e23f282c0f",
        "target": "[RepairTarget] AdminToken:sell:97\nCODE: tokenPrice -= 100\nOPERATION: tokenPrice [-=] 100\nSSA: tokenPrice_2 [-] 100 --> tokenPrice_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdb3f0abff87b0d71c45424b1db6fc92f8a76967a",
        "target": "[RepairTarget] WANGSUToken:_transfer:91\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdca0312fc4c31160af85ef342d241d04d50f2262",
        "target": "[RepairTarget] Token:multiTransfer:165\nCODE: r].sub(_value[i] * 1 ether);\r\n            balances[_to[i]] = balance\nOPERATION: [++]  \nSSA: REF_135 [*] 1000000000000000000 --> TMP_107\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf5f29a28119714a00d7bf0e25f8af8dcb9a9d51",
        "target": "[RepairTarget] DealerRights:_transfer:41\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdf5f29a28119714a00d7bf0e25f8af8dcb9a9d51",
        "target": "[RepairTarget] DealerRights:_transfer:45\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe137da0a88e299d5086f1ebf3c224386d82a0b16",
        "target": "[RepairTarget] OrganizeFunds:withdraw:192\nCODE: totalFundsWithdrawn -= amount\nOPERATION: totalFundsWithdrawn [-=] amount\nSSA: totalFundsWithdrawn_4 [-] amount_1 --> totalFundsWithdrawn_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe1754d039c839192ee193d5cf8406fb24fcb421f",
        "target": "[RepairTarget] ETHToken:fallback:136\nCODE: soldAfterPowerHour += numTokens\nOPERATION: soldAfterPowerHour [+=] numTokens\nSSA: soldAfterPowerHour_5 [+] numTokens_1 --> soldAfterPowerHour_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe1754d039c839192ee193d5cf8406fb24fcb421f",
        "target": "[RepairTarget] ETHToken:fallback:138\nCODE: balances[msg.sender] += numTokens\nOPERATION: balances[msg.sender] [+=] numTokens\nSSA: REF_9 [+] numTokens_1 --> REF_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe54a11dc70d4c048897ff9d07bfb181ad78ff37f",
        "target": "[RepairTarget] TokenBase:_transfer:47\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe54a11dc70d4c048897ff9d07bfb181ad78ff37f",
        "target": "[RepairTarget] TokenBase:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_13\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe5afb7be773ebe9b774074fba06256537fedb7e4",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe676922f11a93c9dc2b756dc2f0a724e322d966d",
        "target": "[RepairTarget] SendGift:payOut:31\nCODE: gift = msg.value*49/100\nOPERATION: msg.value [*] 49\nSSA: msg.value [*] 49 --> TMP_17\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe676922f11a93c9dc2b756dc2f0a724e322d966d",
        "target": "[RepairTarget] SendGift:payOut:41\nCODE: received[payee1]+=gift\nOPERATION: received[payee1] [+=] gift\nSSA: REF_11 [+] gift_3 --> REF_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe676922f11a93c9dc2b756dc2f0a724e322d966d",
        "target": "[RepairTarget] SendGift:payOut:31\nCODE: gift = msg.value*49/100\nOPERATION: msg.value*49 [/] 100\nSSA: TMP_17 [/] 100 --> TMP_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe75ad3aab14e4b0df8c5da4286608dabb21bd864",
        "target": "[RepairTarget] AAC:transfer:126\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_8 [+] _amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe787780b7afc3bedcc6292854d36e420d5c62dc9",
        "target": "[RepairTarget] IotWifitoken:_transfer:22\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_5\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe787780b7afc3bedcc6292854d36e420d5c62dc9",
        "target": "[RepairTarget] IotWifitoken:_transfer:26\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe8832e8f827910141f2ab294bfbfb329be3d3720",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe8aa056415e56280666aa77e313564ab2e99d79c",
        "target": "[RepairTarget] SafeMath:mul:15\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe8aa056415e56280666aa77e313564ab2e99d79c",
        "target": "[RepairTarget] XZEN:createTokens:222\nCODE: balances[teamWallet] -= tokens\nOPERATION: balances[teamWallet] [-=] tokens\nSSA: REF_91 [-] tokens_3 --> REF_91\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe8fc7e1973496848fcb486c5bb880f68487ea0bb",
        "target": "[RepairTarget] LiteCoinWPLUS:transfer:101\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe8fc7e1973496848fcb486c5bb880f68487ea0bb",
        "target": "[RepairTarget] LiteCoinWPLUS:transferFrom:116\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xec3f61c627a67a01a40d189f7ba65f478e3aee39",
        "target": "[RepairTarget] HXTToken:transferFrom:57\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xecb1de8b1a874f42abd321e982137d1fabea0f93",
        "target": "[RepairTarget] Kether:transfer:76\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xecb1de8b1a874f42abd321e982137d1fabea0f93",
        "target": "[RepairTarget] Kether:transferFrom:101\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xef9d61a0f2bfd4695faeb17dd61d85202bdc8e6e",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xefadbb26a8a8e186d47a38180fcf0aa74fa563cf",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf248680d071820ebb747aea688b9eeff75ef9f27",
        "target": "[RepairTarget] MultiKeyDailyLimitWallet:getAdjustedDailyCount:54\nCODE: (block.timestamp - lastWithdrawalTime[token]) >= 1 days\nOPERATION: block.timestamp [-] lastWithdrawalTime[token]\nSSA: block.timestamp [-] REF_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf270f361edca19f7063184b0e6b4f264468ecbc1",
        "target": "[RepairTarget] StandardToken:transfer:63\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf270f361edca19f7063184b0e6b4f264468ecbc1",
        "target": "[RepairTarget] StandardToken:transferFrom:80\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_15 [+] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf270f361edca19f7063184b0e6b4f264468ecbc1",
        "target": "[RepairTarget] StandardToken:transferFrom:83\nCODE: assert(balances[_from] + balances[_to] == previousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_18 [+] REF_19 --> TMP_21\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf354b2e5ea679a726d0348a974971cb4697bf508",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf38d64b3cb5eeaef93ffab8946bd057eb3277c82",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf3eb09a1fd5a3e133a669074de1231d7a673744b",
        "target": "[RepairTarget] StandardToken:transfer:112\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf3eb09a1fd5a3e133a669074de1231d7a673744b",
        "target": "[RepairTarget] StandardToken:transferFrom:133\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_18 [-] _value_1 --> REF_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf4753f5523cf3d9df056ad7b997db018272b1310",
        "target": "[RepairTarget] TokenBase:_transfer:47\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf4753f5523cf3d9df056ad7b997db018272b1310",
        "target": "[RepairTarget] TokenBase:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_13\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf71c0fcab223d1e60e17716443937fa9a043fe1b",
        "target": "[RepairTarget] Smile:transfer:98\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_11 [+] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf71c0fcab223d1e60e17716443937fa9a043fe1b",
        "target": "[RepairTarget] Smile:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_19 [-] _amount_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf83cb334a6e2b44f4bfbddd94966b144b3cbfd1a",
        "target": "[RepairTarget] Veservatium:transfer:98\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_11 [+] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf83cb334a6e2b44f4bfbddd94966b144b3cbfd1a",
        "target": "[RepairTarget] Veservatium:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_19 [-] _amount_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf8fc04b941d757c865855c1982f18583649dac47",
        "target": "[RepairTarget] LiziToken:distributeToken:42\nCODE: balances[addresses[i]] += _value\nOPERATION: balances[addresses[i]] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf8fc04b941d757c865855c1982f18583649dac47",
        "target": "[RepairTarget] LiziToken:transfer:63\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf8fc04b941d757c865855c1982f18583649dac47",
        "target": "[RepairTarget] LiziToken:transferFrom:82\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf9560698dc041486da6ed64973dea246224c2571",
        "target": "[RepairTarget] Temgean:transfer:44\nCODE: Transfer(msg.sender, _to, (_value - 10**19))\nOPERATION: _value [-] 10**19\nSSA: _value_1 [-] TMP_8 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf9560698dc041486da6ed64973dea246224c2571",
        "target": "[RepairTarget] Temgean:transferFrom:55\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfad572db566e5234ac9fc3d570c4edc0050eaa92",
        "target": "[RepairTarget] TokenERC20:_transfer:95\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_22 [+] _value_1 --> REF_22\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfb340423dfac531b801d7586c98fe31e12a32f31",
        "target": "[RepairTarget] GEMCHAIN:_transfer:75\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfb4752ad1b7153e1dbd2e6662651a11c7fc14083",
        "target": "[RepairTarget] MPESA:distributeEBTC:42\nCODE: balances[addresses[i]] += 245719916000\nOPERATION: balances[addresses[i]] [+=] 245719916000\nSSA: REF_4 [+] 245719916000 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfb4752ad1b7153e1dbd2e6662651a11c7fc14083",
        "target": "[RepairTarget] MPESA:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfb4752ad1b7153e1dbd2e6662651a11c7fc14083",
        "target": "[RepairTarget] MPESA:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfd743691ac893000f29c893ba21ed46f465c4de4",
        "target": "[RepairTarget] EtherSpeed:fallback:151\nCODE: balances[msg.sender] += amount\nOPERATION: balances[msg.sender] [+=] amount\nSSA: REF_24 [+] amount_1 --> REF_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfd743691ac893000f29c893ba21ed46f465c4de4",
        "target": "[RepairTarget] EtherSpeed:_transfer:168\nCODE: assert(balances[_from] + balances[_to] == previousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_35 [+] REF_36 --> TMP_108\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xff7560b413945e602931dc71077a080d90feba68",
        "target": "[RepairTarget] Crowdsale:buyToken:65\nCODE: uint tokens = amount * rateOfEther\nOPERATION: amount [*] rateOfEther\nSSA: amount_1 [*] rateOfEther_3 --> TMP_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x008d3c9e91f8abff45f39eb71b316a0606c6d378",
        "target": "[RepairTarget] TCN:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x00fdd4b5f4e4cc7d6ac02eafb6ef893f1e4d4723",
        "target": "[RepairTarget] eBurst:transfer:64\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x00fdd4b5f4e4cc7d6ac02eafb6ef893f1e4d4723",
        "target": "[RepairTarget] eBurst:transferFrom:83\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x01982364172d4c429372f37ace5d47fe4f71f862",
        "target": "[RepairTarget] CockMight:transferFrom:63\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x01982364172d4c429372f37ace5d47fe4f71f862",
        "target": "[RepairTarget] CockMight:fallback:114\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_26 [+] tokensIssued_1 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x01982364172d4c429372f37ace5d47fe4f71f862",
        "target": "[RepairTarget] CockMight:fallback:113\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_1 [+] tokensIssued_1 --> totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x01982364172d4c429372f37ace5d47fe4f71f862",
        "target": "[RepairTarget] CockMight:transfer:35\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x0279f2882d32f19661649535d802a8df9efd7d6f",
        "target": "[RepairTarget] TeaVoucher:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0279f2882d32f19661649535d802a8df9efd7d6f",
        "target": "[RepairTarget] TeaVoucher:transferFrom:98\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_21 [+] _amount_1 --> REF_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x02aa481223f81b30ae9ccd4845ebfc3d4f4be068",
        "target": "[RepairTarget] METS6:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0353813310f99e7f26cbee085917d0de5964d386",
        "target": "[RepairTarget] SIPToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0353813310f99e7f26cbee085917d0de5964d386",
        "target": "[RepairTarget] SIPToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x035c8119a68a8f762fe2731fa190a5afcba653a3",
        "target": "[RepairTarget] RVLS:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0509a863569f2e9253a1fc8d4bc90a7a0cf9d2e4",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0684d80292961f6f662a214d52c940232c4dfba1",
        "target": "[RepairTarget] EtherGuess:multiGuess:203\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x071d9bb8f35685137633134dfe41415dd0b4308d",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0723105914f7050151e5f8b941e09f826b11f6b8",
        "target": "[RepairTarget] Scrinium:transferFrom:138\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_21 [-] _value_1 --> REF_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x075e3b0912f61fd347900c8130a253f29e4c7201",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x077fe934551b5a5fc4e2650562807a81a143ef91",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x077fe934551b5a5fc4e2650562807a81a143ef91",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x08218bee367909e86c909edd463730ff28a79346",
        "target": "[RepairTarget] LAC:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x08447b2ef9c568aa6feefbc6fb6986792e2d9a43",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x08c1a513a230f4cfc219896713b4dbe22b433e16",
        "target": "[RepairTarget] StandardToken:transferFrom:88\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x097357648f9078cc6a7156acb737aa0f9f2bf79e",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x097357648f9078cc6a7156acb737aa0f9f2bf79e",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0c3dfe0a6940b2aa81d81418776012d7385c521e",
        "target": "[RepairTarget] Superbowl52:bet:197\nCODE: newEnglandBets += msg.value\nOPERATION: newEnglandBets [+=] msg.value\nSSA: newEnglandBets_2 [+] msg.value --> newEnglandBets_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0c3dfe0a6940b2aa81d81418776012d7385c521e",
        "target": "[RepairTarget] Superbowl52:bet:196\nCODE: bets[msg.sender].newEnglandBets += msg.value\nOPERATION: bets[msg.sender].newEnglandBets [+=] msg.value\nSSA: REF_32 [+] msg.value --> REF_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0c445a3d7ddf1bad0329dba79e553893e96ffa3d",
        "target": "[RepairTarget] DERMA:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0c464f5646335f6243f41f17efb464d086eaa508",
        "target": "[RepairTarget] TOSKYTokenERC20:_transfer:89\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0daed428b7ceff56541532e45b55033563699079",
        "target": "[RepairTarget] knuckCrowdsaleOne:fallback:41\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0daed428b7ceff56541532e45b55033563699079",
        "target": "[RepairTarget] knuckCrowdsaleOne:fallback:42\nCODE: knuckReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0e74d6d1937a5855904403954dfa7e2ce8e712d0",
        "target": "[RepairTarget] TokenERC20:_transfer:37\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0e74d6d1937a5855904403954dfa7e2ce8e712d0",
        "target": "[RepairTarget] TokenERC20:burnFrom:81\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_24 [-] _value_1 --> REF_24\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0f1cd99bea68f0d994064395d2b45315b185882e",
        "target": "[RepairTarget] Countdown:ClickButton:35\nCODE: buttonClicks += 1\nOPERATION: buttonClicks [+=] 1\nSSA: buttonClicks_1 [+] 1 --> buttonClicks_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0f771aa18c5003aba1b0feee082a0dd6acd29956",
        "target": "[RepairTarget] JibrelNetworkToken:transferFrom:121\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0fc8edd50e87229b921e7694f310b0229d31b3e8",
        "target": "[RepairTarget] InsightsNetwork1:register:33\nCODE: uint unlockTime = currentTime + 365*24*60*60\nOPERATION: 365*24 [*] 60\nSSA: TMP_12 [*] 60 --> TMP_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0fc8edd50e87229b921e7694f310b0229d31b3e8",
        "target": "[RepairTarget] InsightsNetwork1:register:33\nCODE: uint unlockTime = currentTime + 365*24*60*60\nOPERATION: currentTime [+] 365*24*60*60\nSSA: currentTime_1 [+] TMP_13 --> TMP_14\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0fc8edd50e87229b921e7694f310b0229d31b3e8",
        "target": "[RepairTarget] InsightsNetwork1:register:25\nCODE: _totalSupply += issueAmount\nOPERATION: _totalSupply [+=] issueAmount\nSSA: _totalSupply_1 [+] issueAmount_1 --> _totalSupply_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0fc8edd50e87229b921e7694f310b0229d31b3e8",
        "target": "[RepairTarget] InsightsNetwork1:register:33\nCODE: uint unlockTime = currentTime + 365*24*60*60\nOPERATION: 365 [*] 24\nSSA: 365 [*] 24 --> TMP_11\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x0fc8edd50e87229b921e7694f310b0229d31b3e8",
        "target": "[RepairTarget] InsightsNetwork1:register:33\nCODE: uint unlockTime = currentTime + 365*24*60*60\nOPERATION: 365*24*60 [*] 60\nSSA: TMP_11 [*] 60 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x100c77a6b266cf455bfc8c8c0321fa5499408a31",
        "target": "[RepairTarget] YonyouToken:_transfer:91\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x11132271d2f1525618d7578e36f996de0712c174",
        "target": "[RepairTarget] StandardToken:transferFrom:88\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1170548c7bf8ff70e4f7d2829b5ac5aa19fe172e",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1170548c7bf8ff70e4f7d2829b5ac5aa19fe172e",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x11838ece89439c4f0224bc7b9f76e07721d99f9e",
        "target": "[RepairTarget] MiCarsToken:transferFrom:114\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x12110e20309491db874219613f597de587861b57",
        "target": "[RepairTarget] EBAYToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x12110e20309491db874219613f597de587861b57",
        "target": "[RepairTarget] EBAYToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x142020a28b22f7e68a9d8f9e9d24c43a2572a8cd",
        "target": "[RepairTarget] StandardToken:transferFrom:60\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1493894bf2468f08fd232c5699b1c24dd33cec18",
        "target": "[RepairTarget] HFTToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1493894bf2468f08fd232c5699b1c24dd33cec18",
        "target": "[RepairTarget] HFTToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x14be3d9bdfdef4cd54c3f470dc56a7f0df528b78",
        "target": "[RepairTarget] vvc:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x14dad763378dea9f1ad5be3ae776d2e6299e86d5",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x14dad763378dea9f1ad5be3ae776d2e6299e86d5",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x155e7e9ab193aa37c87d22f66002e3db64c9e0ce",
        "target": "[RepairTarget] PropsToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x15adb79e6af601551a64060aebbedd39d929c5a7",
        "target": "[RepairTarget] PajeetConnect:distributeBTR:42\nCODE: balances[addresses[i]] += 2000 * 10**8\nOPERATION: balances[addresses[i]] [+=] 2000 * 10**8\nSSA: 2000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x15adb79e6af601551a64060aebbedd39d929c5a7",
        "target": "[RepairTarget] PajeetConnect:distributeBTR:42\nCODE: balances[addresses[i]] += 2000 * 10**8\nOPERATION: 2000 [*] 10**8\nSSA: 2000 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x15adb79e6af601551a64060aebbedd39d929c5a7",
        "target": "[RepairTarget] PajeetConnect:distributeBTR:43\nCODE: Transfer(owner, addresses[i], 2000 * 10**8)\nOPERATION: 2000 [*] 10**8\nSSA: 2000 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x15adb79e6af601551a64060aebbedd39d929c5a7",
        "target": "[RepairTarget] PajeetConnect:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x15adb79e6af601551a64060aebbedd39d929c5a7",
        "target": "[RepairTarget] PajeetConnect:transferFrom:80\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x15de05e084e4c0805d907fcc2dc5651023c57a48",
        "target": "[RepairTarget] ROItoken:_transfer:27\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x15de05e084e4c0805d907fcc2dc5651023c57a48",
        "target": "[RepairTarget] ROItoken:_transfer:31\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x173050e8fe0b0abac2205b2de42501a8407945d9",
        "target": "[RepairTarget] Wscchain:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x173905a75a0244fcb20db32dbacfadd3996cc702",
        "target": "[RepairTarget] SchruteBuck:fallback:117\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x173905a75a0244fcb20db32dbacfadd3996cc702",
        "target": "[RepairTarget] SchruteBuck:fallback:115\nCODE: totalSupply + tokensIssued > maxTotalSupply\nOPERATION: totalSupply [+] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_1 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x173905a75a0244fcb20db32dbacfadd3996cc702",
        "target": "[RepairTarget] SchruteBuck:transferFrom:70\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_18 [-] _value_1 --> REF_18\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x17f3fa8bfcd26ae7d848db2600a6d1b892b5f7a4",
        "target": "[RepairTarget] BHTOKEN:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x180d14c826e4b74cf1a5c786189fe9888ebad1cc",
        "target": "[RepairTarget] AsinerumShareToken:fallback:53\nCODE: amount = amount / 10 ** (18-uint256(decimals))\nOPERATION: amount [/] 10 ** (18-uint256(decimals))\nSSA: amount_1 [/] TMP_21 --> TMP_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x180d14c826e4b74cf1a5c786189fe9888ebad1cc",
        "target": "[RepairTarget] AsinerumShareToken:fallback:53\nCODE: amount = amount / 10 ** (18-uint256(decimals))\nOPERATION: 18 [-] uint256(decimals)\nSSA: 18 [-] TMP_19 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x18b70ebdbca93c0299c87b594676dfed54a1b88d",
        "target": "[RepairTarget] Timecoin:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1981716911e621d725b835ba0af776e5f9be0bbe",
        "target": "[RepairTarget] Lottery7:buyTickets:95\nCODE: uint random_number = uint(block.blockhash(block.number-seed))%5 + 1\nOPERATION: block.number [-] seed\nSSA: block.number [-] seed_5 --> TMP_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1981716911e621d725b835ba0af776e5f9be0bbe",
        "target": "[RepairTarget] Lottery7:buyTickets:95\nCODE: uint random_number = uint(block.blockhash(block.number-seed))%5 + 1\nOPERATION: uint(block.blockhash(block.number-seed))%5 [+] 1\nSSA: TMP_35 [+] 1 --> TMP_36\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1a51f16b4d385a06c542d3686412ab6517b5515d",
        "target": "[RepairTarget] DomRaiderToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1a61250a2bea646478184730d25648811bd429fe",
        "target": "[RepairTarget] MERIDIANERC20:_transfer:47\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1a61250a2bea646478184730d25648811bd429fe",
        "target": "[RepairTarget] MERIDIANERC20:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1a6c513119245123512705d9c4664109c6f90e9c",
        "target": "[RepairTarget] HeebuToken:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1b5ed05690a6b04533f09185afe03ff2371835c2",
        "target": "[RepairTarget] RainbowUnicoin:fallback:126\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1b5ed05690a6b04533f09185afe03ff2371835c2",
        "target": "[RepairTarget] RainbowUnicoin:transferFrom:65\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1b5ed05690a6b04533f09185afe03ff2371835c2",
        "target": "[RepairTarget] RainbowUnicoin:fallback:123\nCODE: totalBonusTokensIssued += nextBonusPayout\nOPERATION: totalBonusTokensIssued [+=] nextBonusPayout\nSSA: totalBonusTokensIssued_2 [+] nextBonusPayout_1 --> totalBonusTokensIssued_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1b5ed05690a6b04533f09185afe03ff2371835c2",
        "target": "[RepairTarget] RainbowUnicoin:transfer:37\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1b5ed05690a6b04533f09185afe03ff2371835c2",
        "target": "[RepairTarget] RainbowUnicoin:fallback:124\nCODE: nextBonusPayout = tokensIssued / 2\nOPERATION: tokensIssued [/] 2\nSSA: tokensIssued_1 [/] 2 --> TMP_38\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1bd367eeb05d9c7f8b5ba488df1878d9b983ebfd",
        "target": "[RepairTarget] Crowdsale:fallback:72\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_2 [+] amount_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1bd367eeb05d9c7f8b5ba488df1878d9b983ebfd",
        "target": "[RepairTarget] Crowdsale:fallback:73\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1c866ac6991bb7bd2c11ec3b8b6cc6b79fd78d75",
        "target": "[RepairTarget] Ghcwchain:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1c9998429c3dd5b031d4ae8698f3d2147a416b5b",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1cf6949f4b661018b3195f3ff98effe12f587263",
        "target": "[RepairTarget] AtlantToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1d2196207512665ad3beb7c3641f7db409dc7beb",
        "target": "[RepairTarget] BitcoinBLUE:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1d238ac79e2e250a01a43598921a2188a99846d3",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1d238ac79e2e250a01a43598921a2188a99846d3",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1d38b2f0329568ad8730b1970905e4978c16b7ff",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1d38b2f0329568ad8730b1970905e4978c16b7ff",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1d9be4a5681374c54b1821d0beac3a678ad128a4",
        "target": "[RepairTarget] StringMover:bytes64ToString:109\nCODE: charCount++\nOPERATION: [++] charCount\nSSA: charCount_1 [+] 1 --> charCount_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1e7ec4f134432766bacbfbeb54c897458e58ac75",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1ef07a7888f70a1b0dfa9e482885b437b1d44f16",
        "target": "[RepairTarget] TokenSafe:unlock:100\nCODE: uint256 canWithdrawAmount = balance - balanceShouldRest\nOPERATION: balance [-] balanceShouldRest\nSSA: balance_1 [-] balanceShouldRest_1 --> TMP_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1fd159fa190ab588f60699ef6def984602dd8c5b",
        "target": "[RepairTarget] HAPYToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1fd159fa190ab588f60699ef6def984602dd8c5b",
        "target": "[RepairTarget] HAPYToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2011266a6c9e48b3ed2e397637df03abe1d3e832",
        "target": "[RepairTarget] ETGOLDToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2011266a6c9e48b3ed2e397637df03abe1d3e832",
        "target": "[RepairTarget] ETGOLDToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2044c97717a622b4d9462329db2497e69201623a",
        "target": "[RepairTarget] Lottery4:buyTickets:95\nCODE: uint random_number = uint(block.blockhash(block.number-seed))%5 + 1\nOPERATION: uint(block.blockhash(block.number-seed))%5 [+] 1\nSSA: TMP_35 [+] 1 --> TMP_36\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2044c97717a622b4d9462329db2497e69201623a",
        "target": "[RepairTarget] Lottery4:buyTickets:95\nCODE: uint random_number = uint(block.blockhash(block.number-seed))%5 + 1\nOPERATION: block.number [-] seed\nSSA: block.number [-] seed_5 --> TMP_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2046f6c27e93a3c9d7780c834a067dee572efa20",
        "target": "[RepairTarget] ScatCoin:transferFrom:61\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2046f6c27e93a3c9d7780c834a067dee572efa20",
        "target": "[RepairTarget] ScatCoin:transfer:33\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x2054a15c6822a722378d13c4e4ea85365e46e50b",
        "target": "[RepairTarget] EIP20:transferFrom:80\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2066a2e0cd7f19589f582e2fc9af9669cc9e02f1",
        "target": "[RepairTarget] SetherToken:transferFrom:114\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2075d158924f5030aece55179848c2bd7ec5833f",
        "target": "[RepairTarget] AddressLottery:forceReseed:81\nCODE: s.component4 = tx.gasprice * 7\nOPERATION: tx.gasprice [*] 7\nSSA: tx.gasprice [*] 7 --> TMP_25\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x21929a10fb3d093bbd1042626be5bf34d401babc",
        "target": "[RepairTarget] EFTToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x21929a10fb3d093bbd1042626be5bf34d401babc",
        "target": "[RepairTarget] EFTToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x21d3523ea017744c1777c89b7448b3417608c5c8",
        "target": "[RepairTarget] UBTCCrowdsale:buyTokens:92\nCODE: msg.value > 1 finney * MAXfinney\nOPERATION: 1 finney [*] MAXfinney\nSSA: 1000000000000000 [*] MAXfinney_1 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x21d3523ea017744c1777c89b7448b3417608c5c8",
        "target": "[RepairTarget] UBTCCrowdsale:transferFrom:176\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_19 [-] _value_1 --> REF_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x224220cd7c122a2c2ba47334143aaeab56632191",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x225e95b196d9739efa22e138bc1dd0b35bc4c983",
        "target": "[RepairTarget] TonalQuantum:buy:240\nCODE: balances[msg.sender] = balances[msg.sender] + amount\nOPERATION: balances[msg.sender] [+] amount\nSSA: REF_97 [+] amount_1 --> TMP_87\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x22981f4f8424fb633973f3e26540df830bd7b4f2",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x22981f4f8424fb633973f3e26540df830bd7b4f2",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x229fdd884873473613d4be8220867950ad20106a",
        "target": "[RepairTarget] StandardToken:transfer:22\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_5 [+] _value_1 --> REF_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x229fdd884873473613d4be8220867950ad20106a",
        "target": "[RepairTarget] StandardToken:transferFrom:35\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x22d1755515bef4afd277d8acd42adbac49c77d43",
        "target": "[RepairTarget] ZeroXEth:enableWhitelist:115\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x22d1755515bef4afd277d8acd42adbac49c77d43",
        "target": "[RepairTarget] ZeroXEth:disableWhitelist:121\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x22d471ba2aafa06f829b491e83ee45834db01832",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x22d471ba2aafa06f829b491e83ee45834db01832",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x22fd67695550a300f1f82a306569797109965127",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x22fd67695550a300f1f82a306569797109965127",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2300ae45666d9b1bb6a0208a77ce46ab996316a9",
        "target": "[RepairTarget] Gath:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4",
        "target": "[RepairTarget] PrivateBank:Deposit:22\nCODE: balances[msg.sender]+=msg.value\nOPERATION: balances[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x24102059abd9183f81613040030d2040dfa36b58",
        "target": "[RepairTarget] StandardToken:transferFrom:82\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x25926eff952bdcd3cb395a5614ab5094474b2dba",
        "target": "[RepairTarget] EXPERIMENTAL_ETH_AUCTION:ContributionToPrizeFund:21\nCODE: PrizeFund+=msg.value\nOPERATION: PrizeFund [+=] msg.value\nSSA: PrizeFund_1 [+] msg.value --> PrizeFund_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x25c08bb7aa204d221288d9739899f4edf96f5fba",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:60\nCODE: uint tokenAmount = amount / price\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x25c08bb7aa204d221288d9739899f4edf96f5fba",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:58\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x25c08bb7aa204d221288d9739899f4edf96f5fba",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:59\nCODE: currentBalance += amount\nOPERATION: currentBalance [+=] amount\nSSA: currentBalance_1 [+] amount_1 --> currentBalance_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x263c618480dbe35c300d8d5ecda19bbb986acaed",
        "target": "[RepairTarget] StandardToken:transfer:24\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x264063f49a36c2355af84faa744627bf69e81cef",
        "target": "[RepairTarget] SanqiToken:_transfer:91\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2659c615ca00db4838f4f9fd473ec5178bfb5fae",
        "target": "[RepairTarget] ToMarineCdsTok20221205I:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x2659c615ca00db4838f4f9fd473ec5178bfb5fae",
        "target": "[RepairTarget] ToMarineCdsTok20221205I:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x2659c615ca00db4838f4f9fd473ec5178bfb5fae",
        "target": "[RepairTarget] ToMarineCdsTok20221205I:transfer:48\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2659c615ca00db4838f4f9fd473ec5178bfb5fae",
        "target": "[RepairTarget] ToMarineCdsTok20221205I:transferFrom:60\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2708ff1f06c99932ac099422031da3691c625aed",
        "target": "[RepairTarget] AXLToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2708ff1f06c99932ac099422031da3691c625aed",
        "target": "[RepairTarget] AXLToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x276d14c789c348242dea6addb21fda668926f7e8",
        "target": "[RepairTarget] StandardToken:transferFrom:60\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2771ef07defb079c309542e11219d97b562ab6b0",
        "target": "[RepairTarget] Avalanche:leakEther:177\nCODE: now-lastleak[msg.sender] < 1 days\nOPERATION: now [-] lastleak[msg.sender]\nSSA: now [-] REF_46 --> TMP_63\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2771ef07defb079c309542e11219d97b562ab6b0",
        "target": "[RepairTarget] Avalanche:leakEther:186\nCODE: uint amount = goo[msg.sender] / uint(getAddressLevel())\nOPERATION: goo[msg.sender] [/] uint(getAddressLevel())\nSSA: REF_47 [/] TMP_68 --> TMP_69\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2771ef07defb079c309542e11219d97b562ab6b0",
        "target": "[RepairTarget] Avalanche:getAddressLevel:228\nCODE: bytes1 c = bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))))\nOPERATION: 8 [*] (19 - i)\nSSA: 8 [*] TMP_84 --> TMP_85\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2771ef07defb079c309542e11219d97b562ab6b0",
        "target": "[RepairTarget] AVL:transferFrom:59\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2771ef07defb079c309542e11219d97b562ab6b0",
        "target": "[RepairTarget] Avalanche:getAddressLevel:228\nCODE: bytes1 c = bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))))\nOPERATION: 19 [-] i\nSSA: 19 [-] i_2 --> TMP_84\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x28234d0874029b628328d1011e796bd0636ec648",
        "target": "[RepairTarget] UETHCrowdsale:buyTokens:92\nCODE: msg.value > 1 finney * MAXfinney\nOPERATION: 1 finney [*] MAXfinney\nSSA: 1000000000000000 [*] MAXfinney_1 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x28234d0874029b628328d1011e796bd0636ec648",
        "target": "[RepairTarget] UETHCrowdsale:transferFrom:176\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_19 [-] _value_1 --> REF_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2828d5ae572a3e87febad75323af24ec0a4f2eef",
        "target": "[RepairTarget] CryptoPlanets:purchasePlanet:56\nCODE: addressPlanetsCount[planets[_planetId].ownerAddress] = addressPlanetsCount[planets[_planetId].ownerAddress] - 1\nOPERATION: addressPlanetsCount[planets[_planetId].ownerAddress] [-] 1\nSSA: REF_10 [-] 1 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2858f2b0d94947962f93e4387d391467ebd72166",
        "target": "[RepairTarget] FLEX:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2887edac9deee0c6212c62012c93c0f7401fb6d8",
        "target": "[RepairTarget] RusalCdsTok20221212I:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x2887edac9deee0c6212c62012c93c0f7401fb6d8",
        "target": "[RepairTarget] RusalCdsTok20221212I:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x2887edac9deee0c6212c62012c93c0f7401fb6d8",
        "target": "[RepairTarget] RusalCdsTok20221212I:transfer:48\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2887edac9deee0c6212c62012c93c0f7401fb6d8",
        "target": "[RepairTarget] RusalCdsTok20221212I:transferFrom:60\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x28c00eb09b999e466de06988746f55758854ec23",
        "target": "[RepairTarget] SafeMath:mul:24\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x28e5fa624745b7c67cf1e8eb6291029ae07e012d",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x28e5fa624745b7c67cf1e8eb6291029ae07e012d",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2903caa1a39df0ab361f51236d040a4e1bf964c9",
        "target": "[RepairTarget] CBX:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2920e0b7d86ab76aa09bcddffedef081faaf6e2c",
        "target": "[RepairTarget] BloomToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2955f4a4cdc4a06ba31f3df5662db9b8149b9c7d",
        "target": "[RepairTarget] Petro:transfer:61\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2955f4a4cdc4a06ba31f3df5662db9b8149b9c7d",
        "target": "[RepairTarget] Petro:transferFrom:79\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x29c347b5482c71adbc505704073ca307c9aba360",
        "target": "[RepairTarget] LAB:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x29d1487bbbce6f3766db1d36a5eea93ca01a2a75",
        "target": "[RepairTarget] ChiPhiCoin:transferFrom:50\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2a7d19f2bfd99f46322b03c2d3fdc7b7756cae1a",
        "target": "[RepairTarget] CFNDToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2a7d19f2bfd99f46322b03c2d3fdc7b7756cae1a",
        "target": "[RepairTarget] CFNDToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2abe025a3514dbb4c5dac0fcf3a8f595d72bf352",
        "target": "[RepairTarget] BdpPriceStorage:appendPricePoints:132\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2af9a4864464feb6ff4364367366fcf15c562100",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2af9a4864464feb6ff4364367366fcf15c562100",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2b34ebda72bade6e6e91883ca67eb23484b045fb",
        "target": "[RepairTarget] kn0Token:calc:356\nCODE: z = (x / z + z) / 2\nOPERATION: x [/] z\nSSA: x_1 [/] z_2 --> TMP_116\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2b34ebda72bade6e6e91883ca67eb23484b045fb",
        "target": "[RepairTarget] kn0Token:calc:356\nCODE: z = (x / z + z) / 2\nOPERATION: x / z [+] z\nSSA: TMP_116 [+] z_2 --> TMP_117\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2b34ebda72bade6e6e91883ca67eb23484b045fb",
        "target": "[RepairTarget] kn0Token:calc:356\nCODE: z = (x / z + z) / 2\nOPERATION: (x / z + z) [/] 2\nSSA: TMP_117 [/] 2 --> TMP_118\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2bf36e414c52a9fd81e21a0ab5742dce750389d3",
        "target": "[RepairTarget] BankExToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2c9eb11db6b0dcb18fe8644003ee53f6b4588341",
        "target": "[RepairTarget] SimpleEthBank:deposit:28\nCODE: accountBalances[msg.sender] += msg.value\nOPERATION: accountBalances[msg.sender] [+=] msg.value\nSSA: REF_2 [+] msg.value --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2d1e75f35c863f7e86ad0de2d802206b883769b8",
        "target": "[RepairTarget] Crowdsale:fallback:51\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2d1e75f35c863f7e86ad0de2d802206b883769b8",
        "target": "[RepairTarget] Crowdsale:fallback:52\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2de0b799ae86c3cbc5c26c148681a45ed4f09b1e",
        "target": "[RepairTarget] SafeMath:mul:23\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2e0cc30a379c0d193eb5b1399c79391eb6983b61",
        "target": "[RepairTarget] TLCUSD:transfer:80\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2e0cc30a379c0d193eb5b1399c79391eb6983b61",
        "target": "[RepairTarget] TLCUSD:transferFrom:105\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2e9f2a3c66ffd47163b362987765fd8857b1f3f9",
        "target": "[RepairTarget] AZTToken:_transfer:38\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2e9f2a3c66ffd47163b362987765fd8857b1f3f9",
        "target": "[RepairTarget] AZTToken:_transfer:41\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_10 [+] REF_11 --> TMP_16\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2f7823aaf1ad1df0d5716e8f18e1764579f4abe6",
        "target": "[RepairTarget] EIP20:transferFrom:80\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2f9b6779c37df5707249eeb3734bbfc94763fbe2",
        "target": "[RepairTarget] ERC20:transfer:87\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2f9b6779c37df5707249eeb3734bbfc94763fbe2",
        "target": "[RepairTarget] ERC20:transferFrom:97\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2fee479b98bce54f7b6466146e24512d8272ee6f",
        "target": "[RepairTarget] MultiKeyDailyLimitWallet:getDailyCount:54\nCODE: (block.timestamp - lastWithdrawalTime[token]) >= 1 days\nOPERATION: block.timestamp [-] lastWithdrawalTime[token]\nSSA: block.timestamp [-] REF_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3003dc69d03227ccaace3142452a514a04a37d7f",
        "target": "[RepairTarget] SafeMath:add:7\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x301a0501c08e347b062b3c928fd4d0155f367855",
        "target": "[RepairTarget] WePowerToken:transferFrom:119\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x30281939b520a15cdadb509c94e491404af87385",
        "target": "[RepairTarget] CPCToken:_transfer:53\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x33af2f038c8b0dab2cba4aa7c16dfeee68f47d77",
        "target": "[RepairTarget] SupremeToken:transferFrom:56\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x33beef18d66cf68cb605333cc05af673252cbf4d",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x33beef18d66cf68cb605333cc05af673252cbf4d",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x33ddc60a8f2ca78dfe0d10acbe6a1bcb6dc282e1",
        "target": "[RepairTarget] RipplePro:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x342cdf3fbd50c1015d2d0918d5a3684cd48e56e3",
        "target": "[RepairTarget] Bitcoin_Biz:aidrop:104\nCODE: balances[addresses[i]] += 1250000000000000000000\nOPERATION: balances[addresses[i]] [+=] 1250000000000000000000\nSSA: REF_25 [+] 1250000000000000000000 --> REF_25\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x342cdf3fbd50c1015d2d0918d5a3684cd48e56e3",
        "target": "[RepairTarget] Bitcoin_Biz:aidrop:99\nCODE: require (balances[msg.sender] >= (addresses.length * 1250000000000000000000))\nOPERATION: addresses.length [*] 1250000000000000000000\nSSA: REF_21 [*] 1250000000000000000000 --> TMP_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x342cdf3fbd50c1015d2d0918d5a3684cd48e56e3",
        "target": "[RepairTarget] Bitcoin_Biz:transferFrom:69\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x353230862ae8ab6ca5dde592654acd6cdec1c1b2",
        "target": "[RepairTarget] BeeToken:transferFrom:116\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x353bb24916a3c65fbb44a178e7c0d0776798fc34",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: uint256 z = x + y\nOPERATION: x [+] y\nSSA: x_1 [+] y_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x36c3c8139068ddf43f84ebbba43ce18b7c999cf7",
        "target": "[RepairTarget] StandardToken:transferFrom:95\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x36eafcf412718774440ed934a81f3e6f90cdd54c",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x372bffb8d0a03ecfd680f4c4dab7af2ac22aaf71",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x372bffb8d0a03ecfd680f4c4dab7af2ac22aaf71",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3748144b9ac1aeb23f95ac60decb2d679cb1f1cf",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3748144b9ac1aeb23f95ac60decb2d679cb1f1cf",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x377748ddc51b3075b84500a6ed95d260a102d85f",
        "target": "[RepairTarget] TuneToken:_transfer:21\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x377748ddc51b3075b84500a6ed95d260a102d85f",
        "target": "[RepairTarget] TuneToken:_transfer:25\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3784d6ddfd11974b288b80a2b169fb69a8ff0ec7",
        "target": "[RepairTarget] VNPTTech:enableWhitelist:115\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3784d6ddfd11974b288b80a2b169fb69a8ff0ec7",
        "target": "[RepairTarget] VNPTTech:disableWhitelist:121\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x37cd86aeb760322a47ee3fb7e27aa6823dc5d973",
        "target": "[RepairTarget] StarOfDavid:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x37d56175a3468669033c8adb312a7201ac6d2dce",
        "target": "[RepairTarget] SafeMath:mul:10\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3850ec5540f3aae1bbd89d5f33d4a40ce8426567",
        "target": "[RepairTarget] StandardToken:transfer:21\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3850ec5540f3aae1bbd89d5f33d4a40ce8426567",
        "target": "[RepairTarget] StandardToken:transferFrom:32\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x38a19ba829f192a30ec7e03cda1368c50dad9785",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x38a19ba829f192a30ec7e03cda1368c50dad9785",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x38e308c4ac50fd6c31c5f53d7b25f25116d80a3a",
        "target": "[RepairTarget] ScriniumPresale:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x39811d71d6d64552e532c165f37c4d09132fd4e1",
        "target": "[RepairTarget] Crowdsale:fallback:51\nCODE: tokenReward.transfer(msg.sender, (amount * 10 ** 18) / price)\nOPERATION: (amount * 10 ** 18) [/] price\nSSA: TMP_10 [/] price_2 --> TMP_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x39811d71d6d64552e532c165f37c4d09132fd4e1",
        "target": "[RepairTarget] Crowdsale:fallback:51\nCODE: tokenReward.transfer(msg.sender, (amount * 10 ** 18) / price)\nOPERATION: amount [*] 10 ** 18\nSSA: amount_1 [*] TMP_9 --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x39811d71d6d64552e532c165f37c4d09132fd4e1",
        "target": "[RepairTarget] Crowdsale:fallback:50\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x39f73ec09e135bbf5c7f38875db6093115866c96",
        "target": "[RepairTarget] EZTanks:buyTank:344\nCODE: uint256 tournamentProceeds = (price * tournamentTaxRate) / 100\nOPERATION: price [*] tournamentTaxRate\nSSA: price_1 [*] tournamentTaxRate_4 --> TMP_123\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x39f73ec09e135bbf5c7f38875db6093115866c96",
        "target": "[RepairTarget] EZTanks:buyTank:344\nCODE: uint256 tournamentProceeds = (price * tournamentTaxRate) / 100\nOPERATION: (price * tournamentTaxRate) [/] 100\nSSA: TMP_123 [/] 100 --> TMP_124\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3a92bd396aef82af98ebc0aa9030d25a23b11c6b",
        "target": "[RepairTarget] StandardToken:transferFrom:91\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3b2fb396506242938d04302b00dfe4472c3f83c5",
        "target": "[RepairTarget] MOVE:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3b7d2a283f5e76b5978c20c4bf578defdefa53ea",
        "target": "[RepairTarget] BRV:_transfer:34\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3b7d2a283f5e76b5978c20c4bf578defdefa53ea",
        "target": "[RepairTarget] BRV:_transfer:38\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3b95e7496f55ecfd4d6db009879e3a8ce684940b",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3ceef257124a5af216144574a3725f75fc487fe3",
        "target": "[RepairTarget] Mics:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3d008b6eb0ee3453e0862517f50e9597b0abd85b",
        "target": "[RepairTarget] FomoMasterCoin:fallback:68\nCODE: uint256 amount = msg.value * 1000\nOPERATION: msg.value [*] 1000\nSSA: msg.value [*] 1000 --> TMP_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3d01bb49a9a16acb56d2f7f010f0a35b9a168a88",
        "target": "[RepairTarget] subsistanceToken:fallback:250\nCODE: tokens = msg.value * 100000000000\nOPERATION: msg.value [*] 100000000000\nSSA: msg.value [*] 100000000000 --> TMP_63\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3db5f943bfb5f920324d7afb137b03d13e5d5ce3",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3e41c0eb7026914ef15b4aa5fc25f5570a1811bb",
        "target": "[RepairTarget] BasicToken:batchTransfer:96\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3f1db1493f18764022bdbd0ce52b4c7f232ed029",
        "target": "[RepairTarget] BasicToken:batchTransfer:96\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3f34f89aa02355d9dcfcbfd4adcbbfb135a8b4fd",
        "target": "[RepairTarget] StandardToken:transfer:42\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f34f89aa02355d9dcfcbfd4adcbbfb135a8b4fd",
        "target": "[RepairTarget] StandardToken:transfer:43\nCODE: free_balances[_to] += _value\nOPERATION: free_balances[_to] [+=] _value\nSSA: REF_5 [+] _value_1 --> REF_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f34f89aa02355d9dcfcbfd4adcbbfb135a8b4fd",
        "target": "[RepairTarget] StandardToken:transferFrom:54\nCODE: free_balances[_to] += _value\nOPERATION: free_balances[_to] [+=] _value\nSSA: REF_11 [+] _value_1 --> REF_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f34f89aa02355d9dcfcbfd4adcbbfb135a8b4fd",
        "target": "[RepairTarget] StandardToken:transferFrom:55\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3f34f89aa02355d9dcfcbfd4adcbbfb135a8b4fd",
        "target": "[RepairTarget] StandardToken:transferFrom:57\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3f407351f74b1340c3f507dc334dfc8cfb2b7e97",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: uint256 z = x + y\nOPERATION: x [+] y\nSSA: x_1 [+] y_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f9ad22a9c2a52bda2a0811d1080fc9cd23c6c46",
        "target": "[RepairTarget] IBITToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3f9ad22a9c2a52bda2a0811d1080fc9cd23c6c46",
        "target": "[RepairTarget] IBITToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3fe2a71f838a4ef4320e46bae7a7abcde99732d7",
        "target": "[RepairTarget] ERC20:_transfer:35\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3fe2a71f838a4ef4320e46bae7a7abcde99732d7",
        "target": "[RepairTarget] ERC20:_transfer:40\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x409ec1fcd524480b3cadf4331af21a2cb3db68c9",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x41021442eab722c0a52c61738550faabfd0fca4e",
        "target": "[RepairTarget] Crowdsale:fallback:98\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_2 [+] amount_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x41021442eab722c0a52c61738550faabfd0fca4e",
        "target": "[RepairTarget] Crowdsale:fallback:99\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_3 [+] amount_1 --> amountRaised_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x41ab75435668919bb507f871dd01e9762c2d173a",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: uint256 z = x + y\nOPERATION: x [+] y\nSSA: x_1 [+] y_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x41ca1f6ac82f2bfdd828b1c54183bcb6bd4a4a3b",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x42b03689fbaa9635edbc10ad1fdc7ea5feefbb70",
        "target": "[RepairTarget] BitDegreeToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x42f4b08940391d3cf51e1f929407fd5f0d012589",
        "target": "[RepairTarget] EtherChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x430ce9d8331eb23d945de0a910add9e8f8877729",
        "target": "[RepairTarget] Avarice:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x430ce9d8331eb23d945de0a910add9e8f8877729",
        "target": "[RepairTarget] Avarice:transferFrom:100\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x43aec72513d9f21e2aee98aa4c821969b8dd8585",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x43aec72513d9f21e2aee98aa4c821969b8dd8585",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x43b4d9e3a82a443e4bfb25470e1dcd12d6853f0b",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x440465f9d69246968a4657eb5f0704de893b7b22",
        "target": "[RepairTarget] FixedSupplyToken:transfer:79\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x440465f9d69246968a4657eb5f0704de893b7b22",
        "target": "[RepairTarget] FixedSupplyToken:transferFrom:104\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x440c906dbfb148a7348970dd6df603dd4eb59c08",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x447b0501c1ea31c2b2999687cd315d2306a8e0cb",
        "target": "[RepairTarget] AgriculturalSystemManagement:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x44deb858c0398ce561f61704d090005610fadc21",
        "target": "[RepairTarget] VeriAequis:_transfer:52\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4525e75ce3d340eee093fbae86637d9aee4e2b3d",
        "target": "[RepairTarget] ArtyCoin:_transfer:178\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_35 [+] REF_36 --> TMP_79\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x457ca82795ae2e64337fea3196b237f54f3d9d17",
        "target": "[RepairTarget] SafeMath:mul:22\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x45ff8301cef74017e8c08f55a201863abafa82a7",
        "target": "[RepairTarget] SafeMath:mul:35\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x463f235748bc7862deaa04d85b4b16ac8fafef39",
        "target": "[RepairTarget] PrivateBank:Deposit:29\nCODE: balances[msg.sender]+=msg.value\nOPERATION: balances[msg.sender] [+=] msg.value\nSSA: REF_1 [+] msg.value --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4801fb60a6b0fd6d378d14ee51e64a3fc3f4e718",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x481bbd6b075394190cc88e66cdc8a1d0a8a6f169",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x48df4e0296f908ceab0428a5182d19b31fc037d6",
        "target": "[RepairTarget] FRV:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4916f730a7b60c56bcfc8b79dd29ba1c0f244228",
        "target": "[RepairTarget] WEAToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4916f730a7b60c56bcfc8b79dd29ba1c0f244228",
        "target": "[RepairTarget] WEAToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4a1683e92306d1b3e069d298f227fe396c602183",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4a1683e92306d1b3e069d298f227fe396c602183",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4a6dc81e608880e1624cd1b8f2679d092f30b99f",
        "target": "[RepairTarget] FLIP:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4aae3a2da70c499797edf4a4139b68454ec07883",
        "target": "[RepairTarget] JOUL3SToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4aae3a2da70c499797edf4a4139b68454ec07883",
        "target": "[RepairTarget] JOUL3SToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4ad02bf71d9fcf86bd155fb1d7bf891e0cd9b31d",
        "target": "[RepairTarget] C5PMToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4ad02bf71d9fcf86bd155fb1d7bf891e0cd9b31d",
        "target": "[RepairTarget] C5PMToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4b43d8a35257f42a2d0d4d774409208efc31b406",
        "target": "[RepairTarget] Project512Foundation:_transfer:52\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4ce6b8c58df45b2d3976737ffb98d942f82300b4",
        "target": "[RepairTarget] ERC20:transfer:87\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4ce6b8c58df45b2d3976737ffb98d942f82300b4",
        "target": "[RepairTarget] ERC20:transferFrom:97\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4cfb59bdfb47396e1720f7ff1c1e37071d927112",
        "target": "[RepairTarget] ETXToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4cfb59bdfb47396e1720f7ff1c1e37071d927112",
        "target": "[RepairTarget] ETXToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4dcadd9adfd450c2ef997bb71888c2995e2d33a0",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4f800a45631f2c74ef2d37201adf417b3b90ad3c",
        "target": "[RepairTarget] HormitechToken:_updateProfit:157\nCODE: profit = profit - _increment\nOPERATION: profit [-] _increment\nSSA: profit_1 [-] _increment_1 --> TMP_62\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4fdc2078d8bc92e1ee594759d7362f94b60b1a3d",
        "target": "[RepairTarget] OpenAddressLottery:forceReseed:92\nCODE: s.component4 = tx.gasprice * 7\nOPERATION: tx.gasprice [*] 7\nSSA: tx.gasprice [*] 7 --> TMP_34\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x503430838dcf89a8121b68956bb07fd2370f4e5d",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x503430838dcf89a8121b68956bb07fd2370f4e5d",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x50377c3314581a639f00bd5ba42367a6b65bced7",
        "target": "[RepairTarget] DreamTeamToken:transferFrom:114\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x505743df6a349e1c39fd4727fd7c9f49f736e39e",
        "target": "[RepairTarget] HARDToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x505743df6a349e1c39fd4727fd7c9f49f736e39e",
        "target": "[RepairTarget] HARDToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x508f36baac673fe9e213e69f0f75cbcfeb015917",
        "target": "[RepairTarget] MKT:_transfer:111\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x511c1343c41900dbd64ddbac04635f4ef25177c8",
        "target": "[RepairTarget] NothingToken:fallback:127\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_26 [+] tokensIssued_3 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x511c1343c41900dbd64ddbac04635f4ef25177c8",
        "target": "[RepairTarget] NothingToken:fallback:126\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_3 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x511c1343c41900dbd64ddbac04635f4ef25177c8",
        "target": "[RepairTarget] NothingToken:transferFrom:63\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x511c1343c41900dbd64ddbac04635f4ef25177c8",
        "target": "[RepairTarget] NothingToken:transfer:35\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x51489a328c9bdfcb67cce77c0d87be54b5f8d172",
        "target": "[RepairTarget] UTrustToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x51da145cd7b6e6bd8b334d6a5e663dee1d8937fa",
        "target": "[RepairTarget] Vitaluck:manuallyResetGame:193\nCODE: currentJackpot = currentJackpot - JackpotWon\nOPERATION: currentJackpot [-] JackpotWon\nSSA: currentJackpot_9 [-] JackpotWon_1 --> TMP_70\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x51da145cd7b6e6bd8b334d6a5e663dee1d8937fa",
        "target": "[RepairTarget] Vitaluck:Play:114\nCODE: uint256 MsgValue10Percent = msg.value / 10\nOPERATION: msg.value [/] 10\nSSA: msg.value [/] 10 --> TMP_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x51e4e00e3e019e58fc0b8cc8c6490a2d28efbf44",
        "target": "[RepairTarget] SanityPools:contribute:152\nCODE: pool.pool_eth_value += msg.value\nOPERATION: pool.pool_eth_value [+=] msg.value\nSSA: REF_54 [+] msg.value --> REF_54\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x531d89649690f570347aea8eba1461b640c1346e",
        "target": "[RepairTarget] Bitcoinforce:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x531d89649690f570347aea8eba1461b640c1346e",
        "target": "[RepairTarget] Bitcoinforce:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x53227aaa48aa3342ccd58e5c5976a8f53f055166",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x53562419e435cbae65d73e7eae2723a43e6cd887",
        "target": "[RepairTarget] BXXToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x53562419e435cbae65d73e7eae2723a43e6cd887",
        "target": "[RepairTarget] BXXToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5374af6f08c0e6aeff2deab62972bff2ab6ed226",
        "target": "[RepairTarget] BTYToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5374af6f08c0e6aeff2deab62972bff2ab6ed226",
        "target": "[RepairTarget] BTYToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x53caa71f4a8a2617592fd55f0001a0948a16ec67",
        "target": "[RepairTarget] TOAB:_transfer:24\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x53caa71f4a8a2617592fd55f0001a0948a16ec67",
        "target": "[RepairTarget] TOAB:_transfer:28\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x54139aa6fd3a986b83b684d1a928fc79e3f35850",
        "target": "[RepairTarget] BubbleCoin:_transfer:30\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x54139aa6fd3a986b83b684d1a928fc79e3f35850",
        "target": "[RepairTarget] BubbleCoin:_transfer:37\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x542a900357c9638ad6e944a57072c5d01f1c1ea7",
        "target": "[RepairTarget] Love:proposeTo:63\nCODE: proposeCount--\nOPERATION: [--] proposeCount\nSSA: proposeCount_1 [-] 1 --> proposeCount_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x54318a379935d545eb8e474a191e11faac5a46e8",
        "target": "[RepairTarget] KKToken:transfer:70\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x54318a379935d545eb8e474a191e11faac5a46e8",
        "target": "[RepairTarget] KKToken:transferFrom:87\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x56fc1a80912e6b9629c9a9ee3790ccce2408d3c0",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5925f67d2767d937f47141dac24166b469558222",
        "target": "[RepairTarget] OLXAToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5925f67d2767d937f47141dac24166b469558222",
        "target": "[RepairTarget] OLXAToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x593da2b65eb62bb1e1b5f1e3bbdfb0395060e1a8",
        "target": "[RepairTarget] SafeMath:mul:22\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x594120039687ddaab50c4ab03bada20eb4b218f6",
        "target": "[RepairTarget] GMVToken:_transfer:48\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5b18bf749d3015640d0301325415c8f95ea087ac",
        "target": "[RepairTarget] AdvancedArtificialIntelligenceSafetyDefense:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5b23fa18483c52e36724abf92c6b38296539a003",
        "target": "[RepairTarget] TokenERC20:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5c93583bd77beaab16b0b334ec87e37069152092",
        "target": "[RepairTarget] StandardToken:transfer:21\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5c93583bd77beaab16b0b334ec87e37069152092",
        "target": "[RepairTarget] StandardToken:transferFrom:32\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5da42ed34fa685af8743752707fbc1e04ee6329e",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5da42ed34fa685af8743752707fbc1e04ee6329e",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5dd03e3965806ed6be628f41d6844eeaa01f7f8d",
        "target": "[RepairTarget] INDToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5dd03e3965806ed6be628f41d6844eeaa01f7f8d",
        "target": "[RepairTarget] INDToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5e58c1e8ffe57a86098e66ee6a1764e41ebf2c4d",
        "target": "[RepairTarget] GIFT_CARD:Put:11\nCODE: unlockTime = now+_unlockTime\nOPERATION: now [+] _unlockTime\nSSA: now [+] _unlockTime_1 --> TMP_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5e97a458f3d5794d3145cb863c93658a04cee75c",
        "target": "[RepairTarget] Polyion:transferFrom:131\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_15 [-] _amount_1 --> REF_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5e97a458f3d5794d3145cb863c93658a04cee75c",
        "target": "[RepairTarget] Polyion:transfer:102\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_7 [+] _amount_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5f9d86fa0454ffd6a59ccc485e689b0a832313db",
        "target": "[RepairTarget] XDToken:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5fa1ea99eb3acc1f9e84cf28fde6431b8fdc9dc0",
        "target": "[RepairTarget] UselessAirdroppedToken:enableWhitelist:117\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5fc8582bb390e1232dc50908cd35b38f540c72fd",
        "target": "[RepairTarget] BitcoinQuick:transferFrom:46\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_11 [-] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x60626305eec1477bab0b7a8dbd6036cf23d00494",
        "target": "[RepairTarget] TOSKYTokenERC20:_transfer:89\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x61b685baec2da4d0b942d47cd1932007ab3cec59",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x61b685baec2da4d0b942d47cd1932007ab3cec59",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x629c09f80348350216f45934ed9713ed969ce570",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6324d9d0a23f5ddba165bf8cc61da455350895f2",
        "target": "[RepairTarget] AddressLottery:forceReseed:67\nCODE: s.component4 = tx.gasprice * 13\nOPERATION: tx.gasprice [*] 13\nSSA: tx.gasprice [*] 13 --> TMP_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x63f6f13e4bf0ba92ea3ff5aa40769fb4533da3bc",
        "target": "[RepairTarget] TokenERC20:_transfer:48\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6435e117aed259a39cd5032773653c52c160a647",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6435e117aed259a39cd5032773653c52c160a647",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x647972c6a5bd977db85dc364d18cc05d3db70378",
        "target": "[RepairTarget] TBEToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x647972c6a5bd977db85dc364d18cc05d3db70378",
        "target": "[RepairTarget] TBEToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x64f4ab7fd6fdd98783768c36fd01a13c8a60f045",
        "target": "[RepairTarget] TCNToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x64f4ab7fd6fdd98783768c36fd01a13c8a60f045",
        "target": "[RepairTarget] TCNToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x650734bfd0465b7c6cd2932ea555e721308fd0b3",
        "target": "[RepairTarget] AddressLotteryV2:forceReseed:85\nCODE: s.component4 = tx.gasprice * 7\nOPERATION: tx.gasprice [*] 7\nSSA: tx.gasprice [*] 7 --> TMP_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x65811ddbca75ea040b89777bd5747549b77d1097",
        "target": "[RepairTarget] Spqmcoin:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x658d45e88e62ac0efcbdf5ddf222b1bb51015851",
        "target": "[RepairTarget] QNC:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6604c5f48cd5ee85b56daa678e7531db869c5ea6",
        "target": "[RepairTarget] BdpPriceStorage:appendPricePoints:142\nCODE: pricePoints[pricePointsLength++] = _pricePoints[i]\nOPERATION: [++] pricePointsLength\nSSA: pricePointsLength_4 [+] 1 --> pricePointsLength_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x66a99cfc8abd94f33a85e33055adbe58cf7a5aac",
        "target": "[RepairTarget] TILELOYALTY:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x66e94f63c5f0af0449f657f01acf5ad794650834",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6761661c41774cdec8c4b38198ced63c7e7d3bc0",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6761661c41774cdec8c4b38198ced63c7e7d3bc0",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x683eb7e0809790b1af525fb38dee8ce8c9bfb5f3",
        "target": "[RepairTarget] StandardToken:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x68f9594fdd9bccdea1f787316b7881420c02306e",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x69bfbf000bd39444af2efba733829b04211252bc",
        "target": "[RepairTarget] NoPainNoGain:Play:15\nCODE: rand(msg.sender) * n < rand(Owner) && msg.value >= this.balance && msg.value > 0.25 ether\nOPERATION: rand(msg.sender) [*] n\nSSA: TMP_3 [*] n_1 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600",
        "target": "[RepairTarget] GimliToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x69d94dc74dcdccbadec877454a40341ecac34a7c",
        "target": "[RepairTarget] IRideToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x69d94dc74dcdccbadec877454a40341ecac34a7c",
        "target": "[RepairTarget] IRideToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6a291d52cdb5c2afc575b0d98fe79bc2d7b08f34",
        "target": "[RepairTarget] DPToken:_transfer:30\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6a291d52cdb5c2afc575b0d98fe79bc2d7b08f34",
        "target": "[RepairTarget] DPToken:_transfer:34\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6a2e025f43ca4d0d3c61bdee85a8e37e81880528",
        "target": "[RepairTarget] test:forceReseed:77\nCODE: s.component4 = tx.gasprice * 7\nOPERATION: tx.gasprice [*] 7\nSSA: tx.gasprice [*] 7 --> TMP_28\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6b31a898f7e711b323a6212eac4ae250e0d6624f",
        "target": "[RepairTarget] EthLendToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6b963f7b38980f5fbbd129fe98059eb2144076a7",
        "target": "[RepairTarget] BLV:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6bcfcc7035dbe589e9c0c91260772630ce92f25b",
        "target": "[RepairTarget] TOMAToken:_transfer:99\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6bcfcc7035dbe589e9c0c91260772630ce92f25b",
        "target": "[RepairTarget] TOMAToken:_transfer:111\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6c61f6343b7420e142fb05f8b86afed3179eb0f0",
        "target": "[RepairTarget] StandardToken:transferFrom:70\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6cabf1b590ee8daa30a1c76ff5dd21284d8681d8",
        "target": "[RepairTarget] HCHToken:mintToken:164\nCODE: totalSupply += mintedAmount\nOPERATION: totalSupply [+=] mintedAmount\nSSA: totalSupply_6 [+] mintedAmount_2 --> totalSupply_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6cec5ecfe573e0903edc467c4ed75f99bade6dc7",
        "target": "[RepairTarget] Bgc:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6d026901a557ae0309c15594176a8203fc95e23e",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6d026901a557ae0309c15594176a8203fc95e23e",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6ddcc353122f36f6976baadd5ef62e56f39dd960",
        "target": "[RepairTarget] PODSSale:fallback:32\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6ddcc353122f36f6976baadd5ef62e56f39dd960",
        "target": "[RepairTarget] PODSSale:fallback:34\nCODE: tokenReward.transfer(msg.sender, amount * price)\nOPERATION: amount [*] price\nSSA: amount_1 [*] price_2 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6e45155b50ffdb802872830613b745b156922b20",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6f25248358e6354306ca0bc35388bd890e6a4e38",
        "target": "[RepairTarget] Ctchain:_transfer:111\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6f540c6c815ac073aa903cf10336509b95993705",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6f540c6c815ac073aa903cf10336509b95993705",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6fc2a418d752e4b26dc372ccd766696f9c462e30",
        "target": "[RepairTarget] HTG:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6fdfce60998725f4cfb4cc57505a3abdbb6d0646",
        "target": "[RepairTarget] SelfKeyToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7095e151abd19e8c99abdfb4568f675f747f97f6",
        "target": "[RepairTarget] LVRToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7095e151abd19e8c99abdfb4568f675f747f97f6",
        "target": "[RepairTarget] LVRToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x70c4949d483166abefb2b4b2be78e338cd8b2c40",
        "target": "[RepairTarget] FrikandelToken:transfer:108\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_33 [+] _value_1 --> REF_33\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x71480498a6ed411dfef39f825aa1f900a8ebdf53",
        "target": "[RepairTarget] LenderBot:transfer:97\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x71480498a6ed411dfef39f825aa1f900a8ebdf53",
        "target": "[RepairTarget] LenderBot:transferFrom:112\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x71c5c4f6752cc5ebac4f49fb7012c1c7cc1dd1a2",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x71c5c4f6752cc5ebac4f49fb7012c1c7cc1dd1a2",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7275f61c3abfba3596ae71f7128bdc3b0fc01fa9",
        "target": "[RepairTarget] SignalsSociety:acceptMembership:107\nCODE: balances[owner] += price - comission\nOPERATION: price [-] comission\nSSA: price_1 [-] comission_1 --> TMP_45\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7275f61c3abfba3596ae71f7128bdc3b0fc01fa9",
        "target": "[RepairTarget] SignalsSociety:acceptMembership:107\nCODE: balances[owner] += price - comission\nOPERATION: balances[owner] [+=] price - comission\nSSA: REF_15 [+] TMP_45 --> REF_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7275f61c3abfba3596ae71f7128bdc3b0fc01fa9",
        "target": "[RepairTarget] SignalsSociety:acceptMembership:110\nCODE: balances[owner] += price\nOPERATION: balances[owner] [+=] price\nSSA: REF_16 [+] price_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7371b37a352903bc62cf8a26e8509fd5a3bab98d",
        "target": "[RepairTarget] WorldWarFree:transferFrom:58\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x73bca6342cacfdb105556f43c1f40a84695932db",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x73eb144dcc349bc97cdf5d14377e1d8d151d2c86",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x73eb144dcc349bc97cdf5d14377e1d8d151d2c86",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x741f1923974464efd0aa70e77800ba5d9ed18902",
        "target": "[RepairTarget] OpenAddressLottery:forceReseed:88\nCODE: s.component4 = tx.gasprice * 7\nOPERATION: tx.gasprice [*] 7\nSSA: tx.gasprice [*] 7 --> TMP_33\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x742b41ebc3cf0c5576ad29960a92c7b25b3052e8",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:58\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x742b41ebc3cf0c5576ad29960a92c7b25b3052e8",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:60\nCODE: tokenReward.transfer(msg.sender, (amount / price) * 1 ether)\nOPERATION: (amount / price) [*] 1 ether\nSSA: TMP_11 [*] 1000000000000000000 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x742b41ebc3cf0c5576ad29960a92c7b25b3052e8",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:60\nCODE: tokenReward.transfer(msg.sender, (amount / price) * 1 ether)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x742b41ebc3cf0c5576ad29960a92c7b25b3052e8",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:59\nCODE: currentBalance += amount\nOPERATION: currentBalance [+=] amount\nSSA: currentBalance_1 [+] amount_1 --> currentBalance_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x745fa4002332c020f6a05b3fe04bccf060e36dd3",
        "target": "[RepairTarget] QTX:emission:73\nCODE: balanceOf[owner] += _value\nOPERATION: balanceOf[owner] [+=] _value\nSSA: REF_1 [+] _value_2 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x745fa4002332c020f6a05b3fe04bccf060e36dd3",
        "target": "[RepairTarget] QTX:emission:74\nCODE: totalSupply += _value\nOPERATION: totalSupply [+=] _value\nSSA: totalSupply_3 [+] _value_2 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x745fa4002332c020f6a05b3fe04bccf060e36dd3",
        "target": "[RepairTarget] QTX:_transfer:92\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x745fa4002332c020f6a05b3fe04bccf060e36dd3",
        "target": "[RepairTarget] QTX:burnWithDecimals:187\nCODE: balanceOf[msg.sender] -= _value\nOPERATION: balanceOf[msg.sender] [-=] _value\nSSA: REF_21 [-] _value_2 --> REF_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x75189bb6accb9732079e768a6202dc2dd84b63d2",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7529a74748c9a737a387708cdd8eb610cf48f918",
        "target": "[RepairTarget] TeslaCdsTok20221205I:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x7529a74748c9a737a387708cdd8eb610cf48f918",
        "target": "[RepairTarget] TeslaCdsTok20221205I:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x7529a74748c9a737a387708cdd8eb610cf48f918",
        "target": "[RepairTarget] TeslaCdsTok20221205I:transfer:48\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7529a74748c9a737a387708cdd8eb610cf48f918",
        "target": "[RepairTarget] TeslaCdsTok20221205I:transferFrom:60\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x753e7389ecc2566264587522a3e96e12d7a442c9",
        "target": "[RepairTarget] BKKToken:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x75e13520fc29d0bcdd21da14ed693563091ff0fc",
        "target": "[RepairTarget] CryptoStars:buyStar:245\nCODE: uint amountowner = msg.value*3/100\nOPERATION: msg.value [*] 3\nSSA: msg.value [*] 3 --> TMP_60\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x75e13520fc29d0bcdd21da14ed693563091ff0fc",
        "target": "[RepairTarget] CryptoStars:buyStar:245\nCODE: uint amountowner = msg.value*3/100\nOPERATION: msg.value*3 [/] 100\nSSA: TMP_60 [/] 100 --> TMP_61\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7615882d2c0dba1913623c5a4c50fc345723d013",
        "target": "[RepairTarget] Lottery:buyTickets:95\nCODE: uint random_number = uint(block.blockhash(block.number-seed))%5 + 1\nOPERATION: uint(block.blockhash(block.number-seed))%5 [+] 1\nSSA: TMP_35 [+] 1 --> TMP_36\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7615882d2c0dba1913623c5a4c50fc345723d013",
        "target": "[RepairTarget] Lottery:buyTickets:95\nCODE: uint random_number = uint(block.blockhash(block.number-seed))%5 + 1\nOPERATION: block.number [-] seed\nSSA: block.number [-] seed_5 --> TMP_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x762c128a5bac6553e66fb2c07bee864576966c26",
        "target": "[RepairTarget] BlockFoodPreSale:apply:149\nCODE: contributionPending += msg.value\nOPERATION: contributionPending [+=] msg.value\nSSA: contributionPending_5 [+] msg.value --> contributionPending_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x76bc944a26cdc38173842dacb787f98e6c7348a9",
        "target": "[RepairTarget] Gold:chargeDemurringFee:110\nCODE: var fee = balances[addr] * mins * demurringFeeNum / demurringFeeDenum\nOPERATION: balances[addr] * mins [*] demurringFeeNum\nSSA: TMP_15 [*] demurringFeeNum_1 --> TMP_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x76bc944a26cdc38173842dacb787f98e6c7348a9",
        "target": "[RepairTarget] Gold:chargeDemurringFee:110\nCODE: var fee = balances[addr] * mins * demurringFeeNum / demurringFeeDenum\nOPERATION: balances[addr] * mins * demurringFeeNum [/] demurringFeeDenum\nSSA: TMP_16 [/] demurringFeeDenum_1 --> TMP_17\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x76bc944a26cdc38173842dacb787f98e6c7348a9",
        "target": "[RepairTarget] Gold:issue:242\nCODE: balances[this] += amount\nOPERATION: balances[this] [+=] amount\nSSA: REF_45 [+] amount_1 --> REF_45\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x76bc944a26cdc38173842dacb787f98e6c7348a9",
        "target": "[RepairTarget] Gold:chargeDemurringFee:110\nCODE: var fee = balances[addr] * mins * demurringFeeNum / demurringFeeDenum\nOPERATION: balances[addr] [*] mins\nSSA: REF_5 [*] mins_1 --> TMP_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x774f41630ac52f907873fa8bf23f85d8c3648888",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x77a481abdb863e62fb2ab421b7b2f14e9fb6cfb3",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x77a481abdb863e62fb2ab421b7b2f14e9fb6cfb3",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x783cf9c6754bf826f1727620b4baa19714fedf8d",
        "target": "[RepairTarget] ETH_MIXER:MakeTransfer:39\nCODE: totalTransfered+=_am\nOPERATION: totalTransfered [+=] _am\nSSA: totalTransfered_1 [+] _am_1 --> totalTransfered_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7844383d56cbdb02617cc70e26dd9dc72a37291e",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: uint256 z = x + y\nOPERATION: x [+] y\nSSA: x_1 [+] y_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7880fa461042aa2a60b8a82f6533e601adaff1a1",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7880fa461042aa2a60b8a82f6533e601adaff1a1",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x78a12d8c9c67a8836c22790ca983e2968f715d6e",
        "target": "[RepairTarget] WNTOToken:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x79a8ddb299bb4af1f9ee206af9689dd687d8ede4",
        "target": "[RepairTarget] DSMath:sub:8\nCODE: require((z = x - y) <= x)\nOPERATION: x [-] y\nSSA: x_1 [-] y_1 --> TMP_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x79d03e5c093fee6f489a9bdc2f3e0103da9b5ef7",
        "target": "[RepairTarget] Token:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7a04205b75b55bc65ba7e9f2ef977034ca14db3b",
        "target": "[RepairTarget] OrpheusMarinaBangkok:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7a7f7dd9c4acd198617c72f54623bdb0c1dff343",
        "target": "[RepairTarget] VIONC:drop:218\nCODE: assert(balances[owner] >= amt * addresses.length)\nOPERATION: amt [*] addresses.length\nSSA: amt_1 [*] REF_86 --> TMP_82\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7b46aa8f02b7d7d51fb355f8b0aec5a02d44baa3",
        "target": "[RepairTarget] StandardToken:transfer:37\nCODE: _to != address(0) && balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x7b46aa8f02b7d7d51fb355f8b0aec5a02d44baa3",
        "target": "[RepairTarget] StandardToken:transferFrom:54\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7c333b69021b3ad9288d3b0083f9bd27c6d4680a",
        "target": "[RepairTarget] SafeMath:mul:14\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7c632eabf2e40a4000f1e1d07cf79906f02a809d",
        "target": "[RepairTarget] SafeMath:add:51\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7d4362676c4f6e0f0bb369de686f5b34f6043002",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x7d4362676c4f6e0f0bb369de686f5b34f6043002",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7e43581b19ab509bcf9397a2efd1ab10233f27de",
        "target": "[RepairTarget] BitGuildToken:_transfer:48\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7eb19f7d9f4576354c1605ef23e34416bbf5f053",
        "target": "[RepairTarget] MQP:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x809faaf63ee61b9133102b4fbe560219b534b6e4",
        "target": "[RepairTarget] StandardToken:transferFrom:60\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x80f395f8e95544cd9b7d907b030667db29f59bce",
        "target": "[RepairTarget] HeelToken:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x813a823f35132d822708124e01759c565ab4331d",
        "target": "[RepairTarget] ETHLToken:_transfer:38\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x813a823f35132d822708124e01759c565ab4331d",
        "target": "[RepairTarget] ETHLToken:_transfer:41\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_10 [+] REF_11 --> TMP_16\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x818ebdad12d3decefabe6ccb16f33c9bbfe1b30a",
        "target": "[RepairTarget] NAGACoin:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x81b4d08645da11374a03749ab170836e4e539767",
        "target": "[RepairTarget] NewToken:transferFrom:70\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8213bae97f28eb16b1c41f212857535685f347bf",
        "target": "[RepairTarget] StandardToken:transferFrom:55\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x821cc0b6817ea2b23c87b591d72328a821edf694",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x821cc0b6817ea2b23c87b591d72328a821edf694",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x822b3442e88718cc83312dc92e10083720f77081",
        "target": "[RepairTarget] Lemonade:_transfer:42\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x822b3442e88718cc83312dc92e10083720f77081",
        "target": "[RepairTarget] Lemonade:_transfer:47\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x828be8ea7bbbe246216e7017b35057f64cf6449a",
        "target": "[RepairTarget] ModulTrade:transferFrom:115\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x82bb5dcd77686587633ba6744bd706ea09833fbf",
        "target": "[RepairTarget] DMToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x83bf4ce7a3937ef86f6eb8082e09ce39c52be697",
        "target": "[RepairTarget] Marketplace:fallback:44\nCODE: totalIncome += amount\nOPERATION: totalIncome [+=] amount\nSSA: totalIncome_1 [+] amount_1 --> totalIncome_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x83bf4ce7a3937ef86f6eb8082e09ce39c52be697",
        "target": "[RepairTarget] Marketplace:fallback:45\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x83bf4ce7a3937ef86f6eb8082e09ce39c52be697",
        "target": "[RepairTarget] Marketplace:fallback:43\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x842d6da3097b5efde5a81535144f947ab482b6ee",
        "target": "[RepairTarget] WhoTheEth:setNameRefer:45\nCODE: bank[ref] += msg.value - (msg.value / 10)\nOPERATION: bank[ref] [+=] msg.value - (msg.value / 10)\nSSA: REF_8 [+] TMP_18 --> REF_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x842d6da3097b5efde5a81535144f947ab482b6ee",
        "target": "[RepairTarget] WhoTheEth:setNameRefer:45\nCODE: bank[ref] += msg.value - (msg.value / 10)\nOPERATION: msg.value [-] (msg.value / 10)\nSSA: msg.value [-] TMP_17 --> TMP_18\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x842d6da3097b5efde5a81535144f947ab482b6ee",
        "target": "[RepairTarget] WhoTheEth:setNameRefer:45\nCODE: bank[ref] += msg.value - (msg.value / 10)\nOPERATION: msg.value [/] 10\nSSA: msg.value [/] 10 --> TMP_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x843d0a4524c7b13e333781f8716a891c8248277f",
        "target": "[RepairTarget] Frank:_transfer:27\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x843d0a4524c7b13e333781f8716a891c8248277f",
        "target": "[RepairTarget] Frank:_transfer:31\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8446563e75cd7821b5bf2199c26976efc5cac803",
        "target": "[RepairTarget] CovestingToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x84bcc3c733ac77d17fadc3877b0a8352f179e57e",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x84bcc3c733ac77d17fadc3877b0a8352f179e57e",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x85a866d3ad280afe8e658f2a68f833695174c618",
        "target": "[RepairTarget] ZperPreSale:fallback:23\nCODE: totalContributed += msg.value\nOPERATION: totalContributed [+=] msg.value\nSSA: totalContributed_1 [+] msg.value --> totalContributed_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x86c6a7ee4ec24d25456580d81f7e8f486186ec91",
        "target": "[RepairTarget] Coin:refund:57\nCODE: balances[address(this)] += _tokens\nOPERATION: balances[address(this)] [+=] _tokens\nSSA: REF_1 [+] _tokens_1 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x86c6a7ee4ec24d25456580d81f7e8f486186ec91",
        "target": "[RepairTarget] Coin:transferFrom:211\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_27 [+] _value_1 --> REF_27\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x87bba2d7797e831e5193598b2f6eb3f8a61eff07",
        "target": "[RepairTarget] CrowdFunding:newCampaign:24\nCODE: campaignID = numCampaigns++\nOPERATION: [++] numCampaigns\nSSA: numCampaigns_1 [+] 1 --> numCampaigns_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x889a32263d237872b4f7985ead9c29ebfe8b464d",
        "target": "[RepairTarget] CaviarToken:transferFrom:115\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x88dd64fcf492b8370ba28e6d815eaa444bf2fd8e",
        "target": "[RepairTarget] Jwechain:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8ab288d1f1fba30698e54d9ea784e51412a086eb",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8ab288d1f1fba30698e54d9ea784e51412a086eb",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8b0e368af9d27252121205b1db24d9e48f62b236",
        "target": "[RepairTarget] KiCoin:transfer:43\nCODE: balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]\nOPERATION: balances[_to] [+] _amount\nSSA: REF_3 [+] _amount_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x8b0e368af9d27252121205b1db24d9e48f62b236",
        "target": "[RepairTarget] KiCoin:transferFrom:53\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8b2f17c42e891a9641ccbb3c2fca9022eb74f76f",
        "target": "[RepairTarget] YDM:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8b7d07b6ffb9364e97b89cea8b84f94249be459f",
        "target": "[RepairTarget] FUTX:calculateTokens:217\nCODE: tokens = _value * ratios[tier]\nOPERATION: _value [*] ratios[tier]\nSSA: _value_1 [*] REF_6 --> TMP_39\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8b7d07b6ffb9364e97b89cea8b84f94249be459f",
        "target": "[RepairTarget] FUTX:mint:189\nCODE: _totalSupply += tokens\nOPERATION: _totalSupply [+=] tokens\nSSA: _totalSupply_3 [+] tokens_1 --> _totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8b7d07b6ffb9364e97b89cea8b84f94249be459f",
        "target": "[RepairTarget] FUTX:mint:183\nCODE: total -= refund\nOPERATION: total [-=] refund\nSSA: total_1 [-] refund_1 --> total_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8c628caaff01b61140f5576292bf57154e119b0b",
        "target": "[RepairTarget] RiemannianNonorientableManifolds:transferFrom:178\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_39 [-] _value_1 --> REF_39\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8f505f82c7ba9e3bb760e11fd126d0bd49020d7e",
        "target": "[RepairTarget] OSATToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8f505f82c7ba9e3bb760e11fd126d0bd49020d7e",
        "target": "[RepairTarget] OSATToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9064c91e51d7021a85ad96817e1432abf6624470",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x91507ea472707e6587f359e0f71846ec097aefc7",
        "target": "[RepairTarget] Tccchain:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x928989d4d0d71daaf86819ca69df620ebaaad407",
        "target": "[RepairTarget] MJToken:transferFrom:116\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x92a3e244d11eca878c7fea4788325d0e6c3d29f5",
        "target": "[RepairTarget] OrpheusBlockChainCitySiam:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x92e47a4b430f105c25b02099c179166c2bd119b2",
        "target": "[RepairTarget] XiaomiToken:_transfer:91\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x93afbb655003feee6f1efd855491dc14d6b3b361",
        "target": "[RepairTarget] ASCToken:_transfer:27\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x93afbb655003feee6f1efd855491dc14d6b3b361",
        "target": "[RepairTarget] ASCToken:_transfer:31\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9432f91bfc2335b0485aa4967d0acff3e34ae134",
        "target": "[RepairTarget] MedicalChainToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x950455b01afb8c82e3879c343ed60f91b7c81152",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9511e4c6648be24d93768930c4b55f1e65d53d5c",
        "target": "[RepairTarget] OrpheusRoyalSiamRailways:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9581456c8e87a4f47cfdf91abff4116bd518f17d",
        "target": "[RepairTarget] SafeMath:mul:41\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x95d34980095380851902ccd9a1fb4c813c2cb639",
        "target": "[RepairTarget] Private_Bank:Deposit:22\nCODE: balances[msg.sender]+=msg.value\nOPERATION: balances[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x963c69cca9b9193581ea100bc2ca31322e30d463",
        "target": "[RepairTarget] OHGLuangPrabang:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x966d9db7293eb7bd82971cb07838e5679dadc50f",
        "target": "[RepairTarget] MGTToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x966d9db7293eb7bd82971cb07838e5679dadc50f",
        "target": "[RepairTarget] MGTToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x96a3b6d2aa6241e1b2d539286958aeb6f1e49d69",
        "target": "[RepairTarget] AOCTrader:is_empty:71\nCODE: return (now - cooldown_start_time > 1 hours) && (this.balance==0) && (AOC.balanceOf(this) == 0)\nOPERATION: now [-] cooldown_start_time\nSSA: now [-] cooldown_start_time_2 --> TMP_0\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x96d8fbf95f72f5abe9ef04f1ade94e1ba79be508",
        "target": "[RepairTarget] GiftzNetworkToken:BuyToken:118\nCODE: require(balances[this] >= _value && balances[_buyer] + _value > balances[_buyer])\nOPERATION: balances[_buyer] [+] _value\nSSA: REF_18 [+] _value_1 --> TMP_38\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x96d8fbf95f72f5abe9ef04f1ade94e1ba79be508",
        "target": "[RepairTarget] GiftzNetworkToken:transferFrom:175\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_39 [-] _value_1 --> REF_39\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x96e8618de1191989939e28161c59c6d1c49028c2",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x96e8618de1191989939e28161c59c6d1c49028c2",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b",
        "target": "[RepairTarget] PENNY_BY_PENNY:Put:45\nCODE: now+_lockTime>acc.unlockTime\nOPERATION: now [+] _lockTime\nSSA: TMP_1 [>] REF_2 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b",
        "target": "[RepairTarget] PENNY_BY_PENNY:Put:45\nCODE: now+_lockTime>acc.unlockTime\nOPERATION: now [+] _lockTime\nSSA: now [+] _lockTime_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x97044d715aa99bd34a36ce25aceabc0ffb357979",
        "target": "[RepairTarget] Justo:transferFrom:57\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x973dc0c65b3ef4267394cf9a1fa1582827d9053f",
        "target": "[RepairTarget] WRToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x973dc0c65b3ef4267394cf9a1fa1582827d9053f",
        "target": "[RepairTarget] WRToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x974bc71358d5d342229bf12d13d8cd14d4f8b85c",
        "target": "[RepairTarget] eBookCoinToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x974bc71358d5d342229bf12d13d8cd14d4f8b85c",
        "target": "[RepairTarget] eBookCoinToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x97d25094830592b0f9fa32f427779a722ed04b34",
        "target": "[RepairTarget] GIFT_CARD:Put:11\nCODE: unlockTime = now+_unlockTime\nOPERATION: now [+] _unlockTime\nSSA: now [+] _unlockTime_1 --> TMP_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x98978d1e0bf088af7a8a75ab289c577de6373181",
        "target": "[RepairTarget] MatocolToken:_transfer:99\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x98978d1e0bf088af7a8a75ab289c577de6373181",
        "target": "[RepairTarget] MatocolToken:_transfer:111\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x98a66cd588f4903adb6a2587caebfe45dfce42bf",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x98a66cd588f4903adb6a2587caebfe45dfce42bf",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x98e0438d3ee1404fea48e38e92853bb08cfa68bd",
        "target": "[RepairTarget] TVTToken:distributeToken:42\nCODE: balances[addresses[i]] += _value * 10**8\nOPERATION: balances[addresses[i]] [+=] _value * 10**8\nSSA: _value_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x98e0438d3ee1404fea48e38e92853bb08cfa68bd",
        "target": "[RepairTarget] TVTToken:distributeToken:43\nCODE: Transfer(owner, addresses[i], _value * 10**8)\nOPERATION: _value [*] 10**8\nSSA: _value_1 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x98e0438d3ee1404fea48e38e92853bb08cfa68bd",
        "target": "[RepairTarget] TVTToken:distributeToken:42\nCODE: balances[addresses[i]] += _value * 10**8\nOPERATION: _value [*] 10**8\nSSA: _value_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x98e0438d3ee1404fea48e38e92853bb08cfa68bd",
        "target": "[RepairTarget] TVTToken:transfer:63\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x98e0438d3ee1404fea48e38e92853bb08cfa68bd",
        "target": "[RepairTarget] TVTToken:transferFrom:82\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x98e2750d38b1d24ba6c503e9853db69e7cf78fe4",
        "target": "[RepairTarget] BmarktToken:_transfer:30\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x98e2750d38b1d24ba6c503e9853db69e7cf78fe4",
        "target": "[RepairTarget] BmarktToken:_transfer:34\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x98f7d9405e9b973e51cd4d85a5b2327a9ca55359",
        "target": "[RepairTarget] TokenToTokenSwap:forcePay:400\nCODE: uint j = loop_count-1\nOPERATION: loop_count [-] 1\nSSA: loop_count_6 [-] 1 --> TMP_129\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x98f7d9405e9b973e51cd4d85a5b2327a9ca55359",
        "target": "[RepairTarget] TokenToTokenSwap:forcePay:400\nCODE: j--\nOPERATION: [--] j\nSSA: j_2 [-] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x992d6d699d3f7c627a9be1a5f6020a05ecb86200",
        "target": "[RepairTarget] CardMarket:generateRunes:478\nCODE: i++\nOPERATION: [++] i\nSSA: i_19 [+] 1 --> i_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x992d6d699d3f7c627a9be1a5f6020a05ecb86200",
        "target": "[RepairTarget] CardMarket:generateRunes:476\nCODE: i++\nOPERATION: [++] i\nSSA: i_5 [+] 1 --> i_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x993551184c994737dada24d6a0c6b54ee0196971",
        "target": "[RepairTarget] RETHToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x993551184c994737dada24d6a0c6b54ee0196971",
        "target": "[RepairTarget] RETHToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x99bab102c0a03438bcfd70119f07ee646db26ddf",
        "target": "[RepairTarget] GIFT_CARD:Put:11\nCODE: unlockTime = now+_unlockTime\nOPERATION: now [+] _unlockTime\nSSA: now [+] _unlockTime_1 --> TMP_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9a6b5c47af48d6a8fb7e815b26dbd1b6d59e592e",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9a6b5c47af48d6a8fb7e815b26dbd1b6d59e592e",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9bb287b086af92ac32de8cd2fd005e7e73c2e6ab",
        "target": "[RepairTarget] LIFT:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9c04baaa0fe35376691d3cddcc312ea052a03294",
        "target": "[RepairTarget] PandiXTokenCoin:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x9c04baaa0fe35376691d3cddcc312ea052a03294",
        "target": "[RepairTarget] PandiXTokenCoin:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x9c04baaa0fe35376691d3cddcc312ea052a03294",
        "target": "[RepairTarget] PandiXTokenCoin:transfer:48\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9c04baaa0fe35376691d3cddcc312ea052a03294",
        "target": "[RepairTarget] PandiXTokenCoin:transferFrom:60\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9c05d6ca98c7822a14e820d25d8b028301babc0a",
        "target": "[RepairTarget] mETHNetwork:fallback:126\nCODE: require(totalSupply + amount <= (9000000000 * 10 ** uint256(decimals)))\nOPERATION: totalSupply [+] amount\nSSA: totalSupply_2 [+] amount_1 --> TMP_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9c05d6ca98c7822a14e820d25d8b028301babc0a",
        "target": "[RepairTarget] mETHNetwork:fallback:126\nCODE: require(totalSupply + amount <= (9000000000 * 10 ** uint256(decimals)))\nOPERATION: 9000000000 [*] 10 ** uint256(decimals)\nSSA: 9000000000 [*] TMP_13 --> TMP_14\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cb32e3090a027f43700ee896acf9a030acebb66",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9cb32e3090a027f43700ee896acf9a030acebb66",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9d07f4e2dbb986bc62c1a588f7b8fbf79f824a91",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9d07f4e2dbb986bc62c1a588f7b8fbf79f824a91",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9d0a108fbb9b311e9976bc071d4469123659562f",
        "target": "[RepairTarget] SmartLoanToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9e046dcead1a5d711d89daff4c6af980a766aaf2",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x9e046dcead1a5d711d89daff4c6af980a766aaf2",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9ebaf4b35a247411e6bf5c6c0d3f3ca707c65e8a",
        "target": "[RepairTarget] VaraToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9ebaf4b35a247411e6bf5c6c0d3f3ca707c65e8a",
        "target": "[RepairTarget] VaraToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9f4a20a695aaf44f92523ee7e568d2289957d9b6",
        "target": "[RepairTarget] SmartMMM:withdraw:19\nCODE: uint countWeeks = (now - investorDate[msg.sender]) / 604800\nOPERATION: now [-] investorDate[msg.sender]\nSSA: now [-] REF_2 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9f4a20a695aaf44f92523ee7e568d2289957d9b6",
        "target": "[RepairTarget] SmartMMM:fallback:31\nCODE: investorAmount[msg.sender] += msg.value\nOPERATION: investorAmount[msg.sender] [+=] msg.value\nSSA: REF_10 [+] msg.value --> REF_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9f4a20a695aaf44f92523ee7e568d2289957d9b6",
        "target": "[RepairTarget] SmartMMM:withdraw:19\nCODE: uint countWeeks = (now - investorDate[msg.sender]) / 604800\nOPERATION: (now - investorDate[msg.sender]) [/] 604800\nSSA: TMP_5 [/] 604800 --> TMP_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9fca5531b2a91b14cf46eddf029f34f7a5174362",
        "target": "[RepairTarget] ADULT:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa09919d5abedcec55cc1945062b21b170ad19f86",
        "target": "[RepairTarget] Carecoin:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa0e3060bbfd4f3665f914c966b489c79e74fdc96",
        "target": "[RepairTarget] DBXToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa0e3060bbfd4f3665f914c966b489c79e74fdc96",
        "target": "[RepairTarget] DBXToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa1040f6b54a0bb563da22820fcf25d6cc57f6b6b",
        "target": "[RepairTarget] ISToken:_transfer:29\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa1040f6b54a0bb563da22820fcf25d6cc57f6b6b",
        "target": "[RepairTarget] ISToken:_transfer:33\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa341e6b15f1b5ca89f08c742a3e192b0e4da8c4d",
        "target": "[RepairTarget] PowerSourceToken:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa4337c343132e134a23439d5386c29c610b93d5b",
        "target": "[RepairTarget] CryptoAndDragonsAuction:burnAuction:210\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa44e5137293e855b1b7bc7e2c6f8cd796ffcb037",
        "target": "[RepairTarget] ERC20Token:_transfer:74\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa44e5137293e855b1b7bc7e2c6f8cd796ffcb037",
        "target": "[RepairTarget] Sentinel:payService:195\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_60 [+] REF_61 --> TMP_95\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa46aeff63f9b7a2d50f7687927047756df216434",
        "target": "[RepairTarget] SampleStorage:addNewSampleType:58\nCODE: numOfRare++\nOPERATION: [++] numOfRare\nSSA: numOfRare_2 [+] 1 --> numOfRare_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa46aeff63f9b7a2d50f7687927047756df216434",
        "target": "[RepairTarget] SampleStorage:addNewSampleType:62\nCODE: numOfMythical++\nOPERATION: [++] numOfMythical\nSSA: numOfMythical_2 [+] 1 --> numOfMythical_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa46aeff63f9b7a2d50f7687927047756df216434",
        "target": "[RepairTarget] SampleStorage:addNewSampleType:60\nCODE: numOfLegendary++\nOPERATION: [++] numOfLegendary\nSSA: numOfLegendary_2 [+] 1 --> numOfLegendary_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa4ec44afee34feffbae5ce4218d3c06ebd70455e",
        "target": "[RepairTarget] Superbowl52:bet:213\nCODE: totalBets += msg.value\nOPERATION: totalBets [+=] msg.value\nSSA: totalBets_2 [+] msg.value --> totalBets_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa4ec44afee34feffbae5ce4218d3c06ebd70455e",
        "target": "[RepairTarget] Superbowl52:bet:210\nCODE: bets[msg.sender].newEnglandBets += msg.value\nOPERATION: bets[msg.sender].newEnglandBets [+=] msg.value\nSSA: REF_36 [+] msg.value --> REF_36\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e",
        "target": "[RepairTarget] StandardToken:transferFrom:115\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa55fc2f935e5decd52685e28c9f1e94528f86c70",
        "target": "[RepairTarget] StandardToken:transfer:93\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa55fc2f935e5decd52685e28c9f1e94528f86c70",
        "target": "[RepairTarget] StandardToken:transferFrom:113\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa5d6accc5695327f65cbf38da29198df53efdcf0",
        "target": "[RepairTarget] Private_accumulation_fund:Deposit:23\nCODE: balances[msg.sender]+=msg.value\nOPERATION: balances[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa672a511e7d9dfcea9af4e530d784745eba4ff12",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa6e6e8e626cd49ca9e24f52efd132d595b03347e",
        "target": "[RepairTarget] ValeaCdsTok20220305I:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xa6e6e8e626cd49ca9e24f52efd132d595b03347e",
        "target": "[RepairTarget] ValeaCdsTok20220305I:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xa6e6e8e626cd49ca9e24f52efd132d595b03347e",
        "target": "[RepairTarget] ValeaCdsTok20220305I:transfer:48\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa6e6e8e626cd49ca9e24f52efd132d595b03347e",
        "target": "[RepairTarget] ValeaCdsTok20220305I:transferFrom:60\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa82749c94ab7f921725624fb90e7600216169597",
        "target": "[RepairTarget] Counter:increment:4\nCODE: counter++\nOPERATION: [++] counter\nSSA: counter_1 [+] 1 --> counter_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa85a6413399b99a48cf6b7355bec63167e0bdb68",
        "target": "[RepairTarget] TRIXToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa85a6413399b99a48cf6b7355bec63167e0bdb68",
        "target": "[RepairTarget] TRIXToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa8cbd21faf0cc087c9f6beeb7ff8f4f477462cfc",
        "target": "[RepairTarget] POS:transferFrom:49\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa962c55c974bb738707d514242befad9603bb1bf",
        "target": "[RepairTarget] VCRToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa962c55c974bb738707d514242befad9603bb1bf",
        "target": "[RepairTarget] VCRToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa9931def75784c50e27506d9acc4c58611bd5103",
        "target": "[RepairTarget] KaiserExToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa9931def75784c50e27506d9acc4c58611bd5103",
        "target": "[RepairTarget] KaiserExToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xaa0e1bc5163293c2e335977d9478d741f3a4e372",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:54\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaa0e1bc5163293c2e335977d9478d741f3a4e372",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:53\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xab6ac51e1e598f88c923a8fd4263539d6945b23d",
        "target": "[RepairTarget] OST:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xabcaea6f4099b1ed62169d39c26f808f948c86d6",
        "target": "[RepairTarget] DecentralandToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xac431d03f2c3558f0631ace607593fc719dab88b",
        "target": "[RepairTarget] Galaxycoin:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xac431d03f2c3558f0631ace607593fc719dab88b",
        "target": "[RepairTarget] Galaxycoin:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xad05c89372994e5e7af7be50f6b0036f2c69ae0e",
        "target": "[RepairTarget] UUSDCrowdsale:transferFrom:176\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_19 [-] _value_1 --> REF_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad05c89372994e5e7af7be50f6b0036f2c69ae0e",
        "target": "[RepairTarget] UUSDCrowdsale:buyTokens:92\nCODE: msg.value > 1 finney * MAXfinney\nOPERATION: 1 finney [*] MAXfinney\nSSA: 1000000000000000 [*] MAXfinney_1 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad14e61e0c450f525429861b1e482eedf914a541",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xad14e61e0c450f525429861b1e482eedf914a541",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xad1aa68300588aa5842751ddcab2afd4a69e9016",
        "target": "[RepairTarget] ETH_ANONIM_TRANSFER:MakeTransfer:43\nCODE: totalTransfered+=_am\nOPERATION: totalTransfered [+=] _am\nSSA: totalTransfered_2 [+] _am_1 --> totalTransfered_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad1ff4873633c9248130fbfe28d17e1bd5467cc4",
        "target": "[RepairTarget] TokenERC20:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xad4021f95ab9bc04334cff51f274df306598fa89",
        "target": "[RepairTarget] Cscchain:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xad43e8ba48a974e6dc5a385d87fc8cd1fe94a408",
        "target": "[RepairTarget] Crowdsale:fallback:74\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad43e8ba48a974e6dc5a385d87fc8cd1fe94a408",
        "target": "[RepairTarget] Crowdsale:fallback:73\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_2 [+] amount_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xae73e0522512d6e1346d3f39124d083aa0e3dc33",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xae73e0522512d6e1346d3f39124d083aa0e3dc33",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xaf31604f0a88f7fcebc7d4cf4dd14653f4a6773c",
        "target": "[RepairTarget] TokenSafe:unlock:100\nCODE: uint256 canWithdrawAmount = balance - balanceShouldRest\nOPERATION: balance [-] balanceShouldRest\nSSA: balance_1 [-] balanceShouldRest_1 --> TMP_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaff6dc0a97ecbfee0ceb574a43b65eb8ff597e09",
        "target": "[RepairTarget] SafeMath:mul:23\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaffd185f4e505904566cdc9677a5efc2e9875b8b",
        "target": "[RepairTarget] CoxxxCoinCrowdsale:fallback:49\nCODE: uint tokenAmount = amount / price\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaffd185f4e505904566cdc9677a5efc2e9875b8b",
        "target": "[RepairTarget] CoxxxCoinCrowdsale:fallback:47\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaffd185f4e505904566cdc9677a5efc2e9875b8b",
        "target": "[RepairTarget] CoxxxCoinCrowdsale:fallback:48\nCODE: currentBalance += amount\nOPERATION: currentBalance [+=] amount\nSSA: currentBalance_1 [+] amount_1 --> currentBalance_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb04ee6be2b98c9ed24be5585329891fea036829a",
        "target": "[RepairTarget] Crowdsale:fallback:49\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb04ee6be2b98c9ed24be5585329891fea036829a",
        "target": "[RepairTarget] Crowdsale:fallback:48\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb09bd0cda4c4254acebc130ca17915b93519079c",
        "target": "[RepairTarget] SirinSmartToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb14a4065b80591cae20999fa6747549c670bb9cc",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb14a4065b80591cae20999fa6747549c670bb9cc",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb1cfaeb81533611cd7617d49e0b95d4383b087c4",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb25cef763846fe25185de5cf970fdf2ac13fc16d",
        "target": "[RepairTarget] Crowdsale:fallback:96\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_2 [+] amount_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb25cef763846fe25185de5cf970fdf2ac13fc16d",
        "target": "[RepairTarget] Crowdsale:fallback:97\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_2 [+] amount_1 --> amountRaised_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb265e622f3bf17d40db0246bea1bb3d83b8c99d3",
        "target": "[RepairTarget] SwtechToken:_transfer:91\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb27a380a00b3f1be3eb5fb3d4c65505a51f1c52d",
        "target": "[RepairTarget] SafeMath:mul:21\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb33e35c8e3b46a747a5fd5ea78d901aabe3f4f96",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:60\nCODE: uint tokenAmount = (amount / price) * 1 ether\nOPERATION: (amount / price) [*] 1 ether\nSSA: TMP_7 [*] 1000000000000000000 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb33e35c8e3b46a747a5fd5ea78d901aabe3f4f96",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:59\nCODE: currentBalance += amount\nOPERATION: currentBalance [+=] amount\nSSA: currentBalance_1 [+] amount_1 --> currentBalance_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb33e35c8e3b46a747a5fd5ea78d901aabe3f4f96",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:60\nCODE: uint tokenAmount = (amount / price) * 1 ether\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb33e35c8e3b46a747a5fd5ea78d901aabe3f4f96",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:58\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb344f584e002e2ad84a71a60e395ecd057060d19",
        "target": "[RepairTarget] GiftzNetworkToken:BuyToken:116\nCODE: require(balances[this] >= _value && balances[_buyer] + _value > balances[_buyer])\nOPERATION: balances[_buyer] [+] _value\nSSA: REF_18 [+] _value_1 --> TMP_38\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xb344f584e002e2ad84a71a60e395ecd057060d19",
        "target": "[RepairTarget] GiftzNetworkToken:transferFrom:173\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_39 [-] _value_1 --> REF_39\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb39ce01372db6b36679f6e26c7f7882097b7fe80",
        "target": "[RepairTarget] OCTWasteToEnergyJV:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb44808b969eb2500223b64053acd1d0cf1cba675",
        "target": "[RepairTarget] Countdown:ClickButton:35\nCODE: buttonClicks += 1\nOPERATION: buttonClicks [+=] 1\nSSA: buttonClicks_1 [+] 1 --> buttonClicks_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb58984c21ec86f2a48512862ddd6b45d3e0ffe20",
        "target": "[RepairTarget] LOYALTYINSPIRATIONTOKENS:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb5980eb165cbbe3809e1680ef05c3878ce25dacb",
        "target": "[RepairTarget] SBGToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb5980eb165cbbe3809e1680ef05c3878ce25dacb",
        "target": "[RepairTarget] SBGToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb59c5ab4be02106434e729ab020f824d45bd6f30",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb5c0e43a6330b9eb904ec57ea24d70269ae4652e",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb5df8cbca0208f61e2367b3148b0facac93d0af6",
        "target": "[RepairTarget] StandardToken:transferFrom:70\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12",
        "target": "[RepairTarget] Private_Bank:Deposit:22\nCODE: balances[msg.sender]+=msg.value\nOPERATION: balances[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb62651d0503496036206914bf6aaf1841137a9bb",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb62651d0503496036206914bf6aaf1841137a9bb",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb63ab8e276e081b9079c3ae520c58061fa4acb45",
        "target": "[RepairTarget] TRUST:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb69a50f98a49f85fd2042813e1647b02dc43d71f",
        "target": "[RepairTarget] EbyteDistribution:enableWhitelist:65\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb69a50f98a49f85fd2042813e1647b02dc43d71f",
        "target": "[RepairTarget] EbyteDistribution:disableWhitelist:71\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb69a50f98a49f85fd2042813e1647b02dc43d71f",
        "target": "[RepairTarget] EbyteDistribution:distributeEbyteForETH:109\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb6d85349ec816726bf07e1690d56d712acabe409",
        "target": "[RepairTarget] SafeMath:mul:15\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb8dd3ff9b542114a0822ac68f1829bebc5ebe803",
        "target": "[RepairTarget] StandardToken:transferFrom:70\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e",
        "target": "[RepairTarget] PrivateBank:Deposit:22\nCODE: balances[msg.sender]+=msg.value\nOPERATION: balances[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb993035adbb25e8d7fe4d34b2d0f76c894c68929",
        "target": "[RepairTarget] IUIC:burnFrom:151\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb993035adbb25e8d7fe4d34b2d0f76c894c68929",
        "target": "[RepairTarget] IUIC:burn:133\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xba3bcad13b7162f3136e4f2099078c3a805dc88a",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xba5f00a28f732f23ba946c594716496ebdc9aef5",
        "target": "[RepairTarget] BKEXComToken:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbb37d144619d0f4ec3096ccb53581a00de46c4d5",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbb37d144619d0f4ec3096ccb53581a00de46c4d5",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbb4d215a3bc9d87eb10ace769fbe1def7e06a0d1",
        "target": "[RepairTarget] RHUCoinTokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbc38815444faf8a244a8663475011ba4314bc1da",
        "target": "[RepairTarget] GYM:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbd33a26cbbf7895e18e22115efedde194bc3beba",
        "target": "[RepairTarget] SafeMath:div:23\nCODE: uint256 c = a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbd35aefa375b57a801ddc87615aef1e9f353df28",
        "target": "[RepairTarget] ToTheMoon:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_11\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbd5cfa0e509b2981753da7a53ee18f5876f8631e",
        "target": "[RepairTarget] EthereumUltimate:fallback:222\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_3 [+] amount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbd9dc7d3a4b0f6777ba79f5d52ff2cc27688c45d",
        "target": "[RepairTarget] AnyChicken:fallback:18\nCODE: block.number <= lastBlock + 1000\nOPERATION: lastBlock [+] 1000\nSSA: lastBlock_2 [+] 1000 --> TMP_0\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xbdba65bb45f2922b08f17a67d3bfcdb1a6e3267c",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xbdba65bb45f2922b08f17a67d3bfcdb1a6e3267c",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbe2c5643404bb66043f4ca7485e6dc6ffe866509",
        "target": "[RepairTarget] TokenERC20:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888",
        "target": "[RepairTarget] MONEY_BOX:Put:45\nCODE: now+_lockTime>acc.unlockTime\nOPERATION: now [+] _lockTime\nSSA: TMP_1 [>] REF_2 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888",
        "target": "[RepairTarget] MONEY_BOX:Put:45\nCODE: now+_lockTime>acc.unlockTime\nOPERATION: now [+] _lockTime\nSSA: now [+] _lockTime_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbeebcfe2fbb3c72884341be2b73ae0fc6559b8fc",
        "target": "[RepairTarget] Q1SToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbeebcfe2fbb3c72884341be2b73ae0fc6559b8fc",
        "target": "[RepairTarget] Q1SToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc00b89fc3a7ee7043629d8f9a79abfef55634960",
        "target": "[RepairTarget] SafeMath:safeMult:19\nCODE: assert((x == 0)||(z/x == y))\nOPERATION: z [/] x\nSSA: z_1 [/] x_1 --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc00b89fc3a7ee7043629d8f9a79abfef55634960",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: uint256 z = x + y\nOPERATION: x [+] y\nSSA: x_1 [+] y_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc00b89fc3a7ee7043629d8f9a79abfef55634960",
        "target": "[RepairTarget] StandardToken:transferFrom:54\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
        "target": "[RepairTarget] WETH9:deposit:35\nCODE: balanceOf[msg.sender] += msg.value\nOPERATION: balanceOf[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc02bec520cc8d726f859a7e5539f98f72676692a",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc2b2950fdd01252a720344ef6077491e6e1b10f8",
        "target": "[RepairTarget] StandardToken:transfer:21\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc2b2950fdd01252a720344ef6077491e6e1b10f8",
        "target": "[RepairTarget] StandardToken:transferFrom:32\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc2b9e65174264159677520d951e543f9235af946",
        "target": "[RepairTarget] SealToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc2b9e65174264159677520d951e543f9235af946",
        "target": "[RepairTarget] SealToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc37172f6a954e3a779f5117fd751c5e870164e01",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:57\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc37172f6a954e3a779f5117fd751c5e870164e01",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:58\nCODE: currentBalance += amount\nOPERATION: currentBalance [+=] amount\nSSA: currentBalance_1 [+] amount_1 --> currentBalance_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc37172f6a954e3a779f5117fd751c5e870164e01",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:59\nCODE: tokenReward.transfer(msg.sender, (amount / price) * 1 ether)\nOPERATION: (amount / price) [*] 1 ether\nSSA: TMP_11 [*] 1000000000000000000 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc37172f6a954e3a779f5117fd751c5e870164e01",
        "target": "[RepairTarget] PornTokenV2Crowdsale:fallback:59\nCODE: tokenReward.transfer(msg.sender, (amount / price) * 1 ether)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc3971619e272473286d7db7e7fb3fef8a0e9e8e8",
        "target": "[RepairTarget] DappToken:transferFrom:58\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc3b03e7d5028b2c4ebad38a5f12a50460031ada4",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc3d4230aa46168bac185dec95dc79b4ef595a0dc",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc42de4250ca009c767818ec6f8fb1eacba859f38",
        "target": "[RepairTarget] CELLToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc42de4250ca009c767818ec6f8fb1eacba859f38",
        "target": "[RepairTarget] CELLToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc43fba7bf0250fcd88439af086475fdf117fa255",
        "target": "[RepairTarget] Crowdsale:fallback:49\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc43fba7bf0250fcd88439af086475fdf117fa255",
        "target": "[RepairTarget] Crowdsale:fallback:50\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc44948cbbaf37a4d7f1315c08972b4338080bf59",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc44948cbbaf37a4d7f1315c08972b4338080bf59",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc45465ce37d817cc3668ef28887953080db92850",
        "target": "[RepairTarget] CENTIPEDEToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc45465ce37d817cc3668ef28887953080db92850",
        "target": "[RepairTarget] CENTIPEDEToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc48dce601d09796b554fda45a1d28488f4aa3731",
        "target": "[RepairTarget] SafeMath:mul:7\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc4e11c711d126925920a0312350444a2c80c8281",
        "target": "[RepairTarget] SafeMath:mul:35\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc4f4be28e8cb75b7bf30808bc5523d22a9ac3665",
        "target": "[RepairTarget] ETHRoyale:deposit:105\nCODE: masterBalance += _amt\nOPERATION: masterBalance [+=] _amt\nSSA: masterBalance_3 [+] _amt_1 --> masterBalance_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc4f4be28e8cb75b7bf30808bc5523d22a9ac3665",
        "target": "[RepairTarget] ETHRoyale:deposit:90\nCODE: participantsCount++\nOPERATION: [++] participantsCount\nSSA: participantsCount_3 [+] 1 --> participantsCount_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc4f4be28e8cb75b7bf30808bc5523d22a9ac3665",
        "target": "[RepairTarget] ETHRoyale:collectInterest:123\nCODE: masterApparentBalance += _tempInterest\nOPERATION: masterApparentBalance [+=] _tempInterest\nSSA: masterApparentBalance_4 [+] _tempInterest_1 --> masterApparentBalance_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc4f4be28e8cb75b7bf30808bc5523d22a9ac3665",
        "target": "[RepairTarget] ETHRoyale:deposit:106\nCODE: masterApparentBalance += _amt\nOPERATION: masterApparentBalance [+=] _amt\nSSA: masterApparentBalance_2 [+] _amt_1 --> masterApparentBalance_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc5ed4bf44ef32d25688a5cca2f67d84156650b8d",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc5ed4bf44ef32d25688a5cca2f67d84156650b8d",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc60000ba92b436bc165fd48d803bce95a099ab67",
        "target": "[RepairTarget] FRAS:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc613aa922aa19df3d8b53826f2ae1e11cf6678e0",
        "target": "[RepairTarget] StandardToken:transferFrom:95\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc6a40355353051a044afa92dda60cb33ad5bdab5",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc6a40355353051a044afa92dda60cb33ad5bdab5",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc6cb0b17c9acccd02e48d92151394721bc5bf3fc",
        "target": "[RepairTarget] Xain:transfer:97\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc6cb0b17c9acccd02e48d92151394721bc5bf3fc",
        "target": "[RepairTarget] Xain:transferFrom:112\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc7af722472dc3268cd57c7554bde50c4f1c20cc8",
        "target": "[RepairTarget] KYRToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc7af722472dc3268cd57c7554bde50c4f1c20cc8",
        "target": "[RepairTarget] KYRToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc83355ef25a104938275b46cffd94bf9917d0691",
        "target": "[RepairTarget] FUTR:mint:188\nCODE: _totalSupply += tokens\nOPERATION: _totalSupply [+=] tokens\nSSA: _totalSupply_3 [+] tokens_1 --> _totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc83355ef25a104938275b46cffd94bf9917d0691",
        "target": "[RepairTarget] FUTR:mint:174\nCODE: _value = _value - refund\nOPERATION: _value [-] refund\nSSA: _value_1 [-] refund_1 --> TMP_31\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc83355ef25a104938275b46cffd94bf9917d0691",
        "target": "[RepairTarget] FUTR:calculateTokens:216\nCODE: tokens = _value * ratios[tier]\nOPERATION: _value [*] ratios[tier]\nSSA: _value_1 [*] REF_6 --> TMP_39\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc83355ef25a104938275b46cffd94bf9917d0691",
        "target": "[RepairTarget] FUTR:mint:182\nCODE: total -= refund\nOPERATION: total [-=] refund\nSSA: total_1 [-] refund_1 --> total_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc8fb9ad6f78ded4d9cf0fbdfcf3833f4b00ad774",
        "target": "[RepairTarget] StandardToken:transfer:21\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc8fb9ad6f78ded4d9cf0fbdfcf3833f4b00ad774",
        "target": "[RepairTarget] StandardToken:transferFrom:30\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xca577378bb259b0a28ac58a5a0b48acd58da2c7a",
        "target": "[RepairTarget] StandardToken:transfer:20\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xca577378bb259b0a28ac58a5a0b48acd58da2c7a",
        "target": "[RepairTarget] StandardToken:transferFrom:31\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcb504e6590f78acd9aa1fbff6c749124facb56a6",
        "target": "[RepairTarget] KryptoArmy:purchaseWeapons:129\nCODE: armies[_armyId].defenseBonus = armies[_armyId].defenseBonus + _bonusDefense\nOPERATION: armies[_armyId].defenseBonus [+] _bonusDefense\nSSA: REF_40 [+] _bonusDefense_1 --> TMP_64\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcb5bdded57c7e560fcea2cf8f6c14a3267b89909",
        "target": "[RepairTarget] MAUToken:transfer:70\nCODE: es[msg.sender] -= _amount;\r\n   \nOPERATION: es[msg.sender] -= _a [-=] t;\n    \nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcb5bdded57c7e560fcea2cf8f6c14a3267b89909",
        "target": "[RepairTarget] MAUToken:transferFrom:87\nCODE: es[_from] -= _amount;\r\n   \nOPERATION: es[_from] -= _a [-=] t;\n    \nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcbc99b988301df3bccfc1dca3706019c336f47f6",
        "target": "[RepairTarget] TokenERC20:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xcc27ce64cf6f807cebfac616ccfe512641fa503d",
        "target": "[RepairTarget] SIMPLE_PIGGY_BANK:fallback:15\nCODE: Bal[msg.sender]+=msg.value\nOPERATION: Bal[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcc2ae7ad8f32ea3bd38d0192d20e465503ae698d",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xcc4bb7948ac97b0dd8857552a69893cd0f03ee17",
        "target": "[RepairTarget] Frikandel:transferFrom:75\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_18 [-] _value_1 --> REF_18\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xccb3a8d6d5f78c3fec21088db01964706e9ebe6e",
        "target": "[RepairTarget] DDXToken:transferFrom:60\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcdd4984d4726b1cc51e692fb663f713ffb47ec0b",
        "target": "[RepairTarget] BaseToken:_transfer:43\nCODE: require(balanceOf[_to] + _value > balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xce7502e4aaeb753259a1d848b383c16e0ec11d3b",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xce75e5aa182ee99ea1be60aa13b3f2eed172730e",
        "target": "[RepairTarget] WizzleInfinityHelper:bulkWhitelist:73\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xce7977b0f09af18aba7b35042b9866f4a8b86699",
        "target": "[RepairTarget] OHGVientiane:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcf3a6ec03b0e8e8525933d4e2439d4d5ee2763ce",
        "target": "[RepairTarget] WallCryptoStreet:purchaseShare:148\nCODE: shares[_shareId].curPrice = shares[_shareId].curPrice + (shares[_shareId].curPrice / 2)\nOPERATION: shares[_shareId].curPrice [+] (shares[_shareId].curPrice / 2)\nSSA: REF_68 [+] TMP_46 --> TMP_47\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcf3a6ec03b0e8e8525933d4e2439d4d5ee2763ce",
        "target": "[RepairTarget] WallCryptoStreet:purchaseShare:148\nCODE: shares[_shareId].curPrice = shares[_shareId].curPrice + (shares[_shareId].curPrice / 2)\nOPERATION: shares[_shareId].curPrice [/] 2\nSSA: REF_70 [/] 2 --> TMP_46\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcf8c8d3f9768e016f92761e0557499c3ac11e3a4",
        "target": "[RepairTarget] BlockchainVotingCoin:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xcf9b5c8c909a1e000e1401cee0d85a61121c36b9",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xcf9b5c8c909a1e000e1401cee0d85a61121c36b9",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd056d21719e7e2bc216cb74fb18a3d0f1542af6e",
        "target": "[RepairTarget] TEMPLAR:transferFrom:58\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd0679f8c568ed7ffd67e2447e31a4a906c036796",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd0679f8c568ed7ffd67e2447e31a4a906c036796",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd0b4fda55a2390e2dae76f1e6f263a7ee18dbdbb",
        "target": "[RepairTarget] TVTToken:distributeToken:43\nCODE: Transfer(owner, addresses[i], _value * 10**8)\nOPERATION: _value [*] 10**8\nSSA: _value_1 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd0b4fda55a2390e2dae76f1e6f263a7ee18dbdbb",
        "target": "[RepairTarget] TVTToken:distributeToken:42\nCODE: balances[addresses[i]] += _value * 10**8\nOPERATION: balances[addresses[i]] [+=] _value * 10**8\nSSA: _value_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd0b4fda55a2390e2dae76f1e6f263a7ee18dbdbb",
        "target": "[RepairTarget] TVTToken:distributeToken:42\nCODE: balances[addresses[i]] += _value * 10**8\nOPERATION: _value [*] 10**8\nSSA: _value_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd0b4fda55a2390e2dae76f1e6f263a7ee18dbdbb",
        "target": "[RepairTarget] TVTToken:transfer:63\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd0b4fda55a2390e2dae76f1e6f263a7ee18dbdbb",
        "target": "[RepairTarget] TVTToken:transferFrom:82\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd0b5efaa64944f1bb2def583792ea903f6caf3da",
        "target": "[RepairTarget] LLG:_transfer:109\nCODE: require(balanceOf[_to] + _value > balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_2 [+] _value_1 --> TMP_7\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xd0bd12a8d5ebca1e2fa46da59f1993ec51c3d75c",
        "target": "[RepairTarget] BKToken:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd116d1349c1382b0b302086a4e4219ae4f8634ff",
        "target": "[RepairTarget] Private_Bank:Deposit:22\nCODE: balances[msg.sender]+=msg.value\nOPERATION: balances[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd1b7a9c083c1e1ace7373bf3cf164b87f9d0bbd1",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd216c12e89ac892e944edf6c947c860681ef18da",
        "target": "[RepairTarget] Knightium:_transfer:52\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd21daa01e682f849c8e21bd945bc040103091640",
        "target": "[RepairTarget] UTEMIS:getTokensToSend:248\nCODE: tokensToSend  = ethToTokens + amountBonus\nOPERATION: ethToTokens [+] amountBonus\nSSA: ethToTokens_1 [+] amountBonus_1 --> TMP_55\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd21daa01e682f849c8e21bd945bc040103091640",
        "target": "[RepairTarget] UTEMIS:fallback:276\nCODE: ethersCollecteds   += msg.value\nOPERATION: ethersCollecteds [+=] msg.value\nSSA: ethersCollecteds_5 [+] msg.value --> ethersCollecteds_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd2e28752827a9431de9ddec552fbddae9f473ae5",
        "target": "[RepairTarget] Templar:transferFrom:58\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd319bedd2994cc2b0cf18972236800648341f0b2",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd3392f219db947b7d985c6567fb8487213b3fbec",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd3392f219db947b7d985c6567fb8487213b3fbec",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd3676a37a23ad8f4238064c1edc704debf335f26",
        "target": "[RepairTarget] CariNetPrivilege:_transfer:99\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd3676a37a23ad8f4238064c1edc704debf335f26",
        "target": "[RepairTarget] CariNetPrivilege:_transfer:111\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd3725e5e42168bd7691e47f7e05fd67a50861509",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd3725e5e42168bd7691e47f7e05fd67a50861509",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd40441e477122ae3209742aa2bc6edefb62f920c",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd40441e477122ae3209742aa2bc6edefb62f920c",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd44e3663aa2faa993b5aed88c43b2943a36cb452",
        "target": "[RepairTarget] MudshotsToken:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd44e3663aa2faa993b5aed88c43b2943a36cb452",
        "target": "[RepairTarget] MudshotsToken:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd4d342fd95a968884bf50b69ee3ea870c3bbef91",
        "target": "[RepairTarget] OthoContract:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd4f31379993e4a05d069ccfc906231f0084aa489",
        "target": "[RepairTarget] OEBCBank:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd4fac84b747aba53fd86a9951d20e7330daa3414",
        "target": "[RepairTarget] PowerLedgerToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd5107e77d5f3b0035d152413c89851cbeafa9a60",
        "target": "[RepairTarget] PresaleToken:buyTokens:69\nCODE: require(totalSupply + newTokens <= TOKEN_SUPPLY_LIMIT)\nOPERATION: totalSupply [+] newTokens\nSSA: totalSupply_2 [+] newTokens_1 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd54920cedf704b87342fa26d5773efabf9037a77",
        "target": "[RepairTarget] CryptoStars:buyStar:254\nCODE: uint amountseller = msg.value*97/100\nOPERATION: msg.value [*] 97\nSSA: msg.value [*] 97 --> TMP_63\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd54920cedf704b87342fa26d5773efabf9037a77",
        "target": "[RepairTarget] CryptoStars:buyStar:255\nCODE: uint amountowner = msg.value*3/100\nOPERATION: msg.value [*] 3\nSSA: msg.value [*] 3 --> TMP_65\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd54920cedf704b87342fa26d5773efabf9037a77",
        "target": "[RepairTarget] CryptoStars:buyStar:254\nCODE: uint amountseller = msg.value*97/100\nOPERATION: msg.value*97 [/] 100\nSSA: TMP_63 [/] 100 --> TMP_64\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd54920cedf704b87342fa26d5773efabf9037a77",
        "target": "[RepairTarget] CryptoStars:buyStar:255\nCODE: uint amountowner = msg.value*3/100\nOPERATION: msg.value*3 [/] 100\nSSA: TMP_65 [/] 100 --> TMP_66\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd6d62024d82b5bf4fe4a9e214991743d543f1673",
        "target": "[RepairTarget] SimpleLife:enableWhitelist:108\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd6d62024d82b5bf4fe4a9e214991743d543f1673",
        "target": "[RepairTarget] SimpleLife:disableWhitelist:114\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd7c45bff11c12aa4daa73c5b335f964cb87d5e87",
        "target": "[RepairTarget] UTWDCrowdsale:buyTokens:92\nCODE: msg.value > 1 finney * MAXfinney\nOPERATION: 1 finney [*] MAXfinney\nSSA: 1000000000000000 [*] MAXfinney_1 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd7c45bff11c12aa4daa73c5b335f964cb87d5e87",
        "target": "[RepairTarget] UTWDCrowdsale:transferFrom:176\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_19 [-] _value_1 --> REF_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd8198de1d2cb356eeb2699c66cb01afbc127aff1",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd8f2f712040d1a0d90622c767420d354c645ba4a",
        "target": "[RepairTarget] StandardToken:transfer:22\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_5 [+] _value_1 --> REF_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd8f2f712040d1a0d90622c767420d354c645ba4a",
        "target": "[RepairTarget] StandardToken:transferFrom:35\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xda0af93134b0e1325fda263326bb6202f82cfb94",
        "target": "[RepairTarget] RaisingToken:transferFrom:192\nCODE: balanceOf [_to] += _value\nOPERATION: balanceOf [_to] [+=] _value\nSSA: REF_16 [+] _value_2 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xda0e0303f4bf08cff92e88e13c0e743b14fea0d5",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xda43120e633a1c7d2109a825b493a8ded27a9d1f",
        "target": "[RepairTarget] SafeMath:mul:16\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xda5180086461ff6eeb09580181ac160522dcdcd4",
        "target": "[RepairTarget] StandardToken:transferFrom:41\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdb2fb534e111e57e1a97adae7fdb83d92062e3c1",
        "target": "[RepairTarget] EAB:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdb7ad50a39346a78f272ac286e78430061949b2a",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdb7ad50a39346a78f272ac286e78430061949b2a",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdb7c83df286f5d9c44aec3d128dad6fee05dc6d1",
        "target": "[RepairTarget] CARDToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdb7c83df286f5d9c44aec3d128dad6fee05dc6d1",
        "target": "[RepairTarget] CARDToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdbe46c0e6526e9068da1626acfddff2386635045",
        "target": "[RepairTarget] PumpToken:fallback:126\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_3 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdbe46c0e6526e9068da1626acfddff2386635045",
        "target": "[RepairTarget] PumpToken:transferFrom:63\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdbe46c0e6526e9068da1626acfddff2386635045",
        "target": "[RepairTarget] PumpToken:fallback:127\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_26 [+] tokensIssued_3 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdbe46c0e6526e9068da1626acfddff2386635045",
        "target": "[RepairTarget] PumpToken:transfer:35\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xdc54aed35a1ccab9a5c09c5dfc5f78c422705ecf",
        "target": "[RepairTarget] WLMCrowdsale:buyTokens:92\nCODE: msg.value > 1 finney * MAXfinney\nOPERATION: 1 finney [*] MAXfinney\nSSA: 1000000000000000 [*] MAXfinney_1 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdc54aed35a1ccab9a5c09c5dfc5f78c422705ecf",
        "target": "[RepairTarget] WLMCrowdsale:transferFrom:176\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_19 [-] _value_1 --> REF_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdd26a77e7901221d5c407bc329ed5c20cfaee766",
        "target": "[RepairTarget] TVTToken:distributeToken:43\nCODE: Transfer(owner, addresses[i], _value * 10**8)\nOPERATION: _value [*] 10**8\nSSA: _value_1 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdd26a77e7901221d5c407bc329ed5c20cfaee766",
        "target": "[RepairTarget] TVTToken:distributeToken:42\nCODE: balances[addresses[i]] += _value * 10**8\nOPERATION: _value [*] 10**8\nSSA: _value_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdd26a77e7901221d5c407bc329ed5c20cfaee766",
        "target": "[RepairTarget] TVTToken:distributeToken:42\nCODE: balances[addresses[i]] += _value * 10**8\nOPERATION: balances[addresses[i]] [+=] _value * 10**8\nSSA: _value_1 [*] TMP_5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdd26a77e7901221d5c407bc329ed5c20cfaee766",
        "target": "[RepairTarget] TVTToken:transfer:63\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_10 [-] _amount_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdd26a77e7901221d5c407bc329ed5c20cfaee766",
        "target": "[RepairTarget] TVTToken:transferFrom:82\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_17 [-] _amount_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdd5a3aeef473401c23f24c4c6b9cd1b0808fbb36",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xddfd6544b11a42bd1687dc598c46917a2767bee2",
        "target": "[RepairTarget] LOTT:_transfer:48\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xddfd6544b11a42bd1687dc598c46917a2767bee2",
        "target": "[RepairTarget] LOTT:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xde6c1dd8404827149f6edc09e50476aa0cd7b4ab",
        "target": "[RepairTarget] SRX:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xde86f709f9001a155a4a7fd40f0f4bcdbe41b4db",
        "target": "[RepairTarget] Crowdsale:fallback:52\nCODE: tokenReward.transfer(msg.sender, (amount * 10 ** 18) / price)\nOPERATION: amount [*] 10 ** 18\nSSA: amount_1 [*] TMP_9 --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xde86f709f9001a155a4a7fd40f0f4bcdbe41b4db",
        "target": "[RepairTarget] Crowdsale:fallback:51\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xde86f709f9001a155a4a7fd40f0f4bcdbe41b4db",
        "target": "[RepairTarget] Crowdsale:fallback:52\nCODE: tokenReward.transfer(msg.sender, (amount * 10 ** 18) / price)\nOPERATION: (amount * 10 ** 18) [/] price\nSSA: TMP_10 [/] price_2 --> TMP_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xde8a37207e64864edd454f7c33551da7598c046f",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: require(balanceOf[_to] + _value > balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xdfb4524b1c1fe01075fab0bb4e16db991d58a3bd",
        "target": "[RepairTarget] EBAYCrowdsale:fallback:78\nCODE: amount += _amount * 3\nOPERATION: amount [+=] _amount * 3\nSSA: amount_3 [+] TMP_30 --> amount_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdfb4524b1c1fe01075fab0bb4e16db991d58a3bd",
        "target": "[RepairTarget] EBAYCrowdsale:fallback:78\nCODE: amount += _amount * 3\nOPERATION: _amount [*] 3\nSSA: _amount_1 [*] 3 --> TMP_30\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdfb4524b1c1fe01075fab0bb4e16db991d58a3bd",
        "target": "[RepairTarget] EBAYCrowdsale:fallback:83\nCODE: amount += amount / 10\nOPERATION: amount [+=] amount / 10\nSSA: amount_5 [+] TMP_36 --> amount_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdfb4524b1c1fe01075fab0bb4e16db991d58a3bd",
        "target": "[RepairTarget] EBAYCrowdsale:fallback:77\nCODE: uint _amount = amount / 20\nOPERATION: amount [/] 20\nSSA: amount_3 [/] 20 --> TMP_29\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdfb4524b1c1fe01075fab0bb4e16db991d58a3bd",
        "target": "[RepairTarget] EBAYCrowdsale:fallback:83\nCODE: amount += amount / 10\nOPERATION: amount [/] 10\nSSA: amount_5 [/] 10 --> TMP_36\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe02e0dd34a6b3b48ff2bbc273a8cdf1a2160a3f2",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe02e0dd34a6b3b48ff2bbc273a8cdf1a2160a3f2",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe196e2ff578c15f158c3a171715d2cc51199838d",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe196e2ff578c15f158c3a171715d2cc51199838d",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe19ca313512e0231340e778abe7110401c737c23",
        "target": "[RepairTarget] AddressLotteryV2:forceReseed:85\nCODE: s.component4 = tx.gasprice * 7\nOPERATION: tx.gasprice [*] 7\nSSA: tx.gasprice [*] 7 --> TMP_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe1a178b681bd05964d3e3ed33ae731577d9d96dd",
        "target": "[RepairTarget] BOX:transfer:41\nCODE: balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]\nOPERATION: balances[_to] [+] _amount\nSSA: REF_3 [+] _amount_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xe1a178b681bd05964d3e3ed33ae731577d9d96dd",
        "target": "[RepairTarget] BOX:transferFrom:59\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe34443095f78099675b165f07559e9b48450c77e",
        "target": "[RepairTarget] Depay:pay:17\nCODE: donations += donation\nOPERATION: donations [+=] donation\nSSA: donations_1 [+] donation_1 --> donations_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe3f64dc522a66405c51d96aae234217a03502bb4",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xe3f64dc522a66405c51d96aae234217a03502bb4",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe50b0cefeb80bdd9e3d03517976909765c96e962",
        "target": "[RepairTarget] CoinvestToken:transferFrom:114\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe554b8835b3fa8ebd120eef63b5235ccc0514534",
        "target": "[RepairTarget] BKKToken:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe5907b3b590440b1dc8242c7923f0bf09cf281ca",
        "target": "[RepairTarget] Gentingchain:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe5b7301d818299487b744900923a40cf7d1f0242",
        "target": "[RepairTarget] ASCToken:burn:43\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe5b7301d818299487b744900923a40cf7d1f0242",
        "target": "[RepairTarget] ASCToken:burnFrom:52\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe5b7301d818299487b744900923a40cf7d1f0242",
        "target": "[RepairTarget] ASCToken:_transfer:21\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe5b7301d818299487b744900923a40cf7d1f0242",
        "target": "[RepairTarget] ASCToken:_transfer:25\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe610af01f92f19679327715b426c35849c47c657",
        "target": "[RepairTarget] PIGGY_BANK:Put:23\nCODE: Accounts[to]+=msg.value\nOPERATION: Accounts[to] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe652459d2802bae508b81698f0906b0bdcd4347f",
        "target": "[RepairTarget] Treethereum:bytesToAddr:8\nCODE: uint i = b.length-1\nOPERATION: b.length [-] 1\nSSA: REF_0 [-] 1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe652459d2802bae508b81698f0906b0bdcd4347f",
        "target": "[RepairTarget] Treethereum:bytesToAddr:8\nCODE: i--\nOPERATION: [--] i\nSSA: i_2 [-] 1 --> i_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe6f245bb5268b16c5d79a349ec57673e477bd015",
        "target": "[RepairTarget] AddressLotteryV2:forceReseed:90\nCODE: s.component4 = tx.gasprice * 7\nOPERATION: tx.gasprice [*] 7\nSSA: tx.gasprice [*] 7 --> TMP_25\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe88452316a1f6f0767bb04270c2de5844c78fd63",
        "target": "[RepairTarget] LCHToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe88452316a1f6f0767bb04270c2de5844c78fd63",
        "target": "[RepairTarget] LCHToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe894d2b82df198822ede0918e8c1c2fe606d14e0",
        "target": "[RepairTarget] BTGCToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe894d2b82df198822ede0918e8c1c2fe606d14e0",
        "target": "[RepairTarget] BTGCToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe8fed6f214e2c0853313f6cef16312494a683f4a",
        "target": "[RepairTarget] HeadEmUp:fallback:29\nCODE: ((msg.value) * 2 - house_cut) > this.balance\nOPERATION: (msg.value) [*] 2\nSSA: msg.value [*] 2 --> TMP_18\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe8fed6f214e2c0853313f6cef16312494a683f4a",
        "target": "[RepairTarget] HeadEmUp:fallback:29\nCODE: ((msg.value) * 2 - house_cut) > this.balance\nOPERATION: (msg.value) * 2 [-] house_cut\nSSA: TMP_18 [-] house_cut_1 --> TMP_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe90400328cf5192b330c70dc03ae38f5ea082f61",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe90400328cf5192b330c70dc03ae38f5ea082f61",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xea29ac8bf5001592178f6cd1275a1d0433f94c5b",
        "target": "[RepairTarget] TidePodsToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xea29ac8bf5001592178f6cd1275a1d0433f94c5b",
        "target": "[RepairTarget] TidePodsToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xeaaa3585ffdcc973a22929d09179dc06d517b84d",
        "target": "[RepairTarget] TokenERC20:_transfer:46\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_11\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xeb0c680b2e42685bc836922d416dfd836704ab09",
        "target": "[RepairTarget] ARWToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xeb0c680b2e42685bc836922d416dfd836704ab09",
        "target": "[RepairTarget] ARWToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xeb2b6b3f3fa0ea711ceb2ed77a23baeaf5ac0796",
        "target": "[RepairTarget] StandardToken:transferFrom:88\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xeb6e4fad04c68a2dd22c0a6acb1010c763c5ced8",
        "target": "[RepairTarget] StandardToken:transfer:22\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_5 [+] _value_1 --> REF_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeb6e4fad04c68a2dd22c0a6acb1010c763c5ced8",
        "target": "[RepairTarget] StandardToken:transferFrom:35\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xebdebe282cda80b3f89cdf5db35b782aa2c64c60",
        "target": "[RepairTarget] OfcToken:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xebdebe282cda80b3f89cdf5db35b782aa2c64c60",
        "target": "[RepairTarget] OfcToken:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xec02c9fb523cb1d8f61bd5e34db8de990bcea99c",
        "target": "[RepairTarget] Jabcilbcoin:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xec02c9fb523cb1d8f61bd5e34db8de990bcea99c",
        "target": "[RepairTarget] Jabcilbcoin:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xec2bc359460b4421f8a3ca3d6329a9a213861be2",
        "target": "[RepairTarget] SafeMath:div:25\nCODE: uint256 c = a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xecfe4b7afc47260cb590d3043d3f790a61bb7910",
        "target": "[RepairTarget] EbyteDistribution:enableWhitelist:65\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xecfe4b7afc47260cb590d3043d3f790a61bb7910",
        "target": "[RepairTarget] EbyteDistribution:disableWhitelist:71\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xecfe4b7afc47260cb590d3043d3f790a61bb7910",
        "target": "[RepairTarget] EbyteDistribution:distributeEbyteForETH:109\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xed04927a3849fc9db3f3341a17b7d844a6c551a8",
        "target": "[RepairTarget] CrowdInvestment:withdraw:48\nCODE: ); // \u00a7\u00e1\u00a7\u00d6\u00a7\u00e2\u00a7\u00d6\u00a7\u00d5\u00a7\u00d1\u00a7\u00d5\u00a7\u00da\u00a7\u00de \u00a7\u00d3\u00a7\u00e3\u00a7\u00d6 \u00a7\u00d5\u00a7\u00d6\u00a7\u00df\u00a7\u00ee\u00a7\u00d4\u00a7\u00da \u00a7\u00e3\u00a7\u00e0\u00a7\u00d9\nOPERATION:    require(msg.sender == cre [+=] ); // \u00a7\u00e4\u00a7\u00e0\u00a7\u00dd\u00a7\u00ee\u00a7\u00dc\u00a7\u00e0 \nSSA: msg.sender [==] creator_4 --> TMP_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xed0d530e982c5a15b4fcf419ce189e6a734c37ea",
        "target": "[RepairTarget] OHGRiverResort:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xed574d920a0c152ca136717c79a352b83f3bb058",
        "target": "[RepairTarget] TuniuToken:_transfer:91\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xed729b839322574294133c88780e809bc56abaec",
        "target": "[RepairTarget] knuckCrowdsaleOne:fallback:41\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xed729b839322574294133c88780e809bc56abaec",
        "target": "[RepairTarget] knuckCrowdsaleOne:fallback:42\nCODE: knuckReward.transfer(msg.sender, ((amount / price) * 1 ether))\nOPERATION: (amount / price) [*] 1 ether\nSSA: TMP_2 [*] 1000000000000000000 --> TMP_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xed729b839322574294133c88780e809bc56abaec",
        "target": "[RepairTarget] knuckCrowdsaleOne:fallback:42\nCODE: knuckReward.transfer(msg.sender, ((amount / price) * 1 ether))\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xede79a28fe8e2edb3efb629e7396034f76c22cc3",
        "target": "[RepairTarget] FreeMoney:fallback:15\nCODE: remaining += msg.value\nOPERATION: remaining [+=] msg.value\nSSA: remaining_3 [+] msg.value --> remaining_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xedf727c65b0616b2c68bc9276d41c77519ae7020",
        "target": "[RepairTarget] OrpheusOrganicsLaos:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xeec396f875d0d56cddf4d33b30d7cd59c8e1bbcd",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xeec396f875d0d56cddf4d33b30d7cd59c8e1bbcd",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xeed30721320b6372128e47dc48122fc2c65c1baa",
        "target": "[RepairTarget] TestPausedToken:transferFrom:61\nCODE: allowed[_from][msg.sender] = allowed[_from][msg.sender] + _value\nOPERATION: allowed[_from][msg.sender] [+] _value\nSSA: REF_17 [+] _value_1 --> TMP_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xef7c7254c290df3d167182356255cdfd8d3b400b",
        "target": "[RepairTarget] Vitaluck:manuallyResetGame:181\nCODE: currentJackpot = currentJackpot - JackpotWon\nOPERATION: currentJackpot [-] JackpotWon\nSSA: currentJackpot_9 [-] JackpotWon_1 --> TMP_46\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xef7c7254c290df3d167182356255cdfd8d3b400b",
        "target": "[RepairTarget] Vitaluck:Play:114\nCODE: uint256 MsgValue10Percent = msg.value / 10\nOPERATION: msg.value [/] 10\nSSA: msg.value [/] 10 --> TMP_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xefe14cde6752b34693e368dba320f4f1897d0556",
        "target": "[RepairTarget] GIFTO:transferFrom:114\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xefe2481c6801ae124925db7fabcba71dc6da4cba",
        "target": "[RepairTarget] XG4KCrowdFunding:newCampaign:23\nCODE: campaignID = numCampaigns++\nOPERATION: [++] numCampaigns\nSSA: numCampaigns_1 [+] 1 --> numCampaigns_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf04eaba18e56eca6be0f29f09082f62d3865782a",
        "target": "[RepairTarget] CMDToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf04eaba18e56eca6be0f29f09082f62d3865782a",
        "target": "[RepairTarget] CMDToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf06cd64eaef547247028078c676ddd5f65f7c2cd",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf1999d14fcfcc2c4068e27702cb9e8f526938062",
        "target": "[RepairTarget] XVKcoin:transferFrom:127\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_40 [-] _value_1 --> REF_40\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf2f0d1160ad0d96970dbf61df3f6ecffdb0d3631",
        "target": "[RepairTarget] LIB:transfer:124\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_9 [+] _amount_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf2fb7365b29d8f11df46259b9b1e0bcc4f00bded",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf2fb7365b29d8f11df46259b9b1e0bcc4f00bded",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf340b180a486d9c7a7da83e8c1937258c492fc8a",
        "target": "[RepairTarget] ERC20:_transfer:44\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf340b180a486d9c7a7da83e8c1937258c492fc8a",
        "target": "[RepairTarget] ERC20:_transfer:48\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf392835e6eb8c5b9b5654132c648b5ceb44ebef6",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf392835e6eb8c5b9b5654132c648b5ceb44ebef6",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf3cdcd6f66bebdb6c7d33e3ef1bf38ae0cefe3c6",
        "target": "[RepairTarget] MEMESToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf3cdcd6f66bebdb6c7d33e3ef1bf38ae0cefe3c6",
        "target": "[RepairTarget] MEMESToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf442c2f7f9f91bd482fac07ed599ece40ffcc283",
        "target": "[RepairTarget] HeelToken:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf4ada683181837c150cd0c33881dd874230eb5ae",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf4ada683181837c150cd0c33881dd874230eb5ae",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf50f781ab39bb29b75ebe3fe765c71c8a9defa70",
        "target": "[RepairTarget] SignalsSociety:acceptMembership:106\nCODE: balances[owner] += price - comission\nOPERATION: balances[owner] [+=] price - comission\nSSA: REF_15 [+] TMP_43 --> REF_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf50f781ab39bb29b75ebe3fe765c71c8a9defa70",
        "target": "[RepairTarget] SignalsSociety:acceptMembership:106\nCODE: balances[owner] += price - comission\nOPERATION: price [-] comission\nSSA: price_1 [-] comission_1 --> TMP_43\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf50f781ab39bb29b75ebe3fe765c71c8a9defa70",
        "target": "[RepairTarget] SignalsSociety:acceptMembership:109\nCODE: balances[owner] += price\nOPERATION: balances[owner] [+=] price\nSSA: REF_16 [+] price_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf51dfcef44e139edb16b00cf67b5f49f70d4ac3f",
        "target": "[RepairTarget] MyCryptoBuilding:purchaseAppartment:74\nCODE: appartments[_appartmentId].curPrice = appartments[_appartmentId].curPrice + (appartments[_appartmentId].curPrice / 2)\nOPERATION: appartments[_appartmentId].curPrice [+] (appartments[_appartmentId].curPrice / 2)\nSSA: REF_17 [+] TMP_25 --> TMP_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf51dfcef44e139edb16b00cf67b5f49f70d4ac3f",
        "target": "[RepairTarget] MyCryptoBuilding:purchaseAppartment:74\nCODE: appartments[_appartmentId].curPrice = appartments[_appartmentId].curPrice + (appartments[_appartmentId].curPrice / 2)\nOPERATION: appartments[_appartmentId].curPrice [/] 2\nSSA: REF_19 [/] 2 --> TMP_25\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf51e826a2deb6e32bda3127a4d83d2ec2e5cf67a",
        "target": "[RepairTarget] XEO:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf5261541b64ac002fce8de01a6684abefd622592",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf5261541b64ac002fce8de01a6684abefd622592",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf5ab776184d7440ce7d94190e116909377d50267",
        "target": "[RepairTarget] Daschain:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf60efc8e10692b111f7e73af821ccfdbcd78eb45",
        "target": "[RepairTarget] FrikandelToken:transfer:107\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_32 [+] _value_1 --> REF_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf6962cfe3b9618374097d51bc6691efb3974d06f",
        "target": "[RepairTarget] SafeMath:mul:16\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf6c4db2c604053f3d81b2408a435c9910706f5fb",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf6c4db2c604053f3d81b2408a435c9910706f5fb",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf8b1153fb2fa0b505f7b0616da4ce59e872569c6",
        "target": "[RepairTarget] TokenERC20:_transfer:93\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf8c8c211e976cf65ec8f01b7c70021a3b8bf5575",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf9956b16b3e2efd750568a446880981890cee770",
        "target": "[RepairTarget] StandardToken:transferFrom:70\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfa1cbc15a089042e79d3d21c5144370b5add8c66",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfa8879b2da0ff9ddcfd6265d9f81e5710847f08f",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xfa8879b2da0ff9ddcfd6265d9f81e5710847f08f",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfad7b174eb6b8838416b5b6ac5675676fb6106d4",
        "target": "[RepairTarget] BITStationERC20:_transfer:77\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfadc5068f515ad927fd3d262735574a575e56d22",
        "target": "[RepairTarget] TokenRota:_transfer:29\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfadc5068f515ad927fd3d262735574a575e56d22",
        "target": "[RepairTarget] TokenRota:_transfer:33\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfc51dddea8e49be11ad1fc1bc0dd31f7f0d285be",
        "target": "[RepairTarget] Frank:_transfer:27\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfc51dddea8e49be11ad1fc1bc0dd31f7f0d285be",
        "target": "[RepairTarget] Frank:_transfer:31\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfd8d4a9f8aa2939bbfc401213af93dce7cfd94e4",
        "target": "[RepairTarget] Tecrcoin:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfda2e0437f974c9312ca6740c07181178f645fa9",
        "target": "[RepairTarget] QLinkToken:transferFrom:113\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_16 [-] _amount_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfdd71fdbac00bb17203ed0af2f3b83d87eaaa4b0",
        "target": "[RepairTarget] Cedes:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfe99dfa5ba203a5757310589e1265f585b7abb27",
        "target": "[RepairTarget] Crowdsale:fallback:47\nCODE: amountRaised = amountRaised + amount - excess\nOPERATION: amountRaised + amount [-] excess\nSSA: TMP_8 [-] excess_3 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfe99dfa5ba203a5757310589e1265f585b7abb27",
        "target": "[RepairTarget] Crowdsale:fallback:47\nCODE: amountRaised = amountRaised + amount - excess\nOPERATION: amountRaised [+] amount\nSSA: amountRaised_2 [+] amount_1 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xff1d7f58e90c307a79f66201182ea4e16854d822",
        "target": "[RepairTarget] CryptoSeed:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_11\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xffa93aacf49297d51e211817452839052fdfb961",
        "target": "[RepairTarget] BasicToken:batchTransfer:96\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x00346fddca107aec034a367b7324f0d6419bf4b9",
        "target": "[RepairTarget] Crowdsale:fallback:46\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x00346fddca107aec034a367b7324f0d6419bf4b9",
        "target": "[RepairTarget] Crowdsale:fallback:47\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x00539863217abd04b374a422c855e4c71ed1019a",
        "target": "[RepairTarget] Storage:storeEth:25\nCODE: storedAmount += msg.value\nOPERATION: storedAmount [+=] msg.value\nSSA: storedAmount_1 [+] msg.value --> storedAmount_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x033fd9f42f7e1566b893b31078a62b2b959ebd72",
        "target": "[RepairTarget] TRLCoinSale:distributeAllTokensToContributor:479\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x045acbdc5fb02df48d1d5c62a90ffe1784b0cfe8",
        "target": "[RepairTarget] MessagingContract:newFeed:19\nCODE: feeds[feeds.length++].name=name\nOPERATION: [++] feeds.length\nSSA: REF_0 [+] 1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x045acbdc5fb02df48d1d5c62a90ffe1784b0cfe8",
        "target": "[RepairTarget] MessagingContract:feedMessage:24\nCODE: feeds[feedId].messages[feeds[feedId].messages.length++]=Message(data,alias)\nOPERATION: [++] feeds[feedId].messages.length\nSSA: REF_9 [+] 1 --> REF_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x083da6ad785894d4f249236ec52c13ca3c689ca7",
        "target": "[RepairTarget] WRTeToken:_transfer:25\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x083da6ad785894d4f249236ec52c13ca3c689ca7",
        "target": "[RepairTarget] WRTeToken:_transfer:29\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0a3454b1c30f956f52f6a5b712b390b243ecd288",
        "target": "[RepairTarget] GA_chain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0bb9beae27b1f89af85eb6388015604649dc5435",
        "target": "[RepairTarget] EtherChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0d618788b484aa2c8f51b495a18f830245a0435b",
        "target": "[RepairTarget] TokenERC20:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0d618788b484aa2c8f51b495a18f830245a0435b",
        "target": "[RepairTarget] TokenERC20:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0dc44fb8cfb88cd58628846cdcefff4089d9ac7e",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0f4546bb7fdb5929eee6736ed5794d3e6f5a9fa1",
        "target": "[RepairTarget] StandardToken:transferFrom:82\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0fb1660419476634609bd6cac0d13d7eb7e6ce24",
        "target": "[RepairTarget] Genatum:transfer:45\nCODE: Transfer(msg.sender, _to, (_value - 10**19))\nOPERATION: _value [-] 10**19\nSSA: _value_1 [-] TMP_8 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0fb1660419476634609bd6cac0d13d7eb7e6ce24",
        "target": "[RepairTarget] Genatum:transferFrom:56\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1014613e2b3cbc4d575054d4982e580d9b99d7b1",
        "target": "[RepairTarget] BCV:transfer:126\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_8 [+] _amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x13e9ec660d872f55405d70e5c52d872136f0970c",
        "target": "[RepairTarget] TKT_TokenERC20:_transfer:52\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1c65557b72804569bcd25ce53575a9c712e2eff5",
        "target": "[RepairTarget] Play2LivePromo:mintTokens:58\nCODE: totalSupply += promoValue\nOPERATION: totalSupply [+=] promoValue\nSSA: totalSupply_2 [+] promoValue_3 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1c65557b72804569bcd25ce53575a9c712e2eff5",
        "target": "[RepairTarget] Play2LivePromo:transferFrom:93\nCODE: balances[_to] -= _amount\nOPERATION: balances[_to] [-=] _amount\nSSA: REF_7 [-] _amount_1 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1d72e76e38c815b9f91661c340949e8673e897b3",
        "target": "[RepairTarget] TokenERC20:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x201916ad6b61df24a0982f885376d382e764ee5e",
        "target": "[RepairTarget] ERC20Standard:transfer:21\nCODE: balances[_recipient] += _value\nOPERATION: balances[_recipient] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x201916ad6b61df24a0982f885376d382e764ee5e",
        "target": "[RepairTarget] ERC20Standard:transferFrom:28\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2255dd4df9b6692fdff39f2924aaa679717b168c",
        "target": "[RepairTarget] BKFToken:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2300d50a447992e934816d3cd415157999202352",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2567c677473d110d75a8360c35309e63b1d52429",
        "target": "[RepairTarget] ShareXERC20:_transfer:88\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x25ff04031852660cbb733709890b9f92257ee731",
        "target": "[RepairTarget] NotFomo3D:bid:42\nCODE: endTime = (now + addTime)\nOPERATION: now [+] addTime\nSSA: now [+] addTime_3 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x27929bcfe96d06c438f43fb576db6e29930ad4f2",
        "target": "[RepairTarget] UnitedTradersToken:transferFrom:103\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x28cf9af3aca6aea0b802df31629ce1b7aa243dc2",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x28cf9af3aca6aea0b802df31629ce1b7aa243dc2",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x308ee2e41fda0053c766f6f79f4ef22f62c5f108",
        "target": "[RepairTarget] MOBOL:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3491bd2c385849353f231688bffada9d1e005a8a",
        "target": "[RepairTarget] Coin:transferFrom:176\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_24 [-] _value_1 --> REF_24\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x35109a36991ab12d4b2d5b6fa4e9be9b0713d7db",
        "target": "[RepairTarget] EcologicalShield:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3dbeeef2d03438ac3137ddb74b46b2f2c956d293",
        "target": "[RepairTarget] EtherChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f96c0e80b82458c1a96a3b7d7d2297f55df4965",
        "target": "[RepairTarget] Treethereum:bytesToAddr:9\nCODE: uint i = b.length-1\nOPERATION: b.length [-] 1\nSSA: REF_0 [-] 1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f96c0e80b82458c1a96a3b7d7d2297f55df4965",
        "target": "[RepairTarget] Treethereum:bytesToAddr:9\nCODE: i--\nOPERATION: [--] i\nSSA: i_2 [-] 1 --> i_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x414b23b9deb0da531384c5db2ac5a99ee2e07a57",
        "target": "[RepairTarget] TPCToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x414b23b9deb0da531384c5db2ac5a99ee2e07a57",
        "target": "[RepairTarget] TPCToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x417a5f48f508ec5ca2795e531a03157408303364",
        "target": "[RepairTarget] StandardToken:transferFrom:23\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x417a5f48f508ec5ca2795e531a03157408303364",
        "target": "[RepairTarget] StandardToken:transfer:16\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x42f1935bae7a16eac35a9f05e485ecf42a111e00",
        "target": "[RepairTarget] Penny:bid:42\nCODE: endTime = (now + addTime)\nOPERATION: now [+] addTime\nSSA: now [+] addTime_3 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x43c4fd08e99d0481c186c206271972656b717f3d",
        "target": "[RepairTarget] ZincElement:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x44133f734d7fae6c3a69879ddb94cda47bfa625d",
        "target": "[RepairTarget] PocketChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x47d752f8838d301704bd8ed4c8ecbbe30c668fe9",
        "target": "[RepairTarget] ripplepro:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4809494e680121c51b6b9885ce505a868a09b869",
        "target": "[RepairTarget] SafeMath:mul:23\nCODE: require(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x48523d4c738591c3ae8bcfc3c5171991a15ad301",
        "target": "[RepairTarget] MyFirstEthereumToken:buyTokens:324\nCODE: tokensAmount += extraTokens\nOPERATION: tokensAmount [+=] extraTokens\nSSA: tokensAmount_1 [+] extraTokens_1 --> tokensAmount_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x48523d4c738591c3ae8bcfc3c5171991a15ad301",
        "target": "[RepairTarget] MyFirstEthereumToken:buyTokens:329\nCODE: totalSupply += tokensAmount\nOPERATION: totalSupply [+=] tokensAmount\nSSA: totalSupply_9 [+] tokensAmount_3 --> totalSupply_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x48523d4c738591c3ae8bcfc3c5171991a15ad301",
        "target": "[RepairTarget] MyFirstEthereumToken:_transfer:88\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4947d5e63a3d798131bccbdeeaac63f9bd3ee485",
        "target": "[RepairTarget] BP:transfer:75\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4947d5e63a3d798131bccbdeeaac63f9bd3ee485",
        "target": "[RepairTarget] BP:transferFrom:100\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4d09c5e758ca68be27240f29fb681e5a5341ca98",
        "target": "[RepairTarget] StandardToken:transferFrom:68\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4dda7044db5fa409cc36629077ef6e56ee9a96ee",
        "target": "[RepairTarget] BasicToken:batchTransfer:96\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4e3117f901ef73803c522a2d27ad1071759ad094",
        "target": "[RepairTarget] SafeMath:div:19\nCODE: uint256 c = a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x51c83d97236646fca3239556253032357285c0a1",
        "target": "[RepairTarget] ArbitrageCoin:mint:21\nCODE: balances[receiver] += amount\nOPERATION: balances[receiver] [+=] amount\nSSA: REF_0 [+] amount_1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x51c83d97236646fca3239556253032357285c0a1",
        "target": "[RepairTarget] ArbitrageCoin:send:27\nCODE: balances[receiver] += amount\nOPERATION: balances[receiver] [+=] amount\nSSA: REF_3 [+] amount_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5284c648f630dcac9d34caeafc8e62097d8f1b63",
        "target": "[RepairTarget] BKCToken:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x563cc93a2f4f00c1e963e0da73c8b1279d382bd6",
        "target": "[RepairTarget] FixedSupplyToken:transfer:74\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x563cc93a2f4f00c1e963e0da73c8b1279d382bd6",
        "target": "[RepairTarget] FixedSupplyToken:transferFrom:99\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5db4b520284049d7dcb21c6317664190791bb8e5",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5fb6a842ea587fa8d0486589742ce68ef24834a4",
        "target": "[RepairTarget] TokenERC20:proofOfWork:185\nCODE: balanceOf[msg.sender] += curReward\nOPERATION: balanceOf[msg.sender] [+=] curReward\nSSA: REF_25 [+] curReward_4 --> REF_25\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5fb6a842ea587fa8d0486589742ce68ef24834a4",
        "target": "[RepairTarget] TokenERC20:proofOfWork:186\nCODE: mined+=curReward\nOPERATION: mined [+=] curReward\nSSA: mined_1 [+] curReward_4 --> mined_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x60eafe7f42da9fe2a56fef0fbfeeabc0deee631b",
        "target": "[RepairTarget] WinlastmileToken:fallback:178\nCODE: uint256 tokensIssued = (msg.value / 1e10) * WLMTPrice + WLMTBounce * 1e8\nOPERATION: (msg.value / 1e10) * WLMTPrice [+] WLMTBounce * 1e8\nSSA: TMP_57 [+] TMP_58 --> TMP_59\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x60eafe7f42da9fe2a56fef0fbfeeabc0deee631b",
        "target": "[RepairTarget] WinlastmileToken:fallback:182\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_26 [+] tokensIssued_1 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x60eafe7f42da9fe2a56fef0fbfeeabc0deee631b",
        "target": "[RepairTarget] WinlastmileToken:fallback:178\nCODE: uint256 tokensIssued = (msg.value / 1e10) * WLMTPrice + WLMTBounce * 1e8\nOPERATION: WLMTBounce [*] 1e8\nSSA: WLMTBounce_2 [*] 100000000 --> TMP_58\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x60eafe7f42da9fe2a56fef0fbfeeabc0deee631b",
        "target": "[RepairTarget] WinlastmileToken:burn:204\nCODE: assert(balances[msg.sender] == pre_balance - num * 1e8)\nOPERATION: num [*] 1e8\nSSA: num_1 [*] 100000000 --> TMP_78\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x60eafe7f42da9fe2a56fef0fbfeeabc0deee631b",
        "target": "[RepairTarget] WinlastmileToken:fallback:178\nCODE: uint256 tokensIssued = (msg.value / 1e10) * WLMTPrice + WLMTBounce * 1e8\nOPERATION: (msg.value / 1e10) [*] WLMTPrice\nSSA: TMP_56 [*] WLMTPrice_2 --> TMP_57\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x60eafe7f42da9fe2a56fef0fbfeeabc0deee631b",
        "target": "[RepairTarget] WinlastmileToken:burn:204\nCODE: assert(balances[msg.sender] == pre_balance - num * 1e8)\nOPERATION: pre_balance [-] num * 1e8\nSSA: pre_balance_1 [-] TMP_78 --> TMP_79\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x60eafe7f42da9fe2a56fef0fbfeeabc0deee631b",
        "target": "[RepairTarget] WinlastmileToken:fallback:178\nCODE: uint256 tokensIssued = (msg.value / 1e10) * WLMTPrice + WLMTBounce * 1e8\nOPERATION: msg.value [/] 1e10\nSSA: msg.value [/] 10000000000 --> TMP_56\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x642a504c906d12e78792c2de1b3671329d2d5397",
        "target": "[RepairTarget] GuangPengChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x662ba51f62591830cd380a7a9beb232dbd7a92a4",
        "target": "[RepairTarget] StandardToken:transferFrom:85\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6684575b30280129cb4af49d1515bb9ae77043bf",
        "target": "[RepairTarget] StandardToken:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6797a2a7f954fc6769730270ea03776c6c4fbf6f",
        "target": "[RepairTarget] LockUtils:getLockWFee:361\nCODE: now < (createTime + 40 minutes)\nOPERATION: createTime [+] 40 minutes\nSSA: createTime_1 [+] 2400 --> TMP_61\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6c79358d9c6ba9c0eedd0a27f122c193125dc344",
        "target": "[RepairTarget] Tacoin:_transfer:44\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6e0646b014d99d79f4e875b6723fa8e46becbd15",
        "target": "[RepairTarget] CENToken:_transfer:33\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6e0646b014d99d79f4e875b6723fa8e46becbd15",
        "target": "[RepairTarget] CENToken:_transfer:37\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x71186cc94d4bd4aad5bc2e5e329e32a9f70e1ac6",
        "target": "[RepairTarget] VRYCoin:fallback:149\nCODE: balances[fundsWallet] = balances[fundsWallet] - amount\nOPERATION: balances[fundsWallet] [-] amount\nSSA: REF_52 [-] amount_1 --> TMP_56\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x75f9379833800f397ead23dc2317daa456a4bedb",
        "target": "[RepairTarget] Nono:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x787b9a8978b21476abb78876f24c49c0e513065e",
        "target": "[RepairTarget] AddressLotteryV2:forceReseed:89\nCODE: s.component4 = tx.gasprice * 7\nOPERATION: tx.gasprice [*] 7\nSSA: tx.gasprice [*] 7 --> TMP_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x791af7fccfee46330bb02dac1e2585dc6f49c996",
        "target": "[RepairTarget] ReddCoin:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x791af7fccfee46330bb02dac1e2585dc6f49c996",
        "target": "[RepairTarget] ReddCoin:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x79650799e7899a802cb96c0bc33a6a8d4ce4936c",
        "target": "[RepairTarget] AIT_TokenERC20:_transfer:52\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7bd24234b5e9f5e968280db50a7095fe8df469dd",
        "target": "[RepairTarget] Kryptos:_transfer:58\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7e81344b8d0819f18c1ce6c2792c56efb51b9256",
        "target": "[RepairTarget] TureTreasureChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7f5cbb9a4b70596acde1baed5b05e88da8957c6e",
        "target": "[RepairTarget] StandardToken:transferFrom:23\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7f5cbb9a4b70596acde1baed5b05e88da8957c6e",
        "target": "[RepairTarget] StandardToken:transfer:16\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x823dcd364a0b3f2519751214ca1bcaa093826b90",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x835a77b2dbd77a9da5707f6333350315b3e01537",
        "target": "[RepairTarget] Kryptos:_transfer:58\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x838b7f109449df02e151ec9e7ebe64edb53dcb82",
        "target": "[RepairTarget] Kryptos:_transfer:57\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x87372315edfcdf141b5d657d29ec17280abdaae4",
        "target": "[RepairTarget] Token:_transfer:34\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x87372315edfcdf141b5d657d29ec17280abdaae4",
        "target": "[RepairTarget] Token:_transfer:38\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x88d60255f917e3eb94eae199d827dad837fac4cb",
        "target": "[RepairTarget] GasToken1:internalTransfer:25\nCODE: s_balances[to] += value\nOPERATION: s_balances[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x88d60255f917e3eb94eae199d827dad837fac4cb",
        "target": "[RepairTarget] GasToken1:freeStorage:140\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x89e9062b160a8d499727baf544bfaf4997dc4ccf",
        "target": "[RepairTarget] SimpleTGE:blacklistAddresses:117\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x89e9062b160a8d499727baf544bfaf4997dc4ccf",
        "target": "[RepairTarget] SimpleTGE:whitelistAddresses:126\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8d51efc43c810b7982e599f67e59ee27c46bcc25",
        "target": "[RepairTarget] FitToken:transfer:50\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8d51efc43c810b7982e599f67e59ee27c46bcc25",
        "target": "[RepairTarget] FitToken:transferFrom:69\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8f84f9047e3c8311fd521b7320e5540dfbb24bd9",
        "target": "[RepairTarget] PictureLibraryCoin:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x94a8320d75fe982889795ca8b1a51212616d719c",
        "target": "[RepairTarget] Token:Token:262\nCODE: uint256 _supply = 1000000000*(10**_decimals)\nOPERATION: 1000000000 [*] (10**_decimals)\nSSA: 1000000000 [*] TMP_70 --> TMP_71\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x94cb815f4b601b00b363b3177b4d8ed8e0eb7cf2",
        "target": "[RepairTarget] StandardToken:transferFrom:68\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x960f56e8a9f2084acf39a686ee5b1f5467cf81e4",
        "target": "[RepairTarget] StandardToken:transferFrom:23\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x960f56e8a9f2084acf39a686ee5b1f5467cf81e4",
        "target": "[RepairTarget] StandardToken:transfer:16\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9aae01dc49d6d790c564ec33c428b1cc06547f0b",
        "target": "[RepairTarget] Kryptos:_transfer:58\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9b6754b2fb288a6b6dff59436b1b98e35255a663",
        "target": "[RepairTarget] TWQCrowdsale:add_hard_limit:42\nCODE: hard_limit += additional_limit * 1 ether\nOPERATION: hard_limit [+=] additional_limit * 1 ether\nSSA: hard_limit_4 [+] TMP_13 --> hard_limit_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9b6754b2fb288a6b6dff59436b1b98e35255a663",
        "target": "[RepairTarget] TWQCrowdsale:fallback:27\nCODE: tokens_backed[msg.sender] += msg.value / token_price\nOPERATION: msg.value [/] token_price\nSSA: msg.value [/] token_price_2 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9b6754b2fb288a6b6dff59436b1b98e35255a663",
        "target": "[RepairTarget] TWQCrowdsale:fallback:27\nCODE: tokens_backed[msg.sender] += msg.value / token_price\nOPERATION: tokens_backed[msg.sender] [+=] msg.value / token_price\nSSA: REF_0 [+] TMP_8 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9b6754b2fb288a6b6dff59436b1b98e35255a663",
        "target": "[RepairTarget] TWQCrowdsale:add_hard_limit:42\nCODE: hard_limit += additional_limit * 1 ether\nOPERATION: additional_limit [*] 1 ether\nSSA: additional_limit_1 [*] 1000000000000000000 --> TMP_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9d282df895d805bb4e17f804c5af4e3191752b9e",
        "target": "[RepairTarget] Crowdsale:fallback:48\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9d282df895d805bb4e17f804c5af4e3191752b9e",
        "target": "[RepairTarget] Crowdsale:fallback:49\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9dad680c5caca33a83a6e2a8e335d2a8cb4b8330",
        "target": "[RepairTarget] LilithToken:_transfer:85\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9f71ad6f818b79157a093be962c461d0bc9dfe48",
        "target": "[RepairTarget] StandardToken:transfer:19\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9f71ad6f818b79157a093be962c461d0bc9dfe48",
        "target": "[RepairTarget] StandardToken:transferFrom:28\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa2437d1cc372dfe4a1145bc74cb6061f1665d2d3",
        "target": "[RepairTarget] Kryptos:ShareRoomDATA:107\nCODE: balanceOf[Reserve] += TXfee\nOPERATION: balanceOf[Reserve] [+=] TXfee\nSSA: REF_17 [+] TXfee_1 --> REF_17\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa2437d1cc372dfe4a1145bc74cb6061f1665d2d3",
        "target": "[RepairTarget] Kryptos:_transfer:58\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa4047e495a7319c270b610da36a5ac44fbc108a6",
        "target": "[RepairTarget] AdvancedArtificialIntelligenceSafetyDefense:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa4cbc38dfc34acf188deadea6eeadbb44ff2e530",
        "target": "[RepairTarget] MobileGoToken:transfer:86\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa4cbc38dfc34acf188deadea6eeadbb44ff2e530",
        "target": "[RepairTarget] MobileGoToken:transferFrom:111\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa7fa7588cd7ebf3d0e128f07da7406dd74e241df",
        "target": "[RepairTarget] TWQCrowdsale:fallback:30\nCODE: tokens_backed[msg.sender] += msg.value / token_price\nOPERATION: tokens_backed[msg.sender] [+=] msg.value / token_price\nSSA: REF_0 [+] TMP_15 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa7fa7588cd7ebf3d0e128f07da7406dd74e241df",
        "target": "[RepairTarget] TWQCrowdsale:fallback:30\nCODE: tokens_backed[msg.sender] += msg.value / token_price\nOPERATION: msg.value [/] token_price\nSSA: msg.value [/] token_price_2 --> TMP_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa9a4ebd6bfd0cbbb41d479a9071c1b8ad9c17dea",
        "target": "[RepairTarget] StromaCn:transfer:111\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa9a4ebd6bfd0cbbb41d479a9071c1b8ad9c17dea",
        "target": "[RepairTarget] StromaCn:transferFrom:135\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaa72930ffb678422fd8c8b6f8369dc71aa2df9c2",
        "target": "[RepairTarget] EtherChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaff8620e9c896eb0ad30b3fdb4c1dc2e9f9dcad6",
        "target": "[RepairTarget] ERC20:transfer:71\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaff8620e9c896eb0ad30b3fdb4c1dc2e9f9dcad6",
        "target": "[RepairTarget] ERC20:transferFrom:79\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xba4c70cbdfb04336c5865b0c7e71ce4834b63757",
        "target": "[RepairTarget] BitcoinGalaxy:Mine:100\nCODE: _totalSupply += _miningReward\nOPERATION: _totalSupply [+=] _miningReward\nSSA: _totalSupply_2 [+] _miningReward_2 --> _totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xba4c70cbdfb04336c5865b0c7e71ce4834b63757",
        "target": "[RepairTarget] BitcoinGalaxy:transferFrom:55\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_11 [-] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xba4c70cbdfb04336c5865b0c7e71ce4834b63757",
        "target": "[RepairTarget] BitcoinGalaxy:Mine:90\nCODE: _maxMiningReward = _maxMiningReward / 2\nOPERATION: _maxMiningReward [/] 2\nSSA: _maxMiningReward_1 [/] 2 --> TMP_26\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc27c95350ecd634c80df89db0f10cd5c24b7b11f",
        "target": "[RepairTarget] PixieCoin:_transfer:79\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc3aef0036f5b146440775b2a1d5bf45fd8992741",
        "target": "[RepairTarget] ROICOIN:approve:79\nCODE: allowed[msg.sender][_spender] += _value\nOPERATION: allowed[msg.sender][_spender] [+=] _value\nSSA: REF_21 [+] _value_1 --> REF_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc3aef0036f5b146440775b2a1d5bf45fd8992741",
        "target": "[RepairTarget] ROICOIN:transfer:48\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0\nOPERATION: balances[_to] [+] _value\nSSA: REF_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xc3aef0036f5b146440775b2a1d5bf45fd8992741",
        "target": "[RepairTarget] ROICOIN:transferFrom:63\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_11 [+] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc3cb67158b87fd0615bf5976ea33f86bb10f198a",
        "target": "[RepairTarget] StandardToken:transferFrom:79\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc64a428451908704b3af6cffabe03ea56883ecef",
        "target": "[RepairTarget] VitManToken:transferFrom:109\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_18 [-] _value_1 --> REF_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc833efc39d60d6d718bd550d4e2d3748a8b91aea",
        "target": "[RepairTarget] PRIME:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc9d40360cac0d5fd69e9ddc2e32d9b683bb51ad4",
        "target": "[RepairTarget] ROICOIN:transfer:48\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0\nOPERATION: balances[_to] [+] _value\nSSA: REF_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xcca1f7e09597433c8ab97d78ce438f9706f57358",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcff9e94af4864a52232fc632002b31fe1c8eed60",
        "target": "[RepairTarget] Caesium:TokenERC20:29\nCODE: totalSupply = initialSupply * 10 ** uint256(decimals)\nOPERATION: initialSupply [*] 10 ** uint256(decimals)\nSSA: initialSupply_1 [*] TMP_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcff9e94af4864a52232fc632002b31fe1c8eed60",
        "target": "[RepairTarget] Caesium:_transfer:52\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd2159bdcf38e22b684d698d0b7ce01a36fdb4af1",
        "target": "[RepairTarget] zpzToken:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd4c2a79144df5704972e29cb54f1c88c58dc0bbd",
        "target": "[RepairTarget] Cryptobanks:transfer:48\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd4c2a79144df5704972e29cb54f1c88c58dc0bbd",
        "target": "[RepairTarget] Cryptobanks:transferFrom:66\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd77bcd9cf4212a41defbcd2e2ff0f50fea2be643",
        "target": "[RepairTarget] GA_chain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd99e6914e2fbc860f012e7e6711b249e8698892c",
        "target": "[RepairTarget] EtherChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdc6e779c9648650ded011b5f7dce287b6026dae8",
        "target": "[RepairTarget] NHGame:setNewValue:15\nCODE: stake+=msg.value\nOPERATION: stake [+=] msg.value\nSSA: stake_1 [+] msg.value --> stake_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdc6e779c9648650ded011b5f7dce287b6026dae8",
        "target": "[RepairTarget] NHGame:setNewValue:17\nCODE: solveTime=block.number+40320\nOPERATION: block.number [+] 40320\nSSA: block.number [+] 40320 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xddad0c85488b0a7aeaf22d96f5c4f28eb046b0a7",
        "target": "[RepairTarget] PryvCn:transfer:111\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_12 [+] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xddad0c85488b0a7aeaf22d96f5c4f28eb046b0a7",
        "target": "[RepairTarget] PryvCn:transferFrom:135\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_20 [-] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe13c798fcb949c5b9ca1fd818f5f04fb73dc343f",
        "target": "[RepairTarget] AnimToken:transferFrom:65\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe13c798fcb949c5b9ca1fd818f5f04fb73dc343f",
        "target": "[RepairTarget] AnimToken:fallback:128\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe13c798fcb949c5b9ca1fd818f5f04fb73dc343f",
        "target": "[RepairTarget] AnimToken:transfer:37\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xe336873845599822e3a270219d1329da3917fb13",
        "target": "[RepairTarget] XXXChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe45250f79c53492f8f5468f08cdbb70ec5fb0c17",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe5c943efd21ef0103d7ac6c4d7386e73090a11af",
        "target": "[RepairTarget] TokenERC20:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe79cf9b7d14b87b84e8339485458f17fce3adf72",
        "target": "[RepairTarget] KLSToken:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe9c021d1c14f28bdf0016260b552661b9e84aac4",
        "target": "[RepairTarget] XmanToken:transferFrom:60\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_16 [-] _value_1 --> REF_16\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe9c021d1c14f28bdf0016260b552661b9e84aac4",
        "target": "[RepairTarget] XmanToken:fallback:108\nCODE: totalSupply += tokensIssued\nOPERATION: totalSupply [+=] tokensIssued\nSSA: totalSupply_2 [+] tokensIssued_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe9c021d1c14f28bdf0016260b552661b9e84aac4",
        "target": "[RepairTarget] XmanToken:transfer:32\nCODE: bool overflowed = balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xe9f3cb0229eb8d0aaf03ec84883950134ed20ddc",
        "target": "[RepairTarget] SLT:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xea8573b522213211641968cf370be869cc8578ca",
        "target": "[RepairTarget] LockUtils:getLockWFee:382\nCODE: s);\r\n            }\r\n        }\r\n  \nOPERATION: se if (ac [*] nt == cornerstone_inves\nSSA: account_1 [==] cornerstone_investment_1 --> TMP_83\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeacb2b911c87259a2e801e2ea01eb69041ddd223",
        "target": "[RepairTarget] WBIToken:transferBatch:163\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xebc7cd2684dd96619841c7994343c5a8bda94b10",
        "target": "[RepairTarget] StandardToken:transferFrom:54\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xed3572df7d22c6af7c6a40f907224e9acdc1a6bf",
        "target": "[RepairTarget] StandardToken:transfer:36\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xed3572df7d22c6af7c6a40f907224e9acdc1a6bf",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xedae73d8ae8b81a19439acc0591ca8b1e0072312",
        "target": "[RepairTarget] SafeMath:mul:15\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf05740fdac0fe8ec7ec9006dfae13873429bf6a2",
        "target": "[RepairTarget] StandardToken:transferFrom:23\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf05740fdac0fe8ec7ec9006dfae13873429bf6a2",
        "target": "[RepairTarget] StandardToken:transfer:16\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf15666603540fb9218b85567ee833455cb586dc0",
        "target": "[RepairTarget] CardMarket:generateRunes:476\nCODE: i++\nOPERATION: [++] i\nSSA: i_5 [+] 1 --> i_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf15666603540fb9218b85567ee833455cb586dc0",
        "target": "[RepairTarget] CardMarket:generateRunes:478\nCODE: i++\nOPERATION: [++] i\nSSA: i_19 [+] 1 --> i_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf2e449491975e376342586dd1229da20c969a39d",
        "target": "[RepairTarget] CrisCoin:_transfer:57\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf4a26409f3f60f14e6e1c62ca4c2f4cbefa34084",
        "target": "[RepairTarget] WhiteListed:setAllocation:167\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf84df2db2c87dd650641f8904af71ebfc3dde0ea",
        "target": "[RepairTarget] MyToken:_transfer:67\nCODE: index++\nOPERATION: [++] index\nSSA: index_2 [+] 1 --> index_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf85112919e478fcf33423012ed2ddc36bed6c512",
        "target": "[RepairTarget] TokenERC20:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfa4ac81d0cbc55e9f2cfe798f25e54ca378f8039",
        "target": "[RepairTarget] Escrow:start:22\nCODE: balances[msg.sender][payee] = balances[msg.sender][payee] + msg.value\nOPERATION: balances[msg.sender][payee] [+] msg.value\nSSA: REF_3 [+] msg.value --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfb6006945f8b135a76cf8d0831a6532b959102e1",
        "target": "[RepairTarget] SafeMath:safeAdd:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfccfeec6e08024465a031b994778ccd0a847f047",
        "target": "[RepairTarget] ERC20Standard:transferFrom:70\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfd0cc0f0e20bb5aa423b08de4cab70a53cf1ffda",
        "target": "[RepairTarget] TokenERC20:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfec7b4c8c4bd73522c574d31f6801f3f8955ffdc",
        "target": "[RepairTarget] ERC20Standard:transfer:21\nCODE: balances[_recipient] += _value\nOPERATION: balances[_recipient] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfec7b4c8c4bd73522c574d31f6801f3f8955ffdc",
        "target": "[RepairTarget] ERC20Standard:transferFrom:28\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x001ea8150f4965195e10e5b5568047e1555a6dcd",
        "target": "[RepairTarget] SafeMath:mul:21\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0022ee765799c1f836a36612b8c62be098fd0bbb",
        "target": "[RepairTarget] SOCGEN_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0022ee765799c1f836a36612b8c62be098fd0bbb",
        "target": "[RepairTarget] SOCGEN_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x009725f31c561a64c30c89e74adb995c570330ff",
        "target": "[RepairTarget] CHCTokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x01b1ccae68dc41d8a2a0f48e8f0d38b0c064ef43",
        "target": "[RepairTarget] YSS:sell:105\nCODE: revenue = amount * sellPrice\nOPERATION: amount [*] sellPrice\nSSA: amount_1 [*] sellPrice_4 --> TMP_38\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x01b1ccae68dc41d8a2a0f48e8f0d38b0c064ef43",
        "target": "[RepairTarget] YSS:mintToken:73\nCODE: totalSupply += mintedAmount\nOPERATION: totalSupply [+=] mintedAmount\nSSA: totalSupply_3 [+] mintedAmount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x03dd0a7ddde3d83685720a36f8f359406ff30bc5",
        "target": "[RepairTarget] WTI_10_20190919:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x03dd0a7ddde3d83685720a36f8f359406ff30bc5",
        "target": "[RepairTarget] WTI_10_20190919:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x057bfea37ba2637dc00abd2ef0eab5abfbf31076",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x06d769892ef99d18a344cd95909d394a5ddb2efb",
        "target": "[RepairTarget] MGCGameToken:transfer:25\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x06d769892ef99d18a344cd95909d394a5ddb2efb",
        "target": "[RepairTarget] MGCGameToken:transferFrom:52\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x06dbc63cc41cf45ca60cc64e87edb2eee8806182",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x07142570106bea3faadb313120ce8a231cd97fd1",
        "target": "[RepairTarget] ENGIE_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x07142570106bea3faadb313120ce8a231cd97fd1",
        "target": "[RepairTarget] ENGIE_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x094a7d5a89b4215334f2658841986ea3702ae615",
        "target": "[RepairTarget] OnePercentGift:claim:16\nCODE: msg.value == address(this).balance * 100\nOPERATION: address(this).balance [*] 100\nSSA: TMP_1 [*] 100 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x09829ba8c8da4e926142545a0113cc0e5e509550",
        "target": "[RepairTarget] Rusal_TCI_V_20180920:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x09829ba8c8da4e926142545a0113cc0e5e509550",
        "target": "[RepairTarget] Rusal_TCI_V_20180920:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x09829ba8c8da4e926142545a0113cc0e5e509550",
        "target": "[RepairTarget] Rusal_TCI_V_20180920:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x09829ba8c8da4e926142545a0113cc0e5e509550",
        "target": "[RepairTarget] Rusal_TCI_V_20180920:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x09a9b53a3c0aa29004b91b3e7448fc9fc8aae300",
        "target": "[RepairTarget] StandardToken:transferFrom:123\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0a28dd8141394e6d680d20d54ffeb3544b576a78",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0a323ec3593849cdbfeebce8416bfbbc792044e7",
        "target": "[RepairTarget] Rusal_CIP_V_20180920:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x0a323ec3593849cdbfeebce8416bfbbc792044e7",
        "target": "[RepairTarget] Rusal_CIP_V_20180920:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x0a323ec3593849cdbfeebce8416bfbbc792044e7",
        "target": "[RepairTarget] Rusal_CIP_V_20180920:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x0a323ec3593849cdbfeebce8416bfbbc792044e7",
        "target": "[RepairTarget] Rusal_CIP_V_20180920:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0adcae90088fae1007555733b4d3d63f24f4a2a3",
        "target": "[RepairTarget] ERC20Standard:transfer:28\nCODE: balances[_recipient] += _value\nOPERATION: balances[_recipient] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0adcae90088fae1007555733b4d3d63f24f4a2a3",
        "target": "[RepairTarget] ERC20Standard:transferFrom:35\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0af7540a45a957205f0e4fbffd72a013c5f8a3da",
        "target": "[RepairTarget] PolyusCdsTok20220328II:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0af7540a45a957205f0e4fbffd72a013c5f8a3da",
        "target": "[RepairTarget] PolyusCdsTok20220328II:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0bb6d7baee15e56663aabd8ef0ba33b50413d46d",
        "target": "[RepairTarget] ibaMultisig:topBalance:140\nCODE: uint loglen = wallets[creator][id].logs.length++\nOPERATION: [++] wallets[creator][id].logs.length\nSSA: REF_74 [+] 1 --> REF_74\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0bb8a507fd22269ddb5cfb241a80b2b09c5f7c52",
        "target": "[RepairTarget] TokenERC20:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0be381344989b69cefb0ecfd9dfcb53d834be2f1",
        "target": "[RepairTarget] BAZAN__20230515:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0be381344989b69cefb0ecfd9dfcb53d834be2f1",
        "target": "[RepairTarget] BAZAN__20230515:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0c2a3fec0f46dc3591b45da2a3395a604ca0ba0f",
        "target": "[RepairTarget] ElephantsPaymentCoin:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f",
        "target": "[RepairTarget] AnimatixToken:transfer:95\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_11 [+] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f",
        "target": "[RepairTarget] AnimatixToken:transferFrom:110\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_19 [-] _amount_1 --> REF_19\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0ce4c6fd22c23ccb31d8e6f98ab79a6b6313c634",
        "target": "[RepairTarget] CAC_2400_20200917:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0ce4c6fd22c23ccb31d8e6f98ab79a6b6313c634",
        "target": "[RepairTarget] CAC_2400_20200917:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0e285934fa1370b014fd5c639cf9eb03433af238",
        "target": "[RepairTarget] AbxyjoyCoin:transferFrom:49\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0f93f35822f611500773097e454fc04f9c2d3ef6",
        "target": "[RepairTarget] HRChainERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x118b700d53e0ec8ece768aa178cc82da0eda3c7f",
        "target": "[RepairTarget] SWITZERLAND_WINS:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x118b700d53e0ec8ece768aa178cc82da0eda3c7f",
        "target": "[RepairTarget] SWITZERLAND_WINS:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x12b4528c5457183dd3fa651a0628a086256d4797",
        "target": "[RepairTarget] StandardToken:transferFrom:19\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x12b4528c5457183dd3fa651a0628a086256d4797",
        "target": "[RepairTarget] StandardToken:transfer:12\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x12cca3373658d7d9a6d92403065377723ceb7b9b",
        "target": "[RepairTarget] Taurus_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: sg.value / 1e10) * ICORatio + [+] RDROPBounce * 1e8;\n\nSSA: TMP_57 [+] TMP_58 --> TMP_59\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x12cca3373658d7d9a6d92403065377723ceb7b9b",
        "target": "[RepairTarget] Taurus_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: RDROPBounce * [*] 8;\n\nSSA: TMP_56 [*] ICORatio_2 --> TMP_57\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x12cca3373658d7d9a6d92403065377723ceb7b9b",
        "target": "[RepairTarget] Taurus_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: sg.value / 1e10) * [*] ORatio +\nSSA: AIRDROPBounce_2 [*] 100000000 --> TMP_58\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x12cca3373658d7d9a6d92403065377723ceb7b9b",
        "target": "[RepairTarget] Taurus_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: g.value / [/] 10) \nSSA: msg.value [/] 10000000000 --> TMP_56\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1320dd9ccdf00249a9b9c94f6554945a8dac4608",
        "target": "[RepairTarget] PeakAssetCoin:_transfer:23\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1320dd9ccdf00249a9b9c94f6554945a8dac4608",
        "target": "[RepairTarget] PeakAssetCoin:_transfer:27\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x13843a0cc92031d3f02192719793a97752cfed69",
        "target": "[RepairTarget] FRO:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1466ea075cdd79b2fad1b39d73d88cc29373f062",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x146e1a57309d8030710ec106aa7725b6817c2130",
        "target": "[RepairTarget] Ilow_Utility_V:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x146e1a57309d8030710ec106aa7725b6817c2130",
        "target": "[RepairTarget] Ilow_Utility_V:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1507ca79e70ef9520c53c7113d7415d5d01fdc7c",
        "target": "[RepairTarget] Rusal_cds_20221212_XI:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1507ca79e70ef9520c53c7113d7415d5d01fdc7c",
        "target": "[RepairTarget] Rusal_cds_20221212_XI:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1507ca79e70ef9520c53c7113d7415d5d01fdc7c",
        "target": "[RepairTarget] Rusal_cds_20221212_XI:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1507ca79e70ef9520c53c7113d7415d5d01fdc7c",
        "target": "[RepairTarget] Rusal_cds_20221212_XI:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1571e17d341ce39c3e7feb971a64650e6b7d5078",
        "target": "[RepairTarget] DAIMLER_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1571e17d341ce39c3e7feb971a64650e6b7d5078",
        "target": "[RepairTarget] DAIMLER_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x16bb5d4424e64dd928714e596e69ae9a2c8be1ed",
        "target": "[RepairTarget] TokenERC20:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x17d88f30b99c50ef0c7b5c9caef288388f3ee3d0",
        "target": "[RepairTarget] Rusal_TCI_IX_20181220:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x17d88f30b99c50ef0c7b5c9caef288388f3ee3d0",
        "target": "[RepairTarget] Rusal_TCI_IX_20181220:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x17d88f30b99c50ef0c7b5c9caef288388f3ee3d0",
        "target": "[RepairTarget] Rusal_TCI_IX_20181220:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x17d88f30b99c50ef0c7b5c9caef288388f3ee3d0",
        "target": "[RepairTarget] Rusal_TCI_IX_20181220:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x18420e17f0ee1b32d1174f673c7eaa946a180b63",
        "target": "[RepairTarget] StrongHold:tokensToEthereum_:683\nCODE: uint256 tokens_ = (_tokens + 1e18)\nOPERATION: _tokens [+] 1e18\nSSA: _tokens_1 [+] 1000000000000000000 --> TMP_149\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x18420e17f0ee1b32d1174f673c7eaa946a180b63",
        "target": "[RepairTarget] StrongHold:sqrt:705\nCODE: uint z = (x + 1) / 2\nOPERATION: x [+] 1\nSSA: x_1 [+] 1 --> TMP_164\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x18420e17f0ee1b32d1174f673c7eaa946a180b63",
        "target": "[RepairTarget] StrongHold:sqrt:705\nCODE: uint z = (x + 1) / 2\nOPERATION: (x + 1) [/] 2\nSSA: TMP_164 [/] 2 --> TMP_165\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x194eed6c387aed1d36fb6b2eb40fe7827f1ec3f6",
        "target": "[RepairTarget] WTI_10_20200917:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x194eed6c387aed1d36fb6b2eb40fe7827f1ec3f6",
        "target": "[RepairTarget] WTI_10_20200917:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1952e7fdf4c9c11b6105482aa61c0e8ee68d46b6",
        "target": "[RepairTarget] ADIDAS_AG:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1952e7fdf4c9c11b6105482aa61c0e8ee68d46b6",
        "target": "[RepairTarget] ADIDAS_AG:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1997fa645b79b6dc5526e1275ca7ca2e867ba404",
        "target": "[RepairTarget] DANONE_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1997fa645b79b6dc5526e1275ca7ca2e867ba404",
        "target": "[RepairTarget] DANONE_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1a51fabc97bce2743cd9214b6e8d88040ab1c064",
        "target": "[RepairTarget] TokenERC20:_transfer:34\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1a7f7770de7fbbfe242db161e69bdf96e155f136",
        "target": "[RepairTarget] Crowdsale:fallback:43\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1a7f7770de7fbbfe242db161e69bdf96e155f136",
        "target": "[RepairTarget] Crowdsale:fallback:44\nCODE: tokenReward.transfer(msg.sender, (amount  * 1 ether) / price)\nOPERATION: amount [*] 1 ether\nSSA: amount_1 [*] 1000000000000000000 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1a7f7770de7fbbfe242db161e69bdf96e155f136",
        "target": "[RepairTarget] Crowdsale:fallback:44\nCODE: tokenReward.transfer(msg.sender, (amount  * 1 ether) / price)\nOPERATION: (amount  * 1 ether) [/] price\nSSA: TMP_7 [/] price_2 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1affa51aacd5389def089f46e37ce24c6dc7183a",
        "target": "[RepairTarget] ENGLAND_WINS:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1affa51aacd5389def089f46e37ce24c6dc7183a",
        "target": "[RepairTarget] ENGLAND_WINS:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1b135b544f0a122b3426ef1f2c52cbf5fe4df2ff",
        "target": "[RepairTarget] Rusal_CIP_IV_20180621:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1b135b544f0a122b3426ef1f2c52cbf5fe4df2ff",
        "target": "[RepairTarget] Rusal_CIP_IV_20180621:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1b135b544f0a122b3426ef1f2c52cbf5fe4df2ff",
        "target": "[RepairTarget] Rusal_CIP_IV_20180621:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1b135b544f0a122b3426ef1f2c52cbf5fe4df2ff",
        "target": "[RepairTarget] Rusal_CIP_IV_20180621:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1bcc17fce4ae60e6291c2b83026331e627f0979d",
        "target": "[RepairTarget] Crowdsale:fallback:44\nCODE: tokenReward.transfer(msg.sender, amount * price)\nOPERATION: amount [*] price\nSSA: amount_1 [*] price_3 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1cd74dd56b0929f1505c6e1f9bdf57fb31d60631",
        "target": "[RepairTarget] BugisContract:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1ce667f4318c5dbc9a0911b19d0d489cf7a81431",
        "target": "[RepairTarget] Rusal_cds_20221212_XIV:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1ce667f4318c5dbc9a0911b19d0d489cf7a81431",
        "target": "[RepairTarget] Rusal_cds_20221212_XIV:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1ce667f4318c5dbc9a0911b19d0d489cf7a81431",
        "target": "[RepairTarget] Rusal_cds_20221212_XIV:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1ce667f4318c5dbc9a0911b19d0d489cf7a81431",
        "target": "[RepairTarget] Rusal_cds_20221212_XIV:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1db45a09efcdd8955b1c3bb855b5a8d333446bff",
        "target": "[RepairTarget] Share:transferHolds:146\nCODE: fullfilled[to] = watermark - toBonus / holds[to]\nOPERATION: toBonus [/] holds[to]\nSSA: toBonus_1 [/] REF_16 --> TMP_27\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1db45a09efcdd8955b1c3bb855b5a8d333446bff",
        "target": "[RepairTarget] Share:transferHolds:146\nCODE: fullfilled[to] = watermark - toBonus / holds[to]\nOPERATION: watermark [-] toBonus / holds[to]\nSSA: watermark_7 [-] TMP_27 --> TMP_28\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1dccbb30991632907f59530b3e10d86ad71973f9",
        "target": "[RepairTarget] Rusal_TCI_VI_20181220:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1dccbb30991632907f59530b3e10d86ad71973f9",
        "target": "[RepairTarget] Rusal_TCI_VI_20181220:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1dccbb30991632907f59530b3e10d86ad71973f9",
        "target": "[RepairTarget] Rusal_TCI_VI_20181220:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1dccbb30991632907f59530b3e10d86ad71973f9",
        "target": "[RepairTarget] Rusal_TCI_VI_20181220:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1eae15d9f4fa16f5278d02d2f8bda8b0dcd31f71",
        "target": "[RepairTarget] ExceedIOToken:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1f1aba22635a7a1c73b1f48f33480d7ce686426d",
        "target": "[RepairTarget] Token:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1f1fc3a8459219ef935ff14c5edffd0921d478e7",
        "target": "[RepairTarget] FOMOCoin:transfer:81\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1f1fc3a8459219ef935ff14c5edffd0921d478e7",
        "target": "[RepairTarget] FOMOCoin:transferFrom:106\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1f8abd8e5fb90c7c4076fca58fe335ba55da5945",
        "target": "[RepairTarget] SafeMathMod:div:27\nCODE: assert(a == b * c + a % b)\nOPERATION: b [*] c\nSSA: b_1 [*] c_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1f8abd8e5fb90c7c4076fca58fe335ba55da5945",
        "target": "[RepairTarget] SafeMathMod:div:27\nCODE: assert(a == b * c + a % b)\nOPERATION: b * c [+] a % b\nSSA: TMP_9 [+] TMP_10 --> TMP_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x205daf7cb272e436652115ecfb7df465631d80d0",
        "target": "[RepairTarget] RegularToken:transfer:45\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x205daf7cb272e436652115ecfb7df465631d80d0",
        "target": "[RepairTarget] UnboundedRegularToken:transferFrom:101\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_44 [-] _value_1 --> REF_44\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x205daf7cb272e436652115ecfb7df465631d80d0",
        "target": "[RepairTarget] BYToken:burn:144\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_3 [-] _value_1 --> totalSupply_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x205daf7cb272e436652115ecfb7df465631d80d0",
        "target": "[RepairTarget] BYToken:freeze:156\nCODE: freezes[msg.sender] += _value\nOPERATION: freezes[msg.sender] [+=] _value\nSSA: REF_82 [+] _value_1 --> REF_82\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x209882b2fc83256fec39ca0dfe5490d89350d36b",
        "target": "[RepairTarget] SafeMath:safeSub:11\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x20ae0ca9d42e6ffeb1188f341a7d63450452def6",
        "target": "[RepairTarget] Cipher:transfer:48\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x20ae0ca9d42e6ffeb1188f341a7d63450452def6",
        "target": "[RepairTarget] Cipher:transferFrom:66\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x21d4acb4de0450ec46916fab187bb68dc5a8f5d8",
        "target": "[RepairTarget] eXchangeQualityCoin:_transfer:23\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x21d4acb4de0450ec46916fab187bb68dc5a8f5d8",
        "target": "[RepairTarget] eXchangeQualityCoin:_transfer:27\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x21e16f43b61e7b9c74fded5f125ff6754963eb45",
        "target": "[RepairTarget] DAX_4000_20190321:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x21e16f43b61e7b9c74fded5f125ff6754963eb45",
        "target": "[RepairTarget] DAX_4000_20190321:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x228e009ab91491880adb0eda6ed1bcd640ffd020",
        "target": "[RepairTarget] GUS:transfer:120\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_8 [+] _amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2368056f36035d01e7c2aa2a15b87e47cc9d2d23",
        "target": "[RepairTarget] GSDToken:transfer:74\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2368056f36035d01e7c2aa2a15b87e47cc9d2d23",
        "target": "[RepairTarget] GSDToken:transferFrom:98\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x236e8f6276efeda25bef34e29726977bf917afdb",
        "target": "[RepairTarget] RusHydro_20210416_i:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x236e8f6276efeda25bef34e29726977bf917afdb",
        "target": "[RepairTarget] RusHydro_20210416_i:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x236e8f6276efeda25bef34e29726977bf917afdb",
        "target": "[RepairTarget] RusHydro_20210416_i:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x236e8f6276efeda25bef34e29726977bf917afdb",
        "target": "[RepairTarget] RusHydro_20210416_i:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x24d315e45c9b2f8e84481d7602d00abbbee87a69",
        "target": "[RepairTarget] GOLD_301202:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x24d315e45c9b2f8e84481d7602d00abbbee87a69",
        "target": "[RepairTarget] GOLD_301202:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2610a8d6602d7744174181348104dafc2ad94b28",
        "target": "[RepairTarget] BlackjackTipJar:cashout:61\nCODE: bankrolls[msg.sender] -= overflow_amt\nOPERATION: bankrolls[msg.sender] [-=] overflow_amt\nSSA: REF_8 [-] overflow_amt_1 --> REF_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2610a8d6602d7744174181348104dafc2ad94b28",
        "target": "[RepairTarget] BlackjackTipJar:fallback:31\nCODE: bankrolls[pitboss] += msg.value\nOPERATION: bankrolls[pitboss] [+=] msg.value\nSSA: REF_1 [+] msg.value --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x261c9420c9a67b806afef8b7597f7f5171434c4d",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x266be180f1bdda078b677c5d1c050268929f0da3",
        "target": "[RepairTarget] CASINO_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x266be180f1bdda078b677c5d1c050268929f0da3",
        "target": "[RepairTarget] CASINO_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x26c470a04552004672e248315df357d984595f0e",
        "target": "[RepairTarget] PickGroup_20210416_i:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x26c470a04552004672e248315df357d984595f0e",
        "target": "[RepairTarget] PickGroup_20210416_i:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x26c470a04552004672e248315df357d984595f0e",
        "target": "[RepairTarget] PickGroup_20210416_i:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x26c470a04552004672e248315df357d984595f0e",
        "target": "[RepairTarget] PickGroup_20210416_i:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x27b99f3648d3a4a50e7dfeb06a8f07721fba53eb",
        "target": "[RepairTarget] SafeMath:div:21\nCODE: uint256 c = a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x27e45ebe436034250e1269a6b85074c91cd87fd0",
        "target": "[RepairTarget] PEPL:_transfer:61\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x282c3971f8041bf4ab8b0d2ad0875e94958f8940",
        "target": "[RepairTarget] RENAULT_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x282c3971f8041bf4ab8b0d2ad0875e94958f8940",
        "target": "[RepairTarget] RENAULT_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x28f75d2be52423f8e2234d2d6fdacc2171aabbcb",
        "target": "[RepairTarget] Rusal_TCI_VII_20180621:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x28f75d2be52423f8e2234d2d6fdacc2171aabbcb",
        "target": "[RepairTarget] Rusal_TCI_VII_20180621:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x28f75d2be52423f8e2234d2d6fdacc2171aabbcb",
        "target": "[RepairTarget] Rusal_TCI_VII_20180621:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x28f75d2be52423f8e2234d2d6fdacc2171aabbcb",
        "target": "[RepairTarget] Rusal_TCI_VII_20180621:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2a8cef60776d931eb1200aa2a9877eb091cb34a7",
        "target": "[RepairTarget] TTC:transferFrom:56\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2b27bf565593da4c3689207175e91b1c15e4792a",
        "target": "[RepairTarget] DYCOIN:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2c72a3dc7e8f350114c2a17b282c5d3c9fd67c98",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2e728224429ed5cf9bc564f5d9632e73f8f44745",
        "target": "[RepairTarget] AWAXToken:_transfer:25\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2e728224429ed5cf9bc564f5d9632e73f8f44745",
        "target": "[RepairTarget] AWAXToken:_transfer:29\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2f5e61a4bf0816b7d2bf12c5265f0ac87dfe08e3",
        "target": "[RepairTarget] allFamily:enableWhitelist:116\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x31141dc226c214d40b1f77feb532741d8f893c6f",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x31ff7cd977516062cda99c56616f03073a678545",
        "target": "[RepairTarget] DOJC:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x34ee35170a667965f952e6d6fb1507074377f9c5",
        "target": "[RepairTarget] x32323:_transfer:90\nCODE: alue;\r\n            // Add \nOPERATION: alue;\n           [-=]  Add t\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x34fbb24940304675694bc2090bee3a655e623fc5",
        "target": "[RepairTarget] TokeniVOX:_transfer:45\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x35b64d548e00566353d7e60370307619c7c5f408",
        "target": "[RepairTarget] CoinBundleToken:add:5\nCODE: assert((z = x + y) >= x)\nOPERATION: x [+] y\nSSA: x_1 [+] y_1 --> TMP_0\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x363e340d604d19fe03b08106a7bfa7b6fce4e088",
        "target": "[RepairTarget] REDDCCOIN:REDDCCOIN:49\nCODE: totalSupply =  210000000 * 1000000000000000000\nOPERATION: 210000000 [*] 1000000000000000000\nSSA: 210000000 [*] 1000000000000000000 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x36b53bf543eebf9ad42c5f161efd1247f38d034d",
        "target": "[RepairTarget] REOC:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x36f6a1353a3e1c008782e86bfe551c6f8b8c3370",
        "target": "[RepairTarget] Shadow3D:sqrt:710\nCODE: uint z = (x + 1) / 2\nOPERATION: x [+] 1\nSSA: x_1 [+] 1 --> TMP_156\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x36f6a1353a3e1c008782e86bfe551c6f8b8c3370",
        "target": "[RepairTarget] Shadow3D:sqrt:710\nCODE: uint z = (x + 1) / 2\nOPERATION: (x + 1) [/] 2\nSSA: TMP_156 [/] 2 --> TMP_157\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x378965e2a5d31f6f5fd029c1fc456caacb6d04b2",
        "target": "[RepairTarget] ApplicationQualityCoin:_transfer:23\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x378965e2a5d31f6f5fd029c1fc456caacb6d04b2",
        "target": "[RepairTarget] ApplicationQualityCoin:_transfer:27\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3875151e877cb7c048d9b8f5045debf46babe02b",
        "target": "[RepairTarget] SimplePriceFeed:_updatePrices:813\nCODE: ++i\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x39a412660708f79d1a7f30982e7ab20d2b02ab68",
        "target": "[RepairTarget] RosAgro_20210416_i:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x39a412660708f79d1a7f30982e7ab20d2b02ab68",
        "target": "[RepairTarget] RosAgro_20210416_i:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x39a412660708f79d1a7f30982e7ab20d2b02ab68",
        "target": "[RepairTarget] RosAgro_20210416_i:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x39a412660708f79d1a7f30982e7ab20d2b02ab68",
        "target": "[RepairTarget] RosAgro_20210416_i:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3a03afa73623b99eedaa6180a869dd5bde17a601",
        "target": "[RepairTarget] CheapLambos:_mint:90\nCODE: totalSupply = totalSupply + howmuch * (10 ** decimals)\nOPERATION: totalSupply [+] howmuch * (10 ** decimals)\nSSA: totalSupply_1 [+] TMP_39 --> TMP_40\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3a03afa73623b99eedaa6180a869dd5bde17a601",
        "target": "[RepairTarget] CheapLambos:_mint:91\nCODE: emit Transfer(0x0, who, howmuch * (10 ** decimals))\nOPERATION: howmuch [*] (10 ** decimals)\nSSA: howmuch_1 [*] TMP_41 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3a03afa73623b99eedaa6180a869dd5bde17a601",
        "target": "[RepairTarget] CheapLambos:_mint:90\nCODE: totalSupply = totalSupply + howmuch * (10 ** decimals)\nOPERATION: howmuch [*] (10 ** decimals)\nSSA: howmuch_1 [*] TMP_38 --> TMP_39\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3b9411b2ac139d9fc737c170a49239e381d87b43",
        "target": "[RepairTarget] DAX_1000_20180920:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3b9411b2ac139d9fc737c170a49239e381d87b43",
        "target": "[RepairTarget] DAX_1000_20180920:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3c294199c9d2e3f25a59bfc2db3568b220bb63c7",
        "target": "[RepairTarget] Zeinun:lockupAccounts:234\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3c294199c9d2e3f25a59bfc2db3568b220bb63c7",
        "target": "[RepairTarget] Zeinun:distributeAirdrop:439\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3d11a869c9a97c1c9c6a0ce058a98db20bb753db",
        "target": "[RepairTarget] TokenERC20:_transfer:107\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3d6c445ad3d85270853845c4847174859c76035e",
        "target": "[RepairTarget] TokenTKC:_transfer:48\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3d6c445ad3d85270853845c4847174859c76035e",
        "target": "[RepairTarget] TokenTKC:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3dcefbedf17bc3ecea1a40052239da89c22766b8",
        "target": "[RepairTarget] AGAVE:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3eb13bb9b01018b27c1bae50579e50c4094efdc1",
        "target": "[RepairTarget] AIRPORT_CITY_20230515:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3eb13bb9b01018b27c1bae50579e50c4094efdc1",
        "target": "[RepairTarget] AIRPORT_CITY_20230515:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3ec5ad8f342241d326bb9b301789e8cad74e4266",
        "target": "[RepairTarget] MainSale:fallback:22\nCODE: totalContributed += msg.value\nOPERATION: totalContributed [+=] msg.value\nSSA: totalContributed_1 [+] msg.value --> totalContributed_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f580f24a460f90484d1f80fb491b1a072033ec3",
        "target": "[RepairTarget] Bitwincoins:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x42718620862272dc629979a2db3e7efe69876eb0",
        "target": "[RepairTarget] Sagittarius_ZodiacToken:fallback:182\nCODE: lances[msg.sender] += tokensIssued;\r\nOPERATION: lances[msg.sender] + [+=] kensIssued;\n\nSSA: REF_26 [+] tokensIssued_1 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x42718620862272dc629979a2db3e7efe69876eb0",
        "target": "[RepairTarget] Sagittarius_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: RDROPBounce * [*] 8;\n\nSSA: TMP_56 [*] ICORatio_2 --> TMP_57\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x42718620862272dc629979a2db3e7efe69876eb0",
        "target": "[RepairTarget] Sagittarius_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: sg.value / 1e10) * ICORatio + [+] RDROPBounce * 1e8;\n\nSSA: TMP_57 [+] TMP_58 --> TMP_59\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x42718620862272dc629979a2db3e7efe69876eb0",
        "target": "[RepairTarget] Sagittarius_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: sg.value / 1e10) * [*] ORatio +\nSSA: AIRDROPBounce_2 [*] 100000000 --> TMP_58\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x42718620862272dc629979a2db3e7efe69876eb0",
        "target": "[RepairTarget] Sagittarius_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: g.value / [/] 10) \nSSA: msg.value [/] 10000000000 --> TMP_56\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x43287c95eb5bb4fe8cc8f0cf1a5980a0abd555b7",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x43a1ed858ec3f62f9cfd263b58b0683483f70e6e",
        "target": "[RepairTarget] Rusal_TCI_IV_20180621:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x43a1ed858ec3f62f9cfd263b58b0683483f70e6e",
        "target": "[RepairTarget] Rusal_TCI_IV_20180621:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x43a1ed858ec3f62f9cfd263b58b0683483f70e6e",
        "target": "[RepairTarget] Rusal_TCI_IV_20180621:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x43a1ed858ec3f62f9cfd263b58b0683483f70e6e",
        "target": "[RepairTarget] Rusal_TCI_IV_20180621:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x445c3d28d711734adfe52ec003d267c13579d69c",
        "target": "[RepairTarget] BossContract:_transfer:23\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x445c3d28d711734adfe52ec003d267c13579d69c",
        "target": "[RepairTarget] BossContract:_transfer:26\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_11\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4460a301f878e5d017a469672de20fba2814178c",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x45fed31756a9dcd5f6537bf81b01324bcdf833cf",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x46043c9093ff4d0a796bd1aee7e80254420368dd",
        "target": "[RepairTarget] x32323:_transfer:90\nCODE: alue;\n            // Add t\nOPERATION: alue;\n           [-=]  Add t\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x46c8da5a84850cfd0ca64415b3fab1569357901f",
        "target": "[RepairTarget] SCOOP:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x473dbef2cb37594e817a8df3bbad7f0561a0d77a",
        "target": "[RepairTarget] WTI_10_20220915:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x473dbef2cb37594e817a8df3bbad7f0561a0d77a",
        "target": "[RepairTarget] WTI_10_20220915:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4765fbc8fa8a610666c2f6e24506f3d199eb7daa",
        "target": "[RepairTarget] SUAppToken:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x49e28320c9e3531c494c3f48f6b5c0ef99e6f987",
        "target": "[RepairTarget] RNG:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4acedbb500bebf6119770e4ad03ffc2bae75cc1a",
        "target": "[RepairTarget] SimpleERC20Token:transfer:25\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4acedbb500bebf6119770e4ad03ffc2bae75cc1a",
        "target": "[RepairTarget] SimpleERC20Token:transferFrom:52\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4b15b2d301dd81e05fc404e16bdd138b29dcdefd",
        "target": "[RepairTarget] Virgo_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: sg.value / 1e10) * [*] ORatio +\nSSA: AIRDROPBounce_2 [*] 100000000 --> TMP_58\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4b15b2d301dd81e05fc404e16bdd138b29dcdefd",
        "target": "[RepairTarget] Virgo_ZodiacToken:fallback:182\nCODE: lances[msg.sender] += tokensIssued;\r\nOPERATION: lances[msg.sender] + [+=] kensIssued;\n\nSSA: REF_26 [+] tokensIssued_1 --> REF_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4b15b2d301dd81e05fc404e16bdd138b29dcdefd",
        "target": "[RepairTarget] Virgo_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: sg.value / 1e10) * ICORatio + [+] RDROPBounce * 1e8;\n\nSSA: TMP_57 [+] TMP_58 --> TMP_59\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4b15b2d301dd81e05fc404e16bdd138b29dcdefd",
        "target": "[RepairTarget] Virgo_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: RDROPBounce * [*] 8;\n\nSSA: TMP_56 [*] ICORatio_2 --> TMP_57\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4b15b2d301dd81e05fc404e16bdd138b29dcdefd",
        "target": "[RepairTarget] Virgo_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: g.value / [/] 10) \nSSA: msg.value [/] 10000000000 --> TMP_56\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4c5e9c0c0bf644cd265c9500e1aad0bae0977b78",
        "target": "[RepairTarget] TASOHATOKEN:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4e6998f0131c1fde3f36d1660d84c5c1a7c4ee26",
        "target": "[RepairTarget] BNP_PARIBAS_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4e6998f0131c1fde3f36d1660d84c5c1a7c4ee26",
        "target": "[RepairTarget] BNP_PARIBAS_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4ed88a8ebc9fd22fc0233500b7ef11e9aedfa665",
        "target": "[RepairTarget] RusalCdsTok20221212V:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4ed88a8ebc9fd22fc0233500b7ef11e9aedfa665",
        "target": "[RepairTarget] RusalCdsTok20221212V:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4fac1c38d3cb76c4dff73f1c4390d34fe6259906",
        "target": "[RepairTarget] GERMANY_WINS:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4fac1c38d3cb76c4dff73f1c4390d34fe6259906",
        "target": "[RepairTarget] GERMANY_WINS:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4fac49d82d8ec3553fe8f0cdbdc0f921c59c37de",
        "target": "[RepairTarget] StandardToken:transferFrom:80\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x518888b328d61d09a92d01d462031f4cf8c550df",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x51a9420bbc3cce4fd4b980ee6507c1d866008a76",
        "target": "[RepairTarget] Token:_transfer:48\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5270a37951f8c3ff2a99c6fb386cbc2aa63aa709",
        "target": "[RepairTarget] WTI_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5270a37951f8c3ff2a99c6fb386cbc2aa63aa709",
        "target": "[RepairTarget] WTI_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x52f48b3363df3260659b87218723cabd4d07ed10",
        "target": "[RepairTarget] BeggarBetting:claimPrizes:195\nCODE: numOfWinners++\nOPERATION: [++] numOfWinners\nSSA: numOfWinners_1 [+] 1 --> numOfWinners_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x52f48b3363df3260659b87218723cabd4d07ed10",
        "target": "[RepairTarget] BeggarBetting:claimPrizes:187\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x53088104b7a9a04e52d8b884571634c815bce666",
        "target": "[RepairTarget] ALONY_HETZ_20230515:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x53088104b7a9a04e52d8b884571634c815bce666",
        "target": "[RepairTarget] ALONY_HETZ_20230515:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x53abc335bed36e0299ef5607f04bd297d3a10dba",
        "target": "[RepairTarget] RigCraftPresalePackageToken:removeTokenFrom:246\nCODE: ownedTokensCount[_from] -= 1\nOPERATION: ownedTokensCount[_from] [-=] 1\nSSA: REF_16 [-] 1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x540dd2eff0c9bfaf63a991ba3368aa80fbd228d4",
        "target": "[RepairTarget] Rusal_cds_20221212_XIX:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x540dd2eff0c9bfaf63a991ba3368aa80fbd228d4",
        "target": "[RepairTarget] Rusal_cds_20221212_XIX:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x540dd2eff0c9bfaf63a991ba3368aa80fbd228d4",
        "target": "[RepairTarget] Rusal_cds_20221212_XIX:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x540dd2eff0c9bfaf63a991ba3368aa80fbd228d4",
        "target": "[RepairTarget] Rusal_cds_20221212_XIX:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x54a9ed327f2614316914c3f3a782a77d0aa47aee",
        "target": "[RepairTarget] CONNECT:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x571df5a0b5571a3cc7dcbd8185b200426376845f",
        "target": "[RepairTarget] EBRK:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x574c48e350c5f6c7910e6b1a0c99934edfaf4d2e",
        "target": "[RepairTarget] Tatneft_20210416_i:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x574c48e350c5f6c7910e6b1a0c99934edfaf4d2e",
        "target": "[RepairTarget] Tatneft_20210416_i:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x574c48e350c5f6c7910e6b1a0c99934edfaf4d2e",
        "target": "[RepairTarget] Tatneft_20210416_i:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x574c48e350c5f6c7910e6b1a0c99934edfaf4d2e",
        "target": "[RepairTarget] Tatneft_20210416_i:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x585160af8558e14453c96223e957b2126f52d70b",
        "target": "[RepairTarget] MamatToken:transferFrom:49\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x58849d4a250bbb9d47d6cd93c7ab39ab1e06aeda",
        "target": "[RepairTarget] StandardToken:transferFrom:82\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5a41cdade9ad98a3d09589cfebd147a25a8e7e29",
        "target": "[RepairTarget] NESTLE_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5a41cdade9ad98a3d09589cfebd147a25a8e7e29",
        "target": "[RepairTarget] NESTLE_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5e803ccbc3d41124d46b419f201e93368963e430",
        "target": "[RepairTarget] GOLD_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5e803ccbc3d41124d46b419f201e93368963e430",
        "target": "[RepairTarget] GOLD_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x635b7b07383961572c40c6b26f23a002782c7fe8",
        "target": "[RepairTarget] SENEGAL_WINS:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x635b7b07383961572c40c6b26f23a002782c7fe8",
        "target": "[RepairTarget] SENEGAL_WINS:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x642dd4e0f945f45c3908a8a56131339cf867ee98",
        "target": "[RepairTarget] Rusal_cds_20221212_XIII:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x642dd4e0f945f45c3908a8a56131339cf867ee98",
        "target": "[RepairTarget] Rusal_cds_20221212_XIII:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x642dd4e0f945f45c3908a8a56131339cf867ee98",
        "target": "[RepairTarget] Rusal_cds_20221212_XIII:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x642dd4e0f945f45c3908a8a56131339cf867ee98",
        "target": "[RepairTarget] Rusal_cds_20221212_XIII:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x64463ba0ed340981836f99f913835d19a42c2e12",
        "target": "[RepairTarget] StandardToken:transferFrom:123\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x651f8e09d0cb5cf823e2bfe91b97cbde714756d2",
        "target": "[RepairTarget] ERC20Standard:transfer:28\nCODE: balances[_recipient] += _value\nOPERATION: balances[_recipient] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x651f8e09d0cb5cf823e2bfe91b97cbde714756d2",
        "target": "[RepairTarget] ERC20Standard:transferFrom:35\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x657ccd6a9816a49da1bce76ff5245de29ce73807",
        "target": "[RepairTarget] Lambo:_mint:104\nCODE: totalSupply = totalSupply + howmuch * (10 ** decimals)\nOPERATION: totalSupply [+] howmuch * (10 ** decimals)\nSSA: totalSupply_1 [+] TMP_53 --> TMP_54\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x657ccd6a9816a49da1bce76ff5245de29ce73807",
        "target": "[RepairTarget] Lambo:_mint:105\nCODE: emit Transfer(0x0, who, howmuch * (10 ** decimals))\nOPERATION: howmuch [*] (10 ** decimals)\nSSA: howmuch_1 [*] TMP_55 --> TMP_56\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x657ccd6a9816a49da1bce76ff5245de29ce73807",
        "target": "[RepairTarget] Lambo:_mint:104\nCODE: totalSupply = totalSupply + howmuch * (10 ** decimals)\nOPERATION: howmuch [*] (10 ** decimals)\nSSA: howmuch_1 [*] TMP_52 --> TMP_53\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x67524c85884bc2a12bb4d41af8ca70a8567654e5",
        "target": "[RepairTarget] x32323:reward:155\nCODE: lanceOf[_address] += 1000;\r\nOPERATION: lanceOf[_address] + [+=] 00;\n\nSSA: REF_7 [+] 1000 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x68b3d9cc25420008441c8aa43bef26122ac181a7",
        "target": "[RepairTarget] Rusal_cds_20221212_XVIII:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x68b3d9cc25420008441c8aa43bef26122ac181a7",
        "target": "[RepairTarget] Rusal_cds_20221212_XVIII:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x68b3d9cc25420008441c8aa43bef26122ac181a7",
        "target": "[RepairTarget] Rusal_cds_20221212_XVIII:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x68b3d9cc25420008441c8aa43bef26122ac181a7",
        "target": "[RepairTarget] Rusal_cds_20221212_XVIII:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6927c69fb4daf2043fbb1cb7b86c5661416bea29",
        "target": "[RepairTarget] StandardToken:transferFrom:169\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_18 [-] _value_1 --> REF_18\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6940c3a2f57b2867d18f2a160b5736cbc172f0de",
        "target": "[RepairTarget] Scorpius_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: RDROPBounce * [*] 8;\n\nSSA: TMP_56 [*] ICORatio_2 --> TMP_57\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6940c3a2f57b2867d18f2a160b5736cbc172f0de",
        "target": "[RepairTarget] Scorpius_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: sg.value / 1e10) * ICORatio + [+] RDROPBounce * 1e8;\n\nSSA: TMP_57 [+] TMP_58 --> TMP_59\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6940c3a2f57b2867d18f2a160b5736cbc172f0de",
        "target": "[RepairTarget] Scorpius_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: sg.value / 1e10) * [*] ORatio +\nSSA: AIRDROPBounce_2 [*] 100000000 --> TMP_58\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6940c3a2f57b2867d18f2a160b5736cbc172f0de",
        "target": "[RepairTarget] Scorpius_ZodiacToken:fallback:178\nCODE: nt256 tokensIssued = (msg.value / 1e10) * ICORatio + AIRDROPBounce * 1e8;\r\nOPERATION: g.value / [/] 10) \nSSA: msg.value [/] 10000000000 --> TMP_56\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x695c80242b3cab86e55f4d38f3952d8d1741289a",
        "target": "[RepairTarget] TUNISIA_WINS:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x695c80242b3cab86e55f4d38f3952d8d1741289a",
        "target": "[RepairTarget] TUNISIA_WINS:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6acd29712dfb9e52b084c2f9eb81d01b4c76c872",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6c46b734d5a94b10929ac4e88f22cc56145bc65c",
        "target": "[RepairTarget] AMOT__20230515:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6c46b734d5a94b10929ac4e88f22cc56145bc65c",
        "target": "[RepairTarget] AMOT__20230515:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6cbf42cba480511f454e81a5fd6f087fb17d90d9",
        "target": "[RepairTarget] TOC:_transfer:54\nCODE: assert(balances[_from] + balances[_to] == PreviousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6f8e8e44e02963f11d494be759afbe24cf55cd39",
        "target": "[RepairTarget] DemocracyVote:transfer:25\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6f8e8e44e02963f11d494be759afbe24cf55cd39",
        "target": "[RepairTarget] DemocracyVote:transferFrom:52\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x70371c49e61c149c8766a7e97082d65555619b39",
        "target": "[RepairTarget] Rusal_CIP_IX_20181220:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x70371c49e61c149c8766a7e97082d65555619b39",
        "target": "[RepairTarget] Rusal_CIP_IX_20181220:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x70371c49e61c149c8766a7e97082d65555619b39",
        "target": "[RepairTarget] Rusal_CIP_IX_20181220:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x70371c49e61c149c8766a7e97082d65555619b39",
        "target": "[RepairTarget] Rusal_CIP_IX_20181220:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x716989fa21d5043165079ddbfd04a76a001a595a",
        "target": "[RepairTarget] COCTokenBase:_transfer:93\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x73e603c31d000051bf49c917113d020bcb435535",
        "target": "[RepairTarget] Token:transferFrom:41\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x73eb098f617ab032abfcae2a4fa12ca4723fcd2f",
        "target": "[RepairTarget] DOJI:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x745081d072745d3c025a552b3ee6e1da5567eeab",
        "target": "[RepairTarget] PapaBearToken:fallback:72\nCODE: balanceOf[creator] -= amount\nOPERATION: balanceOf[creator] [-=] amount\nSSA: REF_8 [-] amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x76beeb04fbb6326d3c928484de13481284b2100e",
        "target": "[RepairTarget] SmartSignature:issueToken:344\nCODE: free1OfToken[counter] = now + _frozen1\nOPERATION: now [+] _frozen1\nSSA: now [+] _frozen1_1 --> TMP_125\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x778608c4ac424522180a43329ff5145400b9d409",
        "target": "[RepairTarget] StandardToken:transfer:24\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x778608c4ac424522180a43329ff5145400b9d409",
        "target": "[RepairTarget] StandardToken:transferFrom:33\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7860ca4be312900ca0e0e949e7f98e380576517b",
        "target": "[RepairTarget] AIR_FRANCE_KLM_OTC_050601:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7860ca4be312900ca0e0e949e7f98e380576517b",
        "target": "[RepairTarget] AIR_FRANCE_KLM_OTC_050601:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7895a43ae537e8e1ac97006ea9235807eea04cfa",
        "target": "[RepairTarget] DateTime:getYear:347\nCODE: isLeapYear(uint16(year - 1))\nOPERATION: year [-] 1\nSSA: year_2 [-] 1 --> TMP_73\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7a3aa244cb5520cd40876c604953c269044f6599",
        "target": "[RepairTarget] NewToken:transfer:31\nCODE: balances[_recipient] += _value\nOPERATION: balances[_recipient] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7a3aa244cb5520cd40876c604953c269044f6599",
        "target": "[RepairTarget] NewToken:transferFrom:38\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7a617a3a486e8c415fe7ebfae02466674f6fb697",
        "target": "[RepairTarget] SafeMath:safeMult:65\nCODE: uint256 z = x * y\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7a617a3a486e8c415fe7ebfae02466674f6fb697",
        "target": "[RepairTarget] SafeMath:safeSubtract:55\nCODE: uint256 z = x - y\nOPERATION: x [-] y\nSSA: x_1 [-] y_1 --> TMP_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7ba19b7f7d106a9a1e0985397b94f38eee0b555e",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7c12e49245731a2e33dbd4ef0f723cf7f2db24a0",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7c27efad27469bfa5369a5bcecd5c4bb07170a65",
        "target": "[RepairTarget] Refund:add_addys:21\nCODE: balances[_addys[i]] += (_values[i])\nOPERATION: balances[_addys[i]] [+=] (_values[i])\nSSA: REF_2 [+] REF_3 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7c539bdeb5e20b084af0722158a1b5613b328c7a",
        "target": "[RepairTarget] ZperToken:mint:77\nCODE: require(totalSupply + _amount > totalSupply && balances[_to] + _amount > balances[_to])\nOPERATION: totalSupply [+] _amount\nSSA: REF_20 [+] _amount_1 --> TMP_36\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x7c539bdeb5e20b084af0722158a1b5613b328c7a",
        "target": "[RepairTarget] ZperToken:mint:77\nCODE: require(totalSupply + _amount > totalSupply && balances[_to] + _amount > balances[_to])\nOPERATION: balances[_to] [+] _amount\nSSA: totalSupply_3 [+] _amount_1 --> TMP_34\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x7c974e1b755e9f2534127c84c7a05d7173eb6b40",
        "target": "[RepairTarget] SafeMath:add:50\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7d1ec9ae517f3c17689937c76b3d5930a8fe46bc",
        "target": "[RepairTarget] AIRBUS_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7d1ec9ae517f3c17689937c76b3d5930a8fe46bc",
        "target": "[RepairTarget] AIRBUS_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7dcde80b9e6eaac35cd5e0225f17cf8a418314cc",
        "target": "[RepairTarget] TokenERC20:transfer:90\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_17 [-] _value_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7ec99babdda53507db164f643d9a8058095689bc",
        "target": "[RepairTarget] VOC_ethchf_393477_20180614:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7ec99babdda53507db164f643d9a8058095689bc",
        "target": "[RepairTarget] VOC_ethchf_393477_20180614:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8002546267f59b750471b08e3d41a016c6f03fc2",
        "target": "[RepairTarget] Lambo:_mint:105\nCODE: emit Transfer(0x0, who, howmuch * (10 ** decimals))\nOPERATION: howmuch [*] (10 ** decimals)\nSSA: howmuch_1 [*] TMP_53 --> TMP_54\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8002546267f59b750471b08e3d41a016c6f03fc2",
        "target": "[RepairTarget] Lambo:_mint:104\nCODE: totalSupply = totalSupply + howmuch * (10 ** decimals)\nOPERATION: totalSupply [+] howmuch * (10 ** decimals)\nSSA: totalSupply_1 [+] TMP_51 --> TMP_52\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8002546267f59b750471b08e3d41a016c6f03fc2",
        "target": "[RepairTarget] Lambo:_mint:104\nCODE: totalSupply = totalSupply + howmuch * (10 ** decimals)\nOPERATION: howmuch [*] (10 ** decimals)\nSSA: howmuch_1 [*] TMP_50 --> TMP_51\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8036165ccabee251c886d6121b047c16b5e798b5",
        "target": "[RepairTarget] StrongHold:tokensToEthereum_:668\nCODE: uint256 tokens_ = (_tokens + 1e18)\nOPERATION: _tokens [+] 1e18\nSSA: _tokens_1 [+] 1000000000000000000 --> TMP_149\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x82ecec1726add3f718ef9d759b63569f02412295",
        "target": "[RepairTarget] PingToken:transfer:23\nCODE: balances[_to] = balances[_to] + _value\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x82ecec1726add3f718ef9d759b63569f02412295",
        "target": "[RepairTarget] PingToken:ping:35\nCODE: balances[msg.sender] -= cost\nOPERATION: balances[msg.sender] [-=] cost\nSSA: REF_8 [-] cost_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x83a611488d53cfcda749c2239c1516ab1c514fe7",
        "target": "[RepairTarget] PICC_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x83a611488d53cfcda749c2239c1516ab1c514fe7",
        "target": "[RepairTarget] PICC_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x842b8c18381922efd9df1d4f3619ccf92c71bbea",
        "target": "[RepairTarget] GEBEC:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x84c96d19de65b24301b210b92f65ee806d274565",
        "target": "[RepairTarget] MamaBearToken:fallback:72\nCODE: balanceOf[creator] -= amount\nOPERATION: balanceOf[creator] [-=] amount\nSSA: REF_8 [-] amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x86f6c8c0a6b0ca479fa236de4521144d5b72b5e1",
        "target": "[RepairTarget] Rusal_cds_20221212_XVII:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x86f6c8c0a6b0ca479fa236de4521144d5b72b5e1",
        "target": "[RepairTarget] Rusal_cds_20221212_XVII:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x86f6c8c0a6b0ca479fa236de4521144d5b72b5e1",
        "target": "[RepairTarget] Rusal_cds_20221212_XVII:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x86f6c8c0a6b0ca479fa236de4521144d5b72b5e1",
        "target": "[RepairTarget] Rusal_cds_20221212_XVII:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x872d32412dd0d32c05e14f5be3ab55163173826f",
        "target": "[RepairTarget] ULA:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x87af260d1f637661dcecb6e4efcb4f74963c9539",
        "target": "[RepairTarget] VINCI_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x87af260d1f637661dcecb6e4efcb4f74963c9539",
        "target": "[RepairTarget] VINCI_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x88139a326a70f69261c15af43f1a11a65a0a2d30",
        "target": "[RepairTarget] BIPOOH_DAO_32_c:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x88139a326a70f69261c15af43f1a11a65a0a2d30",
        "target": "[RepairTarget] BIPOOH_DAO_32_c:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x897275c1cb983b6c89b5b858576382e6893f6d33",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x898545050a2739c349df55813bded581e6f2bb8b",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8a203055b45171d71b037464a55b4c0d126c1582",
        "target": "[RepairTarget] SafeMath:safeAdd:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8a203055b45171d71b037464a55b4c0d126c1582",
        "target": "[RepairTarget] ToniToken:bulkTransfer:87\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8a5ab6f781e95e59cacbfdb44894de250586ff67",
        "target": "[RepairTarget] ERC20:_transfer:36\nCODE: balance[_from] -= _value\nOPERATION: balance[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8a5ab6f781e95e59cacbfdb44894de250586ff67",
        "target": "[RepairTarget] ERC20:_transfer:39\nCODE: assert(balance[_from] + balance[_to] == prev_balances)\nOPERATION: balance[_from] [+] balance[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8aa088de726048f3e837e90534f769cf86345b75",
        "target": "[RepairTarget] KYC:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8b0dd3f4ebc9773ae6bd425a656980a1c3092386",
        "target": "[RepairTarget] Dexy:transferFrom:46\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_11 [-] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8b993084ab8ef8fd22c2677e13224d0e4d1db00a",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8bf8185491b4f3da4c931e97be81a42417b5bde5",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8d4e4e6a88d7dd0da69c2d7e4e5351c01776eb4f",
        "target": "[RepairTarget] Rusal_CIP_VI_20181220:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x8d4e4e6a88d7dd0da69c2d7e4e5351c01776eb4f",
        "target": "[RepairTarget] Rusal_CIP_VI_20181220:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x8d4e4e6a88d7dd0da69c2d7e4e5351c01776eb4f",
        "target": "[RepairTarget] Rusal_CIP_VI_20181220:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x8d4e4e6a88d7dd0da69c2d7e4e5351c01776eb4f",
        "target": "[RepairTarget] Rusal_CIP_VI_20181220:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8d5da264fde1f8355b171a35390b7d52101ba694",
        "target": "[RepairTarget] ACCOR_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8d5da264fde1f8355b171a35390b7d52101ba694",
        "target": "[RepairTarget] ACCOR_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8d7ddad45789a64c2af9b4ce031c774e277f1cd4",
        "target": "[RepairTarget] MBLToken:_transfer:55\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8db90e3e7d04c875a51997092f9178fcac9defdb",
        "target": "[RepairTarget] PortalToken:doTransfer:90\nCODE: balance[_to] += _value\nOPERATION: balance[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8e129874b96f419134ee13b443f5ee07aea9ee74",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8fff29678153f55aaf837269050f565ccfd15b02",
        "target": "[RepairTarget] SERBIA_WINS:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8fff29678153f55aaf837269050f565ccfd15b02",
        "target": "[RepairTarget] SERBIA_WINS:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x912ca303ea67cf1d58186da1b9e0d855e7c57593",
        "target": "[RepairTarget] Rusal_cds_20221212_XV:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x912ca303ea67cf1d58186da1b9e0d855e7c57593",
        "target": "[RepairTarget] Rusal_cds_20221212_XV:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x912ca303ea67cf1d58186da1b9e0d855e7c57593",
        "target": "[RepairTarget] Rusal_cds_20221212_XV:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x912ca303ea67cf1d58186da1b9e0d855e7c57593",
        "target": "[RepairTarget] Rusal_cds_20221212_XV:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x91651dd19b056456dd7cf97a2bec5a7544c22ad5",
        "target": "[RepairTarget] RusalCdsTok20221212VI:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x91651dd19b056456dd7cf97a2bec5a7544c22ad5",
        "target": "[RepairTarget] RusalCdsTok20221212VI:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x92f6096a93a6ebb6bc439831a7f30f1e6020f184",
        "target": "[RepairTarget] ROPE:_transfer:61\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x93529183037577356313723e5a46d318f5227334",
        "target": "[RepairTarget] SafeMath:mul:6\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9550e05cdf0e3776eea6fdbce4dc4e1570df5f2b",
        "target": "[RepairTarget] BossContract:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9550e05cdf0e3776eea6fdbce4dc4e1570df5f2b",
        "target": "[RepairTarget] BossContract:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x95c7ee7cac4b14fa9d3ffaf34d74791882cbe7cf",
        "target": "[RepairTarget] RTCCOINTOKEN:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x95f58d04103490966640f3836e9df11a14715147",
        "target": "[RepairTarget] DEUTSCHE_BANK_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x95f58d04103490966640f3836e9df11a14715147",
        "target": "[RepairTarget] DEUTSCHE_BANK_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9709c188716fd61af9d1b6ee60e2b86e0f612478",
        "target": "[RepairTarget] StandardToken:transferFrom:23\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9709c188716fd61af9d1b6ee60e2b86e0f612478",
        "target": "[RepairTarget] StandardToken:transfer:16\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x993cf2f53b0981a97ca441f4acc66c542ac1c395",
        "target": "[RepairTarget] CART:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x99c88dcc67bb64c75556ae933c61370667b52c52",
        "target": "[RepairTarget] Token:_transfer:34\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x99c88dcc67bb64c75556ae933c61370667b52c52",
        "target": "[RepairTarget] Token:_transfer:38\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9a9199b6332f0d163c33bd4afaaef0c56aa5df19",
        "target": "[RepairTarget] LVMH_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9a9199b6332f0d163c33bd4afaaef0c56aa5df19",
        "target": "[RepairTarget] LVMH_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9add8cff847287556481ed3dd3849f8f3335e4b2",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9be9f5c1f6f19bd7861625d0eb668ca2b40c311c",
        "target": "[RepairTarget] RTCCOINERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9e04b3f332e9bcd942c702c3ee3260621f9f7032",
        "target": "[RepairTarget] SIE_DE_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9e04b3f332e9bcd942c702c3ee3260621f9f7032",
        "target": "[RepairTarget] SIE_DE_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9ed65f6849b16f3fb1ed8fb6269f4ced4ef211b1",
        "target": "[RepairTarget] URUGUAY_WINS:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9ed65f6849b16f3fb1ed8fb6269f4ced4ef211b1",
        "target": "[RepairTarget] URUGUAY_WINS:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9f0afda1f2b46a4e0829804409cb11c90accc7ee",
        "target": "[RepairTarget] Aqo:transfer:55\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_3 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa0f075d5473467e4a8c82e2c58c4871bcff3a699",
        "target": "[RepairTarget] StandardToken:transferFrom:82\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa170fb6f3e0f127f1f592a656eadff3dc421a5f6",
        "target": "[RepairTarget] Goo:transferFrom:67\nCODE: allowed[player][msg.sender] -= amount\nOPERATION: allowed[player][msg.sender] [-=] amount\nSSA: REF_13 [-] amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa2310206fd3fff0b66e03407eb03ed1ada4acecc",
        "target": "[RepairTarget] TokenERC20:_transfer:102\nCODE: _balanceOf[_from] -= _value\nOPERATION: _balanceOf[_from] [-=] _value\nSSA: REF_17 [-] _value_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa2b02d523563d1dd570dbec75c9446e60f355815",
        "target": "[RepairTarget] SafeMath:add:50\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa37adde3ba20a396338364e2ddb5e0897d11a91d",
        "target": "[RepairTarget] WFee:burnFrom:473\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_24 [-] _value_1 --> REF_24\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa5f97e34bfbde84dfe0092411a567ad23a92c3ec",
        "target": "[RepairTarget] TicTokenERC20:_transfer:99\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa66aafb56c7d676dc4206ba7051927a4e07e5a1c",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa75a044b2645ffa8a565be2a0d3584062db73ddd",
        "target": "[RepairTarget] LAA_INTL_HOLD_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa75a044b2645ffa8a565be2a0d3584062db73ddd",
        "target": "[RepairTarget] LAA_INTL_HOLD_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa822768656beb36d709773c62588fdb0458714a7",
        "target": "[RepairTarget] TokenERC20:_transfer:46\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa88b57ada7020ba538eccbbec3f6ba5e7f436700",
        "target": "[RepairTarget] Transneft_20210416_i:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xa88b57ada7020ba538eccbbec3f6ba5e7f436700",
        "target": "[RepairTarget] Transneft_20210416_i:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xa88b57ada7020ba538eccbbec3f6ba5e7f436700",
        "target": "[RepairTarget] Transneft_20210416_i:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xa88b57ada7020ba538eccbbec3f6ba5e7f436700",
        "target": "[RepairTarget] Transneft_20210416_i:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa8db32876cbfab2e97f50169da65fe1ab8e62b47",
        "target": "[RepairTarget] SWEDEN_WINS:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa8db32876cbfab2e97f50169da65fe1ab8e62b47",
        "target": "[RepairTarget] SWEDEN_WINS:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa9649d20d658aa4c87ae4e0028d60f5e27012084",
        "target": "[RepairTarget] SaferMath:mul:20\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa9e5301731723cfdfe5db7441c50dd4f9b7b43c2",
        "target": "[RepairTarget] TOTOAirdrop:airDrop:57\nCODE: dropAmount += recipients.length * amount\nOPERATION: recipients.length [*] amount\nSSA: REF_5 [*] amount_1 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa9e5301731723cfdfe5db7441c50dd4f9b7b43c2",
        "target": "[RepairTarget] TOTOAirdrop:airDrop:57\nCODE: dropAmount += recipients.length * amount\nOPERATION: dropAmount [+=] recipients.length * amount\nSSA: dropAmount_2 [+] TMP_20 --> dropAmount_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaa8722fb1c9eec9b6c32a90dbe9aa4c9eff19f55",
        "target": "[RepairTarget] OrganicumOrders:fallback:89\nCODE: orders[msg.sender].tokens += countTokens\nOPERATION: orders[msg.sender].tokens [+=] countTokens\nSSA: REF_10 [+] countTokens_1 --> REF_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xab15d36c3f60bd9ba66f962a79fc8a790e40d7a7",
        "target": "[RepairTarget] StandardToken:transferFrom:71\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xac485deeada12b07b8616ee76710bd7336c7513a",
        "target": "[RepairTarget] Rusal_CIP_VIII_20180920:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xac485deeada12b07b8616ee76710bd7336c7513a",
        "target": "[RepairTarget] Rusal_CIP_VIII_20180920:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xac485deeada12b07b8616ee76710bd7336c7513a",
        "target": "[RepairTarget] Rusal_CIP_VIII_20180920:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xac485deeada12b07b8616ee76710bd7336c7513a",
        "target": "[RepairTarget] Rusal_CIP_VIII_20180920:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xae3350fdec3819e4d2a30b97835f0ccfe0973a21",
        "target": "[RepairTarget] Lambo:_mint:87\nCODE: totalSupply = totalSupply + howmuch * (10 ** decimals)\nOPERATION: howmuch [*] (10 ** decimals)\nSSA: howmuch_1 [*] TMP_38 --> TMP_39\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xae3350fdec3819e4d2a30b97835f0ccfe0973a21",
        "target": "[RepairTarget] Lambo:_mint:88\nCODE: emit Transfer(0x0, who, howmuch * (10 ** decimals))\nOPERATION: howmuch [*] (10 ** decimals)\nSSA: howmuch_1 [*] TMP_41 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xae3350fdec3819e4d2a30b97835f0ccfe0973a21",
        "target": "[RepairTarget] Lambo:_mint:87\nCODE: totalSupply = totalSupply + howmuch * (10 ** decimals)\nOPERATION: totalSupply [+] howmuch * (10 ** decimals)\nSSA: totalSupply_1 [+] TMP_39 --> TMP_40\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaf4868d151cf953145a786d880b67f5dcb7ec5f3",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xafbdd9d46f5ce898204e75484008a442b594b409",
        "target": "[RepairTarget] DAIMLER_AG:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xafbdd9d46f5ce898204e75484008a442b594b409",
        "target": "[RepairTarget] DAIMLER_AG:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb0bb3c7193fb9aea9d8c28200162264ff1800167",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb0bb3c7193fb9aea9d8c28200162264ff1800167",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb0d9473a71dfafc80df8de7f45a012ef5b33c6fd",
        "target": "[RepairTarget] OnePercentGift:claim:16\nCODE: msg.value == address(this).balance * 100\nOPERATION: address(this).balance [*] 100\nSSA: TMP_1 [*] 100 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb1733c9c3cb5d98c2c35db27e30de26081d4d30a",
        "target": "[RepairTarget] Token:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb255a9af216f20401c7d8625b3f9598a8ea40fe5",
        "target": "[RepairTarget] RegularToken:transfer:45\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb255a9af216f20401c7d8625b3f9598a8ea40fe5",
        "target": "[RepairTarget] UnboundedRegularToken:transferFrom:98\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_44 [-] _value_1 --> REF_44\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb255a9af216f20401c7d8625b3f9598a8ea40fe5",
        "target": "[RepairTarget] BYBToken:freeze:160\nCODE: freezes[msg.sender] += _value\nOPERATION: freezes[msg.sender] [+=] _value\nSSA: REF_82 [+] _value_1 --> REF_82\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb39b66a7273b83bca1f2f618672302485b391f92",
        "target": "[RepairTarget] ANHUI_ANNUITY_DAO_33_c:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb39b66a7273b83bca1f2f618672302485b391f92",
        "target": "[RepairTarget] ANHUI_ANNUITY_DAO_33_c:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb53c66c759d8197ca04c933554ef035e4412eb0e",
        "target": "[RepairTarget] x32323:reward:155\nCODE: lanceOf[_address] += 1000;\r\nOPERATION: lanceOf[_address] + [+=] 00;\n\nSSA: REF_7 [+] 1000 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb6b2ab99f9d4090c722dfe18e3a85a732e74d081",
        "target": "[RepairTarget] SafeMath:div:25\nCODE: uint256 c = a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb808ab0944eb6cef4049aebfbcaa5d79206a29c6",
        "target": "[RepairTarget] ECRCTOKEN:ECRCTOKEN:49\nCODE: totalSupply =  7500000000 * 1000000000000000000\nOPERATION: 7500000000 [*] 1000000000000000000\nSSA: 7500000000 [*] 1000000000000000000 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xb8c78ffc37b70eed482f10657cf7998639e2a6a4",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xba2e5c1f9bfa6b9a0e52487433c69e4d8b7c10e4",
        "target": "[RepairTarget] SJT:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbbf1885c21604ef777009aca8ff549ee96bb3d7c",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbc9f03bd999958a0e90b031409fc8034d46404e8",
        "target": "[RepairTarget] OEO:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbcd954a95940a74570b3fcf0908da975c1dd72d4",
        "target": "[RepairTarget] PowerQuantumCoin:_transfer:23\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbcd954a95940a74570b3fcf0908da975c1dd72d4",
        "target": "[RepairTarget] PowerQuantumCoin:_transfer:27\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbd17ef08d48c2a348230ff80279178cf3b9a6ca8",
        "target": "[RepairTarget] Rusal_CIP_VII_20180621:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xbd17ef08d48c2a348230ff80279178cf3b9a6ca8",
        "target": "[RepairTarget] Rusal_CIP_VII_20180621:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xbd17ef08d48c2a348230ff80279178cf3b9a6ca8",
        "target": "[RepairTarget] Rusal_CIP_VII_20180621:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xbd17ef08d48c2a348230ff80279178cf3b9a6ca8",
        "target": "[RepairTarget] Rusal_CIP_VII_20180621:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbdba9386e7cd910f13ec50c9f3af128ab90626a4",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbe5ce0f9dc0ff7c32e6fc43f7b2c11bab9507c98",
        "target": "[RepairTarget] GERMANY_WINS:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbe5ce0f9dc0ff7c32e6fc43f7b2c11bab9507c98",
        "target": "[RepairTarget] GERMANY_WINS:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbeafd856b0732c9a80c00921b826ade4c6aae4ee",
        "target": "[RepairTarget] BB:fallback:96\nCODE: totalSupply += value\nOPERATION: totalSupply [+=] value\nSSA: totalSupply_6 [+] value_1 --> totalSupply_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbf5fd25864cf503eeb72be35d6463210980f05d5",
        "target": "[RepairTarget] LCEToken:_transfer:30\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbf5fd25864cf503eeb72be35d6463210980f05d5",
        "target": "[RepairTarget] LCEToken:_transfer:34\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbfc70f2151b471794422fd06480933192f3da674",
        "target": "[RepairTarget] SIE_DE_301202:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbfc70f2151b471794422fd06480933192f3da674",
        "target": "[RepairTarget] SIE_DE_301202:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbfe22093087eef1a8607074f24c09fbb304a2c97",
        "target": "[RepairTarget] BIMI_DAO_31_c:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbfe22093087eef1a8607074f24c09fbb304a2c97",
        "target": "[RepairTarget] BIMI_DAO_31_c:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc0212ff6b421dd6b9fa5af8bd2d93bc5398497cb",
        "target": "[RepairTarget] ventil_ii:fallback:25\nCODE: balances[msg.sender] += dep\nOPERATION: balances[msg.sender] [+=] dep\nSSA: REF_2 [+] dep_2 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc0212ff6b421dd6b9fa5af8bd2d93bc5398497cb",
        "target": "[RepairTarget] ventil_ii:fallback:26\nCODE: change > 0\nOPERATION: balances[msg.sender] [+=] change\nSSA: change_2 [>] 0 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc1e2b55fdd6dc94562933feb7aa1d03637024809",
        "target": "[RepairTarget] WTI_301202:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc1e2b55fdd6dc94562933feb7aa1d03637024809",
        "target": "[RepairTarget] WTI_301202:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc304dd1492bf3bda395cc1be2096210f86d14581",
        "target": "[RepairTarget] CAC_2400_20190919:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc304dd1492bf3bda395cc1be2096210f86d14581",
        "target": "[RepairTarget] CAC_2400_20190919:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc333228daab9bde8a3866efa3a9e616b7e1bae51",
        "target": "[RepairTarget] WarToken:getFashionsAttrs:557\nCODE: attrs[index + 1] = fs.atkMin\nOPERATION: index [+] 1\nSSA: index_1 [+] 1 --> TMP_214\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc333228daab9bde8a3866efa3a9e616b7e1bae51",
        "target": "[RepairTarget] WarToken:getOwnFashions:540\nCODE: flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos)\nOPERATION: uint32(fs.protoId) [*] 100\nSSA: TMP_198 [*] 100 --> TMP_199\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc333228daab9bde8a3866efa3a9e616b7e1bae51",
        "target": "[RepairTarget] WarToken:getOwnFashions:540\nCODE: flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos)\nOPERATION: uint32(fs.quality) [*] 10\nSSA: TMP_200 [*] 10 --> TMP_201\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc333228daab9bde8a3866efa3a9e616b7e1bae51",
        "target": "[RepairTarget] WarToken:getOwnFashions:540\nCODE: flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos)\nOPERATION: uint32(fs.protoId) * 100 [+] uint32(fs.quality) * 10\nSSA: TMP_199 [+] TMP_201 --> TMP_202\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc333228daab9bde8a3866efa3a9e616b7e1bae51",
        "target": "[RepairTarget] WarToken:getOwnFashions:540\nCODE: flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos)\nOPERATION: uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 [+] fs.pos\nSSA: TMP_202 [+] REF_141 --> TMP_203\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc34ba286507ebd66e60fb555544ae49b7066ccbc",
        "target": "[RepairTarget] StandardToken:transferFrom:80\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc3b025d92b771f8e0b70111147d4d620278b6ad1",
        "target": "[RepairTarget] Uncloak:Uncloak:219\nCODE: _totalSupply = 4200000000 * 10**uint(decimals)\nOPERATION: 4200000000 [*] 10**uint(decimals)\nSSA: 4200000000 [*] TMP_43 --> TMP_44\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc446b5b0a696b6735bf95888a896253a1a5d25f5",
        "target": "[RepairTarget] TwoXJackpot:seed:89\nCODE: jackpotBalance += msg.value\nOPERATION: jackpotBalance [+=] msg.value\nSSA: jackpotBalance_3 [+] msg.value --> jackpotBalance_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc5765b90766da9debad0b9122521c27e1ea933c1",
        "target": "[RepairTarget] ProofOfEtherDelta:transferFrom:65\nCODE: allowed[player][msg.sender] -= amount\nOPERATION: allowed[player][msg.sender] [-=] amount\nSSA: REF_13 [-] amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc599523f90dc823b9c9dbb3859e22774b46bf6ba",
        "target": "[RepairTarget] DumbCoin:transferFrom:74\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_17 [-] _value_1 --> REF_17\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc599523f90dc823b9c9dbb3859e22774b46bf6ba",
        "target": "[RepairTarget] DumbCoin:fallback:134\nCODE: tokensIssued += totalContribution\nOPERATION: tokensIssued [+=] totalContribution\nSSA: tokensIssued_1 [+] totalContribution_3 --> tokensIssued_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc599523f90dc823b9c9dbb3859e22774b46bf6ba",
        "target": "[RepairTarget] DumbCoin:fallback:138\nCODE: uint256 random_block = uint(block.blockhash(block.number-1))%100 + 1\nOPERATION: uint(block.blockhash(block.number-1))%100 [+] 1\nSSA: TMP_42 [+] 1 --> TMP_43\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc599523f90dc823b9c9dbb3859e22774b46bf6ba",
        "target": "[RepairTarget] DumbCoin:fallback:138\nCODE: uint256 random_block = uint(block.blockhash(block.number-1))%100 + 1\nOPERATION: block.number [-] 1\nSSA: block.number [-] 1 --> TMP_39\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xc5d275df1b6176d732aeb4a234e905c002424ec7",
        "target": "[RepairTarget] DYCOIN:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc5fc5d9f73bdcc24b2d16810f98eddf9b69ea327",
        "target": "[RepairTarget] Rusal_cds_20221212_X:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xc5fc5d9f73bdcc24b2d16810f98eddf9b69ea327",
        "target": "[RepairTarget] Rusal_cds_20221212_X:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xc5fc5d9f73bdcc24b2d16810f98eddf9b69ea327",
        "target": "[RepairTarget] Rusal_cds_20221212_X:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xc5fc5d9f73bdcc24b2d16810f98eddf9b69ea327",
        "target": "[RepairTarget] Rusal_cds_20221212_X:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc64500dd7b0f1794807e67802f8abbf5f8ffb054",
        "target": "[RepairTarget] LocusToken:_transfer:43\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc64500dd7b0f1794807e67802f8abbf5f8ffb054",
        "target": "[RepairTarget] LocusToken:_transfer:46\nCODE: assert(balanceOf[_from] + balanceOf[_to] == prevBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_11 [+] REF_12 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc7ea06d89ea76890883728610619760d34678bb8",
        "target": "[RepairTarget] VALLOUREC_301201:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc7ea06d89ea76890883728610619760d34678bb8",
        "target": "[RepairTarget] VALLOUREC_301201:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc86e592fcfe130448dea161c0937ebdde4c8ae36",
        "target": "[RepairTarget] StandardToken:transferFrom:23\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc86e592fcfe130448dea161c0937ebdde4c8ae36",
        "target": "[RepairTarget] StandardToken:transfer:16\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc994c7dad298ba5c0573e024bf4904b200f5b4d7",
        "target": "[RepairTarget] BTM:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc999e5490773fb2e69557a863dcb8a7d3508604f",
        "target": "[RepairTarget] SaiContest_Gaia:Paid:59\nCODE: CurBal = address(this).balance - oPay\nOPERATION: address(this).balance [-] oPay\nSSA: TMP_13 [-] oPay_1 --> TMP_14\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xca22d451db952b79b18b85a6cfda86a118e793df",
        "target": "[RepairTarget] WEKUToken:assignToEarlyBirds:228\nCODE: _transfer(msg.sender, earlyBirds[i], amount * 10 ** 18)\nOPERATION: amount [*] 10 ** 18\nSSA: amount_1 [*] TMP_74 --> TMP_75\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xca4718de42fc344e449f0a8b8f2bca2c95d13516",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xca64a1f5437e74bb1b77c9a7618838e55f9ddf2d",
        "target": "[RepairTarget] Crowdsale:fallback:44\nCODE: tokenReward.transfer(msg.sender, (amount  * 1 ether) / price)\nOPERATION: (amount  * 1 ether) [/] price\nSSA: TMP_7 [/] price_2 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xca64a1f5437e74bb1b77c9a7618838e55f9ddf2d",
        "target": "[RepairTarget] Crowdsale:fallback:43\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xca64a1f5437e74bb1b77c9a7618838e55f9ddf2d",
        "target": "[RepairTarget] Crowdsale:fallback:44\nCODE: tokenReward.transfer(msg.sender, (amount  * 1 ether) / price)\nOPERATION: amount [*] 1 ether\nSSA: amount_1 [*] 1000000000000000000 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd078a5046c653cfce6da629aded260c43c5fb928",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd0a8b8d49cd9fa798171b36f2297bec75981c358",
        "target": "[RepairTarget] RusalCdsTok20221212IV:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd0a8b8d49cd9fa798171b36f2297bec75981c358",
        "target": "[RepairTarget] RusalCdsTok20221212IV:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd0b0f77c2454b28b925b7430a71df0ebf8a150ac",
        "target": "[RepairTarget] Lambo:_mint:87\nCODE: totalSupply = totalSupply + howmuch * (10 ** decimals)\nOPERATION: howmuch [*] (10 ** decimals)\nSSA: howmuch_1 [*] TMP_38 --> TMP_39\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd0b0f77c2454b28b925b7430a71df0ebf8a150ac",
        "target": "[RepairTarget] Lambo:_mint:88\nCODE: emit Transfer(0x0, who, howmuch * (10 ** decimals))\nOPERATION: howmuch [*] (10 ** decimals)\nSSA: howmuch_1 [*] TMP_41 --> TMP_42\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd0b0f77c2454b28b925b7430a71df0ebf8a150ac",
        "target": "[RepairTarget] Lambo:_mint:87\nCODE: totalSupply = totalSupply + howmuch * (10 ** decimals)\nOPERATION: totalSupply [+] howmuch * (10 ** decimals)\nSSA: totalSupply_1 [+] TMP_39 --> TMP_40\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd0d916322b02b7a8095af4bb69bea0e9d93cf3b1",
        "target": "[RepairTarget] WTI_10_20210916:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd0d916322b02b7a8095af4bb69bea0e9d93cf3b1",
        "target": "[RepairTarget] WTI_10_20210916:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd21b8a63a9d09660673ef57ca96cd6ca483cc9df",
        "target": "[RepairTarget] TokenERC20:_transfer:77\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_8 [+] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd27760eac6ddb2355fd1f17ca06687b67b950ae3",
        "target": "[RepairTarget] AIC:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd28ee3e76598f53cc3c0aa13dbb2200366a3333c",
        "target": "[RepairTarget] GoodBoyPoints:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd2be917afd50b81b585a5a96866658f9f90d811b",
        "target": "[RepairTarget] SimpleEthBank:deposit:28\nCODE: accountBalances[msg.sender] += msg.value\nOPERATION: accountBalances[msg.sender] [+=] msg.value\nSSA: REF_2 [+] msg.value --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd2f7a3cbcc4aa43de3cd23f19bd5d9ce4524e135",
        "target": "[RepairTarget] SaturnPresale:processPurchase:250\nCODE: ++latestOrderId\nOPERATION: [++] latestOrderId\nSSA: latestOrderId_1 [+] 1 --> latestOrderId_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd342c20428de073c6da0cd3b249b16b3f2ae80fe",
        "target": "[RepairTarget] DildoToken:fallback:72\nCODE: balanceOf[creator] -= amount\nOPERATION: balanceOf[creator] [-=] amount\nSSA: REF_8 [-] amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd4bda4d99601648568ce4f0492f405c38508d7e9",
        "target": "[RepairTarget] SNOOP:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd6c523854f08759df65fd335c80a5609e2a28d5f",
        "target": "[RepairTarget] StandardToken:transfer:21\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd6c523854f08759df65fd335c80a5609e2a28d5f",
        "target": "[RepairTarget] StandardToken:transferFrom:32\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd7aebfaaa23621eb81227b8bf382dd719992b5b1",
        "target": "[RepairTarget] Rosoboronexport_Ankara_I:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xd7aebfaaa23621eb81227b8bf382dd719992b5b1",
        "target": "[RepairTarget] Rosoboronexport_Ankara_I:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xd7aebfaaa23621eb81227b8bf382dd719992b5b1",
        "target": "[RepairTarget] Rosoboronexport_Ankara_I:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xd7aebfaaa23621eb81227b8bf382dd719992b5b1",
        "target": "[RepairTarget] Rosoboronexport_Ankara_I:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd962bcbe30b8dcd6c9d0b34a904b44e68e45d732",
        "target": "[RepairTarget] RussianMachines_I:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xd962bcbe30b8dcd6c9d0b34a904b44e68e45d732",
        "target": "[RepairTarget] RussianMachines_I:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xd962bcbe30b8dcd6c9d0b34a904b44e68e45d732",
        "target": "[RepairTarget] RussianMachines_I:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xd962bcbe30b8dcd6c9d0b34a904b44e68e45d732",
        "target": "[RepairTarget] RussianMachines_I:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd97dc42ed67d009c704dafe566f70c79fc24f72a",
        "target": "[RepairTarget] EOUNCE:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xda0b84a81662ec19ba06b8e902f22964dd69e13d",
        "target": "[RepairTarget] KRT:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xda9c03dfd4d137f926c3cf6953cb951832eb08b2",
        "target": "[RepairTarget] WarToken:getOwnFashions:513\nCODE: flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos)\nOPERATION: uint32(fs.quality) [*] 10\nSSA: TMP_168 [*] 10 --> TMP_169\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xda9c03dfd4d137f926c3cf6953cb951832eb08b2",
        "target": "[RepairTarget] WarToken:getOwnFashions:513\nCODE: flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos)\nOPERATION: uint32(fs.protoId) [*] 100\nSSA: TMP_166 [*] 100 --> TMP_167\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xda9c03dfd4d137f926c3cf6953cb951832eb08b2",
        "target": "[RepairTarget] WarToken:getOwnFashions:513\nCODE: flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos)\nOPERATION: uint32(fs.protoId) * 100 [+] uint32(fs.quality) * 10\nSSA: TMP_167 [+] TMP_169 --> TMP_170\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xda9c03dfd4d137f926c3cf6953cb951832eb08b2",
        "target": "[RepairTarget] WarToken:getOwnFashions:513\nCODE: flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos)\nOPERATION: uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 [+] fs.pos\nSSA: TMP_170 [+] REF_141 --> TMP_171\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdabd08643935a02fdf49cd6264f8d4de8e1feb69",
        "target": "[RepairTarget] DAX:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdac7b8ff8fd5148d7d872eae6fb71ae58ee0b7f0",
        "target": "[RepairTarget] ICC:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdacde73a071d9ac0fef023453f41d410498ce867",
        "target": "[RepairTarget] Rusal_cds_20221212_XVI:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xdacde73a071d9ac0fef023453f41d410498ce867",
        "target": "[RepairTarget] Rusal_cds_20221212_XVI:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xdacde73a071d9ac0fef023453f41d410498ce867",
        "target": "[RepairTarget] Rusal_cds_20221212_XVI:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xdacde73a071d9ac0fef023453f41d410498ce867",
        "target": "[RepairTarget] Rusal_cds_20221212_XVI:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdb3b01cd8613f19f51d2ebf0b38d294f0145f7b9",
        "target": "[RepairTarget] PROM:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdc20655a6de13496dd385f7ab903e4e6150e55a5",
        "target": "[RepairTarget] SafeMath:mul:9\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdc72abbe397460f54f0d95b4a20328d4b6ba0937",
        "target": "[RepairTarget] YSS:sell:102\nCODE: revenue = amount * sellPrice\nOPERATION: amount [*] sellPrice\nSSA: amount_1 [*] sellPrice_4 --> TMP_38\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdc72abbe397460f54f0d95b4a20328d4b6ba0937",
        "target": "[RepairTarget] YSS:mintToken:72\nCODE: totalSupply += mintedAmount\nOPERATION: totalSupply [+=] mintedAmount\nSSA: totalSupply_3 [+] mintedAmount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf1e6806a30f0a106faf97e7d4f4df3c604eeabe",
        "target": "[RepairTarget] TokenERC20:_transfer:95\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdfd8e9fda3ac12884e35eaea35d763517bb79176",
        "target": "[RepairTarget] StandardToken:transferFrom:55\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe1094bce7da87def2e726d62ad861cfa24b46014",
        "target": "[RepairTarget] Rusal_TCI_VIII_20180920:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xe1094bce7da87def2e726d62ad861cfa24b46014",
        "target": "[RepairTarget] Rusal_TCI_VIII_20180920:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xe1094bce7da87def2e726d62ad861cfa24b46014",
        "target": "[RepairTarget] Rusal_TCI_VIII_20180920:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xe1094bce7da87def2e726d62ad861cfa24b46014",
        "target": "[RepairTarget] Rusal_TCI_VIII_20180920:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe1b3261999df08497c3b1dead7427bb77af311af",
        "target": "[RepairTarget] OrpheusOrganicsThailand:transferFrom:44\nCODE: allowed [_from][msg.sender] -= _value\nOPERATION: allowed [_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe1b7cc80b4fd3322a7a0748a0e6470f9b16d60e2",
        "target": "[RepairTarget] Rusal_cds_20221212_XII:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xe1b7cc80b4fd3322a7a0748a0e6470f9b16d60e2",
        "target": "[RepairTarget] Rusal_cds_20221212_XII:mint:33\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xe1b7cc80b4fd3322a7a0748a0e6470f9b16d60e2",
        "target": "[RepairTarget] Rusal_cds_20221212_XII:transfer:43\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xe1b7cc80b4fd3322a7a0748a0e6470f9b16d60e2",
        "target": "[RepairTarget] Rusal_cds_20221212_XII:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe25e1fa84821b4e37d3802a3849a04e562b3736a",
        "target": "[RepairTarget] ETHLEI_268145:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe25e1fa84821b4e37d3802a3849a04e562b3736a",
        "target": "[RepairTarget] ETHLEI_268145:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe5dc8d27f0fa3b86ef6f2f1e14b6db37a274c019",
        "target": "[RepairTarget] SafeMath:safeMult:45\nCODE: uint256 z = x * y\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe65a20195d53dd00f915d2be49e55ffdb46380d7",
        "target": "[RepairTarget] NyronChain:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe79a44ee4d34e010d7d999e4f931f9ee84e8a95c",
        "target": "[RepairTarget] ERC20Standard:transfer:28\nCODE: balances[_recipient] += _value\nOPERATION: balances[_recipient] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe79a44ee4d34e010d7d999e4f931f9ee84e8a95c",
        "target": "[RepairTarget] ERC20Standard:transferFrom:35\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe8974f5eb57e425be2de1caf25af926dda53217a",
        "target": "[RepairTarget] Crowdsale:fallback:36\nCODE: tokenReward.transfer(msg.sender, (amount  * 1 ether) / price)\nOPERATION: (amount  * 1 ether) [/] price\nSSA: TMP_4 [/] price_2 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe8974f5eb57e425be2de1caf25af926dda53217a",
        "target": "[RepairTarget] Crowdsale:fallback:36\nCODE: tokenReward.transfer(msg.sender, (amount  * 1 ether) / price)\nOPERATION: amount [*] 1 ether\nSSA: amount_1 [*] 1000000000000000000 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeae9fb0d60bd3c99002c35ca8f1d24020eea80fc",
        "target": "[RepairTarget] CASINO_301202:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeae9fb0d60bd3c99002c35ca8f1d24020eea80fc",
        "target": "[RepairTarget] CASINO_301202:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xeb92266ba75dc3ff16a12e9ea4f1d20ca1560beb",
        "target": "[RepairTarget] NHC:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xebd30812d8f4b6e4828873900f82180bfc86bdc5",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xec124c0a3579fc1ce707da6b4414017d08b5c2ab",
        "target": "[RepairTarget] VikkyTokenAirdrop:airDrop:57\nCODE: dropAmount += recipients.length * amount\nOPERATION: dropAmount [+=] recipients.length * amount\nSSA: dropAmount_2 [+] TMP_20 --> dropAmount_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xec124c0a3579fc1ce707da6b4414017d08b5c2ab",
        "target": "[RepairTarget] VikkyTokenAirdrop:airDrop:57\nCODE: dropAmount += recipients.length * amount\nOPERATION: recipients.length [*] amount\nSSA: REF_5 [*] amount_1 --> TMP_20\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xecbd0854075009d23360c62da07047efc2312144",
        "target": "[RepairTarget] Crowdsale:fallback:44\nCODE: tokenReward.transfer(msg.sender, amount / price)\nOPERATION: amount [/] price\nSSA: amount_1 [/] price_2 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xecbd0854075009d23360c62da07047efc2312144",
        "target": "[RepairTarget] Crowdsale:fallback:43\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xecd5214f25083fe68cb51d3fd693c09f7fde00d4",
        "target": "[RepairTarget] CAC_2400_20180920:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xecd5214f25083fe68cb51d3fd693c09f7fde00d4",
        "target": "[RepairTarget] CAC_2400_20180920:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xeddbe73b7ed6d6d2887ba7349e411a5b7dcf0e16",
        "target": "[RepairTarget] MindCoin:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xef906c48b8fde48f5f2ceb448b1163bf964ef4ac",
        "target": "[RepairTarget] DAX_4000_20200618:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xef906c48b8fde48f5f2ceb448b1163bf964ef4ac",
        "target": "[RepairTarget] DAX_4000_20200618:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xefc6d9d05d41134b1f44b379e319079ef2855edb",
        "target": "[RepairTarget] SafeMath:mul:17\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf024628c7bf1ffec7ca184026cd0764ac11ba22f",
        "target": "[RepairTarget] ClickGemTokenERC20:_transfer:101\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf18b97b312ef48c5d2b5c21c739d499b7c65cf96",
        "target": "[RepairTarget] TBEToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf18b97b312ef48c5d2b5c21c739d499b7c65cf96",
        "target": "[RepairTarget] TBEToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf1ddf3cfb28c75b3fca7d755f516caed35872719",
        "target": "[RepairTarget] HumanBlockToken:transfer:25\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf1ddf3cfb28c75b3fca7d755f516caed35872719",
        "target": "[RepairTarget] HumanBlockToken:transferFrom:52\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf1e6b7f94bb0d70d8a19187f684e4270b0a0c989",
        "target": "[RepairTarget] ERC20TokenCPN:transferFrom:179\nCODE: agents[_to].balance += _value\nOPERATION: agents[_to].balance [+=] _value\nSSA: REF_49 [+] _value_1 --> REF_49\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf21ed2a554d3fcc7b7c88f463b314a227caea7bf",
        "target": "[RepairTarget] VALEO_301202:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf21ed2a554d3fcc7b7c88f463b314a227caea7bf",
        "target": "[RepairTarget] VALEO_301202:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf2e5fd2c779fb243155d0810170dfe481b305dac",
        "target": "[RepairTarget] SafeMath:add:6\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf3319a43b922e2ee5c33fb83b8a860344d8279bb",
        "target": "[RepairTarget] SnailToken:transferFrom:51\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf4dc44f1c618a5e4b6f372347e033ac5e77971a5",
        "target": "[RepairTarget] CONTINENTAL_AG:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf4dc44f1c618a5e4b6f372347e033ac5e77971a5",
        "target": "[RepairTarget] CONTINENTAL_AG:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf543684592a3a7ca59e951458031b54d6df25f1b",
        "target": "[RepairTarget] AGAVETHER:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf60d7c34b06df18c91ff3dc56efcc247ad93f80e",
        "target": "[RepairTarget] XCareToken:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf63d8bb7dd900f9b2923b764a9c68c1768c6b505",
        "target": "[RepairTarget] HENKEL_AG:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf63d8bb7dd900f9b2923b764a9c68c1768c6b505",
        "target": "[RepairTarget] HENKEL_AG:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf67462b1d032f51646c09196c2bd30ad0cfbad8d",
        "target": "[RepairTarget] XataToken:fallback:156\nCODE: balances[msg.sender] += tokensIssued\nOPERATION: balances[msg.sender] [+=] tokensIssued\nSSA: REF_27 [+] tokensIssued_3 --> REF_27\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf67462b1d032f51646c09196c2bd30ad0cfbad8d",
        "target": "[RepairTarget] XataToken:fallback:152\nCODE: totalBonusTokensIssued += totalContribution\nOPERATION: totalBonusTokensIssued [+=] totalContribution\nSSA: totalBonusTokensIssued_5 [+] totalContribution_3 --> totalBonusTokensIssued_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf67462b1d032f51646c09196c2bd30ad0cfbad8d",
        "target": "[RepairTarget] XataToken:fallback:151\nCODE: tokensIssued += totalContribution\nOPERATION: tokensIssued [+=] totalContribution\nSSA: tokensIssued_1 [+] totalContribution_3 --> tokensIssued_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf6809941ff0c39977baea6662931786aac5e605d",
        "target": "[RepairTarget] Hypo_Renten:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf6809941ff0c39977baea6662931786aac5e605d",
        "target": "[RepairTarget] Hypo_Renten:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf7123d59bd184f4a07ef758640206a28a62cf8cd",
        "target": "[RepairTarget] SafeMath:safeMult:45\nCODE: uint256 z = x * y\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf72b5d4323e3a6fe44218c8bf9db487f1e7ad38a",
        "target": "[RepairTarget] ASEChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf78470c139b07b21e59f9b7ee6149f58777806af",
        "target": "[RepairTarget] TrumpBingo:addWord:150\nCODE: index = words.push(Word({word: word, disabled: false})) - 1\nOPERATION: words.push(Word({word: word, disabled: false})) [-] 1\nSSA: TMP_35 [-] 1 --> TMP_36\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf806bfb4e407bee4e0693f276ea9deb6ff6349da",
        "target": "[RepairTarget] REOC:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf874d3812228ce98094cb971ad858ece6b9f9be6",
        "target": "[RepairTarget] WTI_10_20180920:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf874d3812228ce98094cb971ad858ece6b9f9be6",
        "target": "[RepairTarget] WTI_10_20180920:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf896dd064e91dabd441102bed530f2c13b9c9fdb",
        "target": "[RepairTarget] StandardToken:transferFrom:123\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf8d266596c934073ac0435fe508f4448ee1e460b",
        "target": "[RepairTarget] AZRIELI_GROUP_20230515:transfer:24\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf8d266596c934073ac0435fe508f4448ee1e460b",
        "target": "[RepairTarget] AZRIELI_GROUP_20230515:transferFrom:51\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfacfb7aad014f30f06e67cbee8d3308c69aed37a",
        "target": "[RepairTarget] StandardToken:transferFrom:89\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfbcee7bc456124909dc9a15167e8a47b175754e6",
        "target": "[RepairTarget] SafeMath:mul:740\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_185\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfbcee7bc456124909dc9a15167e8a47b175754e6",
        "target": "[RepairTarget] StrongHold:sqrt:718\nCODE: uint z = (x + 1) / 2\nOPERATION: x [+] 1\nSSA: x_1 [+] 1 --> TMP_160\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfbcee7bc456124909dc9a15167e8a47b175754e6",
        "target": "[RepairTarget] StrongHold:tokensToEthereum_:697\nCODE: uint256 _tokenSupply = (tokenSupply_ + 1e18)\nOPERATION: tokenSupply_ [+] 1e18\nSSA: tokenSupply__22 [+] 1000000000000000000 --> TMP_146\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfbcee7bc456124909dc9a15167e8a47b175754e6",
        "target": "[RepairTarget] StrongHold:sqrt:718\nCODE: uint z = (x + 1) / 2\nOPERATION: (x + 1) [/] 2\nSSA: TMP_160 [/] 2 --> TMP_161\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfcd7d82ff08b8abe4b278450ed189cf731f9602a",
        "target": "[RepairTarget] DBC:transfer:59\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_2 [-] _value_1 --> REF_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfe16f8385f148e837f4f5a6d10402e064c7aff10",
        "target": "[RepairTarget] FXNOW:transferFrom:55\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xff6f22397ced567c4bf0adaa6fd4d81c87299331",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xff774723dc0b7ae8a9756a2f03b95d376db54dec",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfffc5ae5939671192286a9ce37b2e6fe534ca49d",
        "target": "[RepairTarget] Token99:enableWhitelist:116\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0b65614049a6ae7ea9b1ff1a9cb47fa158acb55e",
        "target": "[RepairTarget] LacesToken:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x105e79944dd7b99041e319265d0de0c416ddfcd9",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x18367f4eca68f7f374f61784ba38bcec3fee77f8",
        "target": "[RepairTarget] SafeMathMod:sub:6\nCODE: require((c = a - b) < a)\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_0\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x18367f4eca68f7f374f61784ba38bcec3fee77f8",
        "target": "[RepairTarget] SafeMathMod:add:10\nCODE: require((c = a + b) > a)\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x19a8c1615caa96224241138d378c82311aa1262b",
        "target": "[RepairTarget] NyronChain_Crowdsale:fallback:40\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1a6128020e788ae73d58118f1b20312f5f5f780f",
        "target": "[RepairTarget] ERC20:transfer:71\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1a6128020e788ae73d58118f1b20312f5f5f780f",
        "target": "[RepairTarget] ERC20:transferFrom:79\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1b27c2c096ae7e408eef72731fa5ea7e753054de",
        "target": "[RepairTarget] SUSIToken:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x25be312868aed68afaf5ac75aed062f4d4c78ce3",
        "target": "[RepairTarget] RAIOCO:_transfer:63\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2702ff94cb05717bfa47324872ab5c92b07a8982",
        "target": "[RepairTarget] SolarNA:fallback:166\nCODE: uint value = msg.value / uint(divPrice)\nOPERATION: msg.value [/] uint(divPrice)\nSSA: msg.value [/] TMP_30 --> TMP_31\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2702ff94cb05717bfa47324872ab5c92b07a8982",
        "target": "[RepairTarget] StandardToken:transferFrom:66\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x395f7bc771db53732025547458f96ee217af6ad1",
        "target": "[RepairTarget] ieoservices:burn:115\nCODE: balanceOf[0x0] += _value\nOPERATION: balanceOf[0x0] [+=] _value\nSSA: REF_24 [+] _value_1 --> REF_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4ad6590fe12cea6dbf9eda1bd4f74f9a0292e585",
        "target": "[RepairTarget] CryptoGems:minerState:281\nCODE: miners[id].sleepBlock !=0 && block.number - miners[id].sleepBlock > miners[id].sleepDuration && miners[id].sleepBlock > miners[id].workBlock\nOPERATION: block.number [-] miners[id].sleepBlock\nSSA: block.number [-] REF_138 --> TMP_138\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4ad6590fe12cea6dbf9eda1bd4f74f9a0292e585",
        "target": "[RepairTarget] CryptoGems:minerState:277\nCODE: miners[id].workBlock !=0 && block.number - miners[id].workBlock > miners[id].workDuration && miners[id].workBlock > miners[id].sleepBlock\nOPERATION: block.number [-] miners[id].workBlock\nSSA: block.number [-] REF_128 --> TMP_132\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4ad6590fe12cea6dbf9eda1bd4f74f9a0292e585",
        "target": "[RepairTarget] CryptoGems:transfer:23\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4ad6590fe12cea6dbf9eda1bd4f74f9a0292e585",
        "target": "[RepairTarget] CryptoGems:transferFrom:32\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x50a72ddc2916c235bee4fa64b6e4b6fc4f2c315e",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x81fdb4c16ebbd851221c842341e953603ba1debc",
        "target": "[RepairTarget] InitialCoinOfferingToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x81fdb4c16ebbd851221c842341e953603ba1debc",
        "target": "[RepairTarget] InitialCoinOfferingToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9dcd9a815bfe85593eb65901e1dbdde4073738b0",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xacddb1b4a5527af01ed85c74f43f90ecd1276b8e",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb91a6c5c6362b10db6440d690e5391bb1eabe591",
        "target": "[RepairTarget] Gift:Put:14\nCODE: unlockTime += now\nOPERATION: unlockTime [+=] now\nSSA: unlockTime_1 [+] now --> unlockTime_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbbc5cbf30374f106284f990011be86ce9134f9c0",
        "target": "[RepairTarget] StarFishCoin:transferFrom:49\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbec5d11534d68a724640b8291310f56c92b31010",
        "target": "[RepairTarget] XPZ:Airdrop:124\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e",
        "target": "[RepairTarget] MLCToken:burn:115\nCODE: balanceOf[0x0] += _value\nOPERATION: balanceOf[0x0] [+=] _value\nSSA: REF_24 [+] _value_1 --> REF_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbf60f470a353e2cf55bbfce9a2e2b075fa904daf",
        "target": "[RepairTarget] AthletiCoin:mintToken:49\nCODE: totalSupply += mintedAmount\nOPERATION: totalSupply [+=] mintedAmount\nSSA: totalSupply_3 [+] mintedAmount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc1d73e148590b60ce9dd42d141f9b27bbad07879",
        "target": "[RepairTarget] EthReceiver:Put:14\nCODE: unlockTime += now\nOPERATION: unlockTime [+=] now\nSSA: unlockTime_1 [+] now --> unlockTime_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe02506134dde171d9fc5d1fbc408da9b2c0633f7",
        "target": "[RepairTarget] SafeMath:mul:11\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe413cbb9a3b64ffe1f7b08898d91ccacf6c457a7",
        "target": "[RepairTarget] DSMath:mul:91\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe413cbb9a3b64ffe1f7b08898d91ccacf6c457a7",
        "target": "[RepairTarget] DSMath:mul:91\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: (z = x * y) [/] y\nSSA: z_1 [/] y_1 --> TMP_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe437ba40feb272c964338f217d0ba1d690884516",
        "target": "[RepairTarget] DSMath:mul:91\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: x [*] y\nSSA: x_1 [*] y_1 --> TMP_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe437ba40feb272c964338f217d0ba1d690884516",
        "target": "[RepairTarget] DSMath:mul:91\nCODE: require(y == 0 || (z = x * y) / y == x)\nOPERATION: (z = x * y) [/] y\nSSA: z_1 [/] y_1 --> TMP_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeb14e8d94010d402fff3decaa712aa9cf4662a72",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x02f2d4a04e6e01ace88bd2cd632875543b2ef577",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x02f2d4a04e6e01ace88bd2cd632875543b2ef577",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x035d029839d7cdc1f111dcfb6303d763459a46dc",
        "target": "[RepairTarget] EggFactory:setActiveStatusEgg:183\nCODE: activeEggs[indexesActiveEggs[_eggId]] = activeEggs[activeEggs.length-1]\nOPERATION: activeEggs.length [-] 1\nSSA: REF_16 [-] 1 --> TMP_59\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0a40b8d908f8005f1349b483a5016a664fb6006c",
        "target": "[RepairTarget] YeekAirdropper:withdrawAirdropTokens:65\nCODE: airdropRecipients[airdropRecipients.length - 1]= msg.sender\nOPERATION: airdropRecipients.length [-] 1\nSSA: REF_7 [-] 1 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0dc3f6c12741b61e5145c1d05340f8a0315fecc1",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0e1b60780fec3591495de55f080bcce3cac5f5e3",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0e1b60780fec3591495de55f080bcce3cac5f5e3",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x0e69d0a2bbb30abcb7e5cfea0e4fde19c00a8d47",
        "target": "[RepairTarget] DSMath:sub:104\nCODE: require((z = x - y) <= x)\nOPERATION: x [-] y\nSSA: x_1 [-] y_1 --> TMP_37\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0e9925fb36f82b98e04d844e92c01386e0c2b605",
        "target": "[RepairTarget] SafeMath:mul:181\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0f43e50aa2ec14296a33f68d0c8c605b3acc08dc",
        "target": "[RepairTarget] TAKLIMAKAN:distributeTKLN:100\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0f43e50aa2ec14296a33f68d0c8c605b3acc08dc",
        "target": "[RepairTarget] TAKLIMAKAN:transfer:124\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_11 [+] _amount_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0f43e50aa2ec14296a33f68d0c8c605b3acc08dc",
        "target": "[RepairTarget] TAKLIMAKAN:transferFrom:140\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_20 [+] _amount_1 --> REF_20\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x10d3b05468f384258630e4fe142c830efe4120ca",
        "target": "[RepairTarget] AWAXToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x10d3b05468f384258630e4fe142c830efe4120ca",
        "target": "[RepairTarget] AWAXToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1508b22098f563b420c5abfa0d270456369e38c4",
        "target": "[RepairTarget] SafeMath:safeMul:39\nCODE: require(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1770f857b74ab3e1ed8641a54fe92a6038eef30c",
        "target": "[RepairTarget] ArabGoldToken:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x18f1117186ea252e54a2fdd200f6fa48f9e5e979",
        "target": "[RepairTarget] LegionToken:_transfer:38\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x18f1117186ea252e54a2fdd200f6fa48f9e5e979",
        "target": "[RepairTarget] LegionToken:_transfer:41\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x19d6eb7013504e384cd4d440e0ec674d0b636d7f",
        "target": "[RepairTarget] TOC:_transfer:54\nCODE: assert(balances[_from] + balances[_to] == PreviousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x21f15966e07a10554c364b988e91dab01d32794a",
        "target": "[RepairTarget] StandardToken:transferFrom:148\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_21 [-] _value_1 --> REF_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x231c39bb8aed6fb626051cb59c5c73e9345afb91",
        "target": "[RepairTarget] StandardToken:transferFrom:39\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x238f29b3e5f5d199d37444e7118cc49f8e1bf58c",
        "target": "[RepairTarget] METADOLLAR:STARTMETADOLLAR:127\nCODE: currentTokenPrice = 1 * 1000 ether\nOPERATION: 1 [*] 1000 ether\nSSA: 1 [*] 1000000000000000000000 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x24d83a0efd15acb7202e097da33cb13eedb60176",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2b93194d0984201ab0220a3ec6b80d9a0bd49ed7",
        "target": "[RepairTarget] RewardsGiftToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2b93194d0984201ab0220a3ec6b80d9a0bd49ed7",
        "target": "[RepairTarget] RewardsGiftToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2d1d4548d5bf0e2feb9f21084753f2f2ca60209c",
        "target": "[RepairTarget] TokenBase:_transfer:47\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2d1d4548d5bf0e2feb9f21084753f2f2ca60209c",
        "target": "[RepairTarget] TokenBase:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_13\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2dfb39072368a67b419e873d39848707b5234935",
        "target": "[RepairTarget] Whitelist:removeAddressesFromWhitelist:114\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2e76886f251caf2efe6853b181cea3385cc3a24b",
        "target": "[RepairTarget] TokenERC20:_transfer:158\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x330839ef82d34801bd96e75a4ee778ac56fa1ed8",
        "target": "[RepairTarget] Whitelist:addAddressesToWhitelist:102\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x330839ef82d34801bd96e75a4ee778ac56fa1ed8",
        "target": "[RepairTarget] Whitelist:removeAddressesFromWhitelist:130\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x35bb9e364c2b2108ff05e0fc01ea420024d82ab0",
        "target": "[RepairTarget] ArabcoinToken:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x361957bcf2846c280e5ebe6f3a9e9c68b07d8a04",
        "target": "[RepairTarget] ArabCashToken:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x387f21b7b513aa1b05275fa433bc19d0a006fe18",
        "target": "[RepairTarget] TokenERC20:_transfer:108\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x39685718663bf4ad2206f1baf7aadbca0e7d7f95",
        "target": "[RepairTarget] MetaDollar:BFreeContract:129\nCODE: currentTokenPrice = 0.001 * 1 ether\nOPERATION: 0.001 [*] 1 ether\nSSA: 0 [*] 1000000000000000000 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x3af803136acf303075bf7374e0e5f5b500b6162b",
        "target": "[RepairTarget] METADOLLAR:STARTMETADOLLAR:136\nCODE: currentTokenPrice = mtdAmount * ethAmount\nOPERATION: mtdAmount [*] ethAmount\nSSA: mtdAmount_1 [*] ethAmount_1 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x40489719e489782959486a04b765e1e93e5b221a",
        "target": "[RepairTarget] SGEToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x40489719e489782959486a04b765e1e93e5b221a",
        "target": "[RepairTarget] SGEToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x417d6feeae8b2fcb73d14d64be7f192e49431978",
        "target": "[RepairTarget] SkillCoin:lockupAccounts:221\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x417d6feeae8b2fcb73d14d64be7f192e49431978",
        "target": "[RepairTarget] SkillCoin:bulkTransfer:388\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x452ee11eb4ed8e709c510659f31c4942c14ff608",
        "target": "[RepairTarget] EthMash:userChallenge:43\nCODE: balances[owner] += 5 finney\nOPERATION: balances[owner] [+=] 5 finney\nSSA: REF_7 [+] 5000000000000000 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x452ee11eb4ed8e709c510659f31c4942c14ff608",
        "target": "[RepairTarget] EthMash:userChallenge:35\nCODE: uint random = (uint(blockhash(block.number - 1)) + uint(leader) + uint(msg.sender))\nOPERATION: block.number [-] 1\nSSA: block.number [-] 1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x46ee746d396bb2808e8fa41dc658036aee51d857",
        "target": "[RepairTarget] EthMash:userChallenge:46\nCODE: uint random = ((uint(blockhash(block.number - 1)) + uint(leaders[index]) + uint(msg.sender)) % 100) + 1\nOPERATION: ((uint(blockhash(block.number - 1)) + uint(leaders[index]) + uint(msg.sender)) % 100) [+] 1\nSSA: TMP_21 [+] 1 --> TMP_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x46ee746d396bb2808e8fa41dc658036aee51d857",
        "target": "[RepairTarget] EthMash:userChallenge:46\nCODE: uint random = ((uint(blockhash(block.number - 1)) + uint(leaders[index]) + uint(msg.sender)) % 100) + 1\nOPERATION: block.number [-] 1\nSSA: block.number [-] 1 --> TMP_14\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x46fc127ed9885567d7a7fbfebec76278e55e2e4d",
        "target": "[RepairTarget] METADOLLAR:STARTMETADOLLAR:129\nCODE: currentTokenPrice = 1000000000000000000 * 1000000000000000000 ether\nOPERATION: 1000000000000000000 [*] 1000000000000000000 ether\nSSA: 1000000000000000000 [*] 1000000000000000000000000000000000000 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x4957f09cb1cca6af581db84f4721756aa1af3e78",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4d56c829c185a2526b18bfc3b50dd26454759a8e",
        "target": "[RepairTarget] StandardToken:transferFrom:57\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4f1e17b87827c4704bcd6fdaf0d2aa7cc3573d74",
        "target": "[RepairTarget] ERC20Wataex:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4fe9f52ec23f6805f2fd0332a34da4f1c135b024",
        "target": "[RepairTarget] TokenERC20:_transfer:83\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x546f5277ebdb432f055223c04345479d1ea0e400",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5670e151e7f135845f8d29aaddca970d04285167",
        "target": "[RepairTarget] SafeMath:mul:13\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5670e151e7f135845f8d29aaddca970d04285167",
        "target": "[RepairTarget] SkillCoinTest:lockupAccounts:221\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x586927ff87bf40aada74afbff5e2409b865be023",
        "target": "[RepairTarget] HashBet:resolveBet:26\nCODE: uint dist = block.number - bet.height\nOPERATION: block.number [-] bet.height\nSSA: block.number [-] REF_6 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x58a11a4445adc8384ccb69935162af2ca5ae7f63",
        "target": "[RepairTarget] Ethervote:bet:55\nCODE: leftVotes++\nOPERATION: [++] leftVotes\nSSA: leftVotes_1 [+] 1 --> leftVotes_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x58a11a4445adc8384ccb69935162af2ca5ae7f63",
        "target": "[RepairTarget] Ethervote:bet:84\nCODE: thePot += rightSharePrice\nOPERATION: thePot [+=] rightSharePrice\nSSA: thePot_1 [+] rightSharePrice_1 --> thePot_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x58a11a4445adc8384ccb69935162af2ca5ae7f63",
        "target": "[RepairTarget] Ethervote:bet:56\nCODE: thePot += leftSharePrice\nOPERATION: thePot [+=] leftSharePrice\nSSA: thePot_1 [+] leftSharePrice_1 --> thePot_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x58a11a4445adc8384ccb69935162af2ca5ae7f63",
        "target": "[RepairTarget] Ethervote:bet:57\nCODE: amountSent -= leftSharePrice\nOPERATION: amountSent [-=] leftSharePrice\nSSA: amountSent_4 [-] leftSharePrice_1 --> amountSent_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x58a11a4445adc8384ccb69935162af2ca5ae7f63",
        "target": "[RepairTarget] Ethervote:bet:85\nCODE: amountSent -= rightSharePrice\nOPERATION: amountSent [-=] rightSharePrice\nSSA: amountSent_2 [-] rightSharePrice_1 --> amountSent_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x59498791f6b09a19b85cbeacd63cbfbd10104cd3",
        "target": "[RepairTarget] ContractBHVC:transfer:125\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_8 [+] _amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x594b71eac01fdc6f2ef434368a03f37ed2c3ffab",
        "target": "[RepairTarget] QFLORA:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5986b5d6d6f49f31fb9cca27d92a04e1cbb95a21",
        "target": "[RepairTarget] ContractFPC:transfer:130\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_8 [+] _amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5be4294c774fd58b65e5753a1de2465f836d5acf",
        "target": "[RepairTarget] GOLDEQ:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5c5abd9c0f1c9b7305334944f47caa4b32703eef",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: require(balanceOf[_to] + _value > balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x5f9f2ae7150d0beef3bb50ac8d8f4b43e6a6cc57",
        "target": "[RepairTarget] StandardToken:transfer:21\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5f9f2ae7150d0beef3bb50ac8d8f4b43e6a6cc57",
        "target": "[RepairTarget] StandardToken:transferFrom:32\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x61c2d5cf5fb2096348e78f71315b9d42cf42082f",
        "target": "[RepairTarget] TestERC721:takeOwnership:73\nCODE: balances[newOwner] += 1\nOPERATION: balances[newOwner] [+=] 1\nSSA: REF_10 [+] 1 --> REF_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x61c2d5cf5fb2096348e78f71315b9d42cf42082f",
        "target": "[RepairTarget] TestERC721:transfer:86\nCODE: balances[newOwner] += 1\nOPERATION: balances[newOwner] [+=] 1\nSSA: REF_14 [+] 1 --> REF_14\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x63fa9536077e7aabe8e9b1f5cc49af30ac948ede",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6962e259a8f9633c4494764628a7984cced58e10",
        "target": "[RepairTarget] AztraToken:_transfer:81\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_6 [+] REF_7 --> TMP_14\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6afa5fd5327e5c862a929e7e4711de0228deabec",
        "target": "[RepairTarget] TokenERC20:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6afa5fd5327e5c862a929e7e4711de0228deabec",
        "target": "[RepairTarget] TokenERC20:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6d66439c9cc75b69f9a40e82f34445081b8e929a",
        "target": "[RepairTarget] TokenRK50Z:OWN_mintToken:295\nCODE: balances[owner] += mintedAmount\nOPERATION: balances[owner] [+=] mintedAmount\nSSA: REF_52 [+] mintedAmount_1 --> REF_52\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6ea629c00ef978c5955e0f8ef6abeb6efd2772ae",
        "target": "[RepairTarget] SafeMath:mul:23\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x79dcd7320f227a368f0b73b0af2997d2cb3888d6",
        "target": "[RepairTarget] SafeMath:mul:55\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x79e10a7324e97ef9d6ab9f5dd069b847f99ee851",
        "target": "[RepairTarget] Crowdsale:fallback:52\nCODE: tokenReward.transfer(msg.sender, amount * 10 ** uint256(tokenDecimal) / price)\nOPERATION: amount [*] 10 ** uint256(tokenDecimal)\nSSA: amount_1 [*] TMP_7 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x79e10a7324e97ef9d6ab9f5dd069b847f99ee851",
        "target": "[RepairTarget] Crowdsale:fallback:51\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x79e10a7324e97ef9d6ab9f5dd069b847f99ee851",
        "target": "[RepairTarget] Crowdsale:fallback:52\nCODE: tokenReward.transfer(msg.sender, amount * 10 ** uint256(tokenDecimal) / price)\nOPERATION: amount * 10 ** uint256(tokenDecimal) [/] price\nSSA: TMP_8 [/] price_2 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7da8172cc69acf171d82662bdc12c55f134339de",
        "target": "[RepairTarget] MICE:_transfer:115\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7ffc2bd9431b059c509b45b33e77852d47de827d",
        "target": "[RepairTarget] GIFT3600:Put:14\nCODE: unlockTime += now\nOPERATION: unlockTime [+=] now\nSSA: unlockTime_1 [+] now --> unlockTime_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x80248bb8bd26f449dea5b4d01faf936075b7111d",
        "target": "[RepairTarget] Pasadena:lastMint:395\nCODE: uint256 remaining = totalSupply * 40 / 60\nOPERATION: totalSupply [*] 40\nSSA: totalSupply_3 [*] 40 --> TMP_150\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x80248bb8bd26f449dea5b4d01faf936075b7111d",
        "target": "[RepairTarget] Pasadena:multiMint:377\nCODE: ++i\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x80248bb8bd26f449dea5b4d01faf936075b7111d",
        "target": "[RepairTarget] Pasadena:lastMint:395\nCODE: uint256 remaining = totalSupply * 40 / 60\nOPERATION: totalSupply * 40 [/] 60\nSSA: TMP_150 [/] 60 --> TMP_151\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x80248bb8bd26f449dea5b4d01faf936075b7111d",
        "target": "[RepairTarget] Pasadena:lastMint:400\nCODE: remaining -= fractionalPart\nOPERATION: remaining [-=] fractionalPart\nSSA: remaining_1 [-] fractionalPart_1 --> remaining_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x83f06e75e448115d7f5e2038814766124c0db8ce",
        "target": "[RepairTarget] RegularToken:transfer:45\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x83f06e75e448115d7f5e2038814766124c0db8ce",
        "target": "[RepairTarget] UnboundedRegularToken:transferFrom:100\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_44 [-] _value_1 --> REF_44\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x84488ea1697451230b80ae0ba9dcd0f2d7a7ebaf",
        "target": "[RepairTarget] ArabSilverToken:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x84b4999b7ce7d64cd8732386a762e2de837d1805",
        "target": "[RepairTarget] SafeGift:promo:124\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x853f93ede7f5414b28b8b9c0dec55b501c913f0f",
        "target": "[RepairTarget] TOC:_transfer:54\nCODE: assert(balances[_from] + balances[_to] == PreviousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x86f7a33b61655528f2c1bbe8180844fb3ca37333",
        "target": "[RepairTarget] DSMath:sub:104\nCODE: require((z = x - y) <= x)\nOPERATION: x [-] y\nSSA: x_1 [-] y_1 --> TMP_37\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8e3f2ed501a6d73218c3e7a0d2bd5334d4989404",
        "target": "[RepairTarget] TokenERC20:_transfer:59\nCODE: index++\nOPERATION: [++] index\nSSA: index_2 [+] 1 --> index_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8f7dbf90e71285552a687097220e1035c2e87639",
        "target": "[RepairTarget] _0xCatetherToken:getMiningReward:274\nCODE: epochCount > 80000\nOPERATION: 500000 [*] 10**uint(decimals)\nSSA: epochCount_11 [>] 80000 --> TMP_81\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8f7dbf90e71285552a687097220e1035c2e87639",
        "target": "[RepairTarget] _0xCatetherToken:getMiningReward:272\nCODE: epochCount > 120000\nOPERATION: 125000 [*] 10**uint(decimals)\nSSA: epochCount_11 [>] 120000 --> TMP_73\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8f7dbf90e71285552a687097220e1035c2e87639",
        "target": "[RepairTarget] _0xCatetherToken:getMiningReward:271\nCODE: epochCount > 140000\nOPERATION: 75000 [*] 10**uint(decimals)\nSSA: epochCount_11 [>] 140000 --> TMP_69\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8f7dbf90e71285552a687097220e1035c2e87639",
        "target": "[RepairTarget] _0xCatetherToken:getMiningReward:273\nCODE: epochCount > 100000\nOPERATION: 250000 [*] 10**uint(decimals)\nSSA: epochCount_11 [>] 100000 --> TMP_77\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x946863a91e9a67bb5c11fc42d0998baebfa2727f",
        "target": "[RepairTarget] TokenERC20:_transfer:158\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x974fffcc21b9a958ed62282b95623104d1bdea64",
        "target": "[RepairTarget] Whitelist:addAddressesToWhitelist:128\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x97f71c228970a707200c3b7f161c4594a348c5e6",
        "target": "[RepairTarget] TPP2018TOKEN:transferFrom:18\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x97f71c228970a707200c3b7f161c4594a348c5e6",
        "target": "[RepairTarget] TPP2018TOKEN:transfer:10\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9b2de3808e64a2a7ddfab46e991d9f354acde54d",
        "target": "[RepairTarget] Crowdsale:fallback:49\nCODE: amountRaised += amount\nOPERATION: amountRaised [+=] amount\nSSA: amountRaised_1 [+] amount_1 --> amountRaised_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9dc8ade74b030afd8b1dbfa821967703153e1703",
        "target": "[RepairTarget] TwiceAWeekCoin:transferFrom:57\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa072d92a8ce639db1f504fccd6b5f14f382ccccf",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa575aea29bcf52afa55113b3b1b9e3813143d10d",
        "target": "[RepairTarget] TokenLingERC20:TokenERC20:33\nCODE: totalSupply = initialSupply * 10 ** uint256(decimals)\nOPERATION: initialSupply [*] 10 ** uint256(decimals)\nSSA: initialSupply_1 [*] TMP_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa63a04cf9c087ea74f713d43f2d5a067d7ec7b5f",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: require(balanceOf[_to] + _value > balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xa6c9399079e3b62a6312bad4740a4de8829c93b4",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaac4bd00745b72f49fd1d32862cfdac8a1bb80eb",
        "target": "[RepairTarget] PingToken:ping:44\nCODE: balances[msg.sender] -= cost\nOPERATION: balances[msg.sender] [-=] cost\nSSA: REF_8 [-] cost_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xae19516336b1435d856b1215b9644a7a12bc6f1a",
        "target": "[RepairTarget] ContractTST:transfer:125\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_8 [+] _amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xae3bf0f077ed66dda9fb1b5475942c919ef3bb0d",
        "target": "[RepairTarget] Sandstone:Put:14\nCODE: unlockTime += now\nOPERATION: unlockTime [+=] now\nSSA: unlockTime_1 [+] now --> unlockTime_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xaf9c1035fad1e520161e5ea5b3701f1e48d319fa",
        "target": "[RepairTarget] MultiTransferableToken:multiTransfer:332\nCODE: i++\nOPERATION: [++] i\nSSA: i_5 [+] 1 --> i_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb280ab2c126b33a9ff5c9740eb161ece3008ff3b",
        "target": "[RepairTarget] ZooblinToken:fallback:306\nCODE: tokens = msg.value * 10500\nOPERATION: msg.value [*] 10500\nSSA: msg.value [*] 10500 --> TMP_93\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb280ab2c126b33a9ff5c9740eb161ece3008ff3b",
        "target": "[RepairTarget] ZooblinToken:fallback:301\nCODE: tokens = msg.value * 11000\nOPERATION: msg.value [*] 11000\nSSA: msg.value [*] 11000 --> TMP_90\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb33208b52d1d0fca86dabff07db76780470a3749",
        "target": "[RepairTarget] TACOS:tokensToEthereum_:690\nCODE: uint256 tokens_ = (_tokens + 1e18)\nOPERATION: _tokens [+] 1e18\nSSA: _tokens_1 [+] 1000000000000000000 --> TMP_153\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb33208b52d1d0fca86dabff07db76780470a3749",
        "target": "[RepairTarget] TACOS:sqrt:712\nCODE: uint z = (x + 1) / 2\nOPERATION: x [+] 1\nSSA: x_1 [+] 1 --> TMP_168\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb33208b52d1d0fca86dabff07db76780470a3749",
        "target": "[RepairTarget] TACOS:sqrt:712\nCODE: uint z = (x + 1) / 2\nOPERATION: (x + 1) [/] 2\nSSA: TMP_168 [/] 2 --> TMP_169\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb3d5cb3487ab2ce24172e2f4791d5c638324fce7",
        "target": "[RepairTarget] FakeVote:voteFor:27\nCODE: alreadyUsedVotes[msg.sender] += numVotes\nOPERATION: alreadyUsedVotes[msg.sender] [+=] numVotes\nSSA: REF_3 [+] numVotes_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7",
        "target": "[RepairTarget] keepMyEther:fallback:14\nCODE: balances[msg.sender] += msg.value\nOPERATION: balances[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbaa3de6504690efb064420d89e871c27065cdd52",
        "target": "[RepairTarget] VaultProxy:deposit:26\nCODE: Deposits[msg.sender] += msg.value\nOPERATION: Deposits[msg.sender] [+=] msg.value\nSSA: REF_4 [+] msg.value --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbb9303164bf36d92dddb805f267463d9688fe472",
        "target": "[RepairTarget] SafeMath:mul:21\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbe8608083b1716eb64696693e728ab3142745f92",
        "target": "[RepairTarget] TokenAppERC20:TokenERC20:33\nCODE: totalSupply = initialSupply * 10 ** uint256(decimals)\nOPERATION: initialSupply [*] 10 ** uint256(decimals)\nSSA: initialSupply_1 [*] TMP_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbf3f792573e6bee4aea45a8e3d6c8543c39c78b7",
        "target": "[RepairTarget] CoinX:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc35924a3661bbadabbba4f1823fa74fcafcb08ef",
        "target": "[RepairTarget] RxPharma:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc35924a3661bbadabbba4f1823fa74fcafcb08ef",
        "target": "[RepairTarget] RxPharma:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xc3ee57fa8ed253e3f214048879977265967ae745",
        "target": "[RepairTarget] Whitelist:addAddressesToWhitelist:128\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc545841575be98d58ccde7842e5caa11ec61a0a1",
        "target": "[RepairTarget] Presale:getPeriodBounus:152\nCODE: start + period * 4 > now\nOPERATION: period [*] 4\nSSA: period_2 [*] 4 --> TMP_38\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc545841575be98d58ccde7842e5caa11ec61a0a1",
        "target": "[RepairTarget] Presale:getPeriodBounus:150\nCODE: start + period * 3 > now\nOPERATION: start [+] period * 3\nSSA: start_2 [+] TMP_35 --> TMP_36\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc545841575be98d58ccde7842e5caa11ec61a0a1",
        "target": "[RepairTarget] Presale:getPeriodBounus:150\nCODE: start + period * 3 > now\nOPERATION: period [*] 3\nSSA: period_2 [*] 3 --> TMP_35\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc545841575be98d58ccde7842e5caa11ec61a0a1",
        "target": "[RepairTarget] Presale:getPeriodBounus:152\nCODE: start + period * 4 > now\nOPERATION: start [+] period * 4\nSSA: start_2 [+] TMP_38 --> TMP_39\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc5b18f590113068b9bf56a0c27a9dee599e8b606",
        "target": "[RepairTarget] AMACToken:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcade05dd84fbad2f865e15b3487aaf9cb4ef3954",
        "target": "[RepairTarget] PingToken:ping:47\nCODE: balances[msg.sender] -= cost\nOPERATION: balances[msg.sender] [-=] cost\nSSA: REF_8 [-] cost_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcced700fd73fe6937882ea544524ac2d424bed3b",
        "target": "[RepairTarget] Token:transferFrom:48\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_14 [-] _value_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcd711a527765b67da279e0f00212ed25b055966a",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcfaa1833c92a0d6082a804496f4086fb73b74bee",
        "target": "[RepairTarget] StandardToken:transferFrom:56\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcfc2437916a6df165235272dbfb116687bb1a00b",
        "target": "[RepairTarget] PlusCoin:transfer:115\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcfc2437916a6df165235272dbfb116687bb1a00b",
        "target": "[RepairTarget] PlusCoin:transferFrom:127\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd0ecba75e5ef3e08950a4f6608565147ca872ff1",
        "target": "[RepairTarget] T_TOTAL:retrieve:7\nCODE: msg.value >= (this.balance - msg.value)\nOPERATION: this.balance [-] msg.value\nSSA: REF_0 [-] msg.value --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd0ffe3496101fd676b646ade429653d7df12edd2",
        "target": "[RepairTarget] ContractEFT:transfer:125\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_8 [+] _amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd15c99163799f81c4a585c50ed79a78e06c0b6ae",
        "target": "[RepairTarget] METADOLLAR:STARTMETADOLLAR:130\nCODE: currentTokenPrice = 1 * 1 ether\nOPERATION: 1 [*] 1 ether\nSSA: 1 [*] 1000000000000000000 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xd1d164258c599fdce8948437cf08ab76f96b4a8c",
        "target": "[RepairTarget] _0xCatetherToken:getMiningReward:414\nCODE: return ( (uint256(keccak256(digest, blockhash(block.number - 2))) % 3000000) * 10**uint(decimals) )\nOPERATION: block.number [-] 2\nSSA: block.number [-] 2 --> TMP_97\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xd8325fb1a8f37e339926ed784965ab92e5b03f40",
        "target": "[RepairTarget] METADOLLAR:STARTMETADOLLAR:133\nCODE: currentTokenPrice = mtdAmount * ethAmount\nOPERATION: mtdAmount [*] ethAmount\nSSA: mtdAmount_1 [*] ethAmount_1 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd8c91afa243a3e40b0a3d2d80d81bec4f1e7fe2c",
        "target": "[RepairTarget] SafeGiftTokens:promo:108\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd8c91afa243a3e40b0a3d2d80d81bec4f1e7fe2c",
        "target": "[RepairTarget] SafeGiftTokens:withdrawnTokens:131\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd90878082cadf52e3c9ebadb5fd24d0b6cdd488b",
        "target": "[RepairTarget] Noscam:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdac324a72f774a614da500240f2786f2ec06c10d",
        "target": "[RepairTarget] TokenBase:_transfer:47\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdac324a72f774a614da500240f2786f2ec06c10d",
        "target": "[RepairTarget] TokenBase:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_13\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdc7c743110ec689d82f050302319ae27af84f8fa",
        "target": "[RepairTarget] PanmunjomDeclaration:makeComment:13\nCODE: numComments += 1\nOPERATION: numComments [+=] 1\nSSA: numComments_1 [+] 1 --> numComments_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdca82e4dfbce4442b19a85df47fd64aeaaf55d9f",
        "target": "[RepairTarget] RouletteRules:initPayoutTable:42\nCODE: payoutTable[start + r] = payoutRate[0]\nOPERATION: start [+] r\nSSA: start_1 [+] r_2 --> TMP_33\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdf76a9a2a204fbfc832de27fedb852c0cfc45d94",
        "target": "[RepairTarget] TokenERC20:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xdfdc0d82d96f8fd40ca0cfb4a288955becec2088",
        "target": "[RepairTarget] StandardToken:transferFrom:165\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_21 [-] _value_1 --> REF_21\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe12ae4a07ff74b011d385b8cbd916d5e827bb4f3",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe34e0c5c075e380161ce08ba69dc7960e041d10b",
        "target": "[RepairTarget] SafeMath:mul:17\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe531a0f2d42a234aba871aef089364e5ad554a45",
        "target": "[RepairTarget] TravelWithMeToken:burn:73\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe59af88023d2579554968470e838adfb32c817bd",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe6785a571696a1e557ad785ef65a1db2c32b6d9e",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe6785a571696a1e557ad785ef65a1db2c32b6d9e",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe9de21c5e7d74a7c27291acc7f8e7f126ab8d35c",
        "target": "[RepairTarget] ParyToken:fallback:115\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_3 [+] amount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeea519e55d1ebeced125aa291f4457af440a7299",
        "target": "[RepairTarget] ArabOilToken:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf07d979303c50a8632848cb154c6b30980218c07",
        "target": "[RepairTarget] StandardToken:transfer:20\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf07d979303c50a8632848cb154c6b30980218c07",
        "target": "[RepairTarget] StandardToken:transferFrom:31\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf2eeb490a41f1d8f80f56023b2871fa0277391b1",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf3b01ddd7f240e39f5b818cb36d14d69a54f6c8d",
        "target": "[RepairTarget] MultiTransferableToken:multiTransfer:332\nCODE: i++\nOPERATION: [++] i\nSSA: i_4 [+] 1 --> i_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf3b3cad094b89392fce5fafd40bc03b80f2bc624",
        "target": "[RepairTarget] ERC20:transfer:71\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf3b3cad094b89392fce5fafd40bc03b80f2bc624",
        "target": "[RepairTarget] ERC20:transferFrom:79\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf61052b9e16d20e210364b555161cce140aba0e6",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf91468b9a92860f4cd7bdf48cf45ddfc75f8e812",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfc0555aca4a78be9668993b39739d1d2616c75b0",
        "target": "[RepairTarget] Token:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfc560a12fb91c7b743d070e5764b4404de2f4883",
        "target": "[RepairTarget] Crowdsale:fallback:86\nCODE: fundedAmount[msg.sender] += amount\nOPERATION: fundedAmount[msg.sender] [+=] amount\nSSA: REF_2 [+] amount_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfc560a12fb91c7b743d070e5764b4404de2f4883",
        "target": "[RepairTarget] Crowdsale:fallback:77\nCODE: bool lessThanMaxTotalContribution = amount + totalContribution <= maxContribution\nOPERATION: amount [+] totalContribution\nSSA: amount_1 [+] totalContribution_1 --> TMP_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfc7e86dbd205d02f97316995d8ace5d0afb9fe62",
        "target": "[RepairTarget] Keystore:buyKey:12\nCODE: ownersNum = ownersNum + 1\nOPERATION: ownersNum [+] 1\nSSA: ownersNum_1 [+] 1 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfd77e9a3e62450c930178d96fd376d14fe65cccd",
        "target": "[RepairTarget] ERC20:transfer:71\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfd77e9a3e62450c930178d96fd376d14fe65cccd",
        "target": "[RepairTarget] ERC20:transferFrom:79\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_10 [+] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfde8d226bec6df6ef26595821be39f113481fa31",
        "target": "[RepairTarget] SafeMath:mul:69\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x00ec953a3a3dad27da4f70d7e5be12dc08ef2835",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x013bf75820343cccc2cffda666bf4d5f7891e35c",
        "target": "[RepairTarget] NEWTOKEN:_transfer:59\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x01a922de9af2c1158dd947ea5b794f0dd995c7df",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x01d706ed109e2038ae3261e30a1ed1af207a9d2c",
        "target": "[RepairTarget] ETHERECASHTOKEN:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x029fa59111136ce592e136760a1df1d4a6cd564b",
        "target": "[RepairTarget] RetailLoyaltySystemBase:_transfer:74\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x042969acfa0a586a939652612458a2387ab0073a",
        "target": "[RepairTarget] VixcoreToken2:_transfer:95\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x04951a80ad8ab916e0d2e977776df8b0bed33180",
        "target": "[RepairTarget] GenoPay:_transfer:23\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x04951a80ad8ab916e0d2e977776df8b0bed33180",
        "target": "[RepairTarget] GenoPay:_transfer:27\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x05aaa7100317e60dad02d604a1f6cf28bf33943e",
        "target": "[RepairTarget] SafeMath:mul:61\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x062e41d1037745dc203e8c1aaca651b8d157da96",
        "target": "[RepairTarget] Whitelist:removeAddressesFromWhitelist:111\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x064af935c8c26f124adafbdad6f6f1747f564617",
        "target": "[RepairTarget] StandardToken:transferFrom:56\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0651842ee1f973367138cd512709d81bf8a62217",
        "target": "[RepairTarget] TrackChain:enableWhitelist:108\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0651842ee1f973367138cd512709d81bf8a62217",
        "target": "[RepairTarget] TrackChain:disableWhitelist:114\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0657e8ef31ab026133ea6358bbe2bf6ce611e451",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x07390aa5de17e78a5a1e42b3f01ddb37dd4e054e",
        "target": "[RepairTarget] SafeMath:pwr:259\nCODE: ++)\nOPERATION: [++] +\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x083279e98e3b796ad1a25a103cb8b98f2929ca4c",
        "target": "[RepairTarget] pyramidMKII:addSurplus:45\nCODE: surplus += msg.value\nOPERATION: surplus [+=] msg.value\nSSA: surplus_1 [+] msg.value --> surplus_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x083279e98e3b796ad1a25a103cb8b98f2929ca4c",
        "target": "[RepairTarget] pyramidMKII:chkConsul:74\nCODE: balances[owner].ebalance += val/4\nOPERATION: balances[owner].ebalance [+=] val/4\nSSA: REF_22 [+] TMP_12 --> REF_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x083279e98e3b796ad1a25a103cb8b98f2929ca4c",
        "target": "[RepairTarget] pyramidMKII:callSurplus:49\nCODE: blockData[IDX].value += blksze\nOPERATION: blockData[IDX].value [+=] blksze\nSSA: REF_1 [+] blksze_2 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x083279e98e3b796ad1a25a103cb8b98f2929ca4c",
        "target": "[RepairTarget] pyramidMKII:chkConsul:75\nCODE: balances[consul].ebalance += val/4\nOPERATION: balances[consul].ebalance [+=] val/4\nSSA: REF_24 [+] TMP_13 --> REF_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x083279e98e3b796ad1a25a103cb8b98f2929ca4c",
        "target": "[RepairTarget] pyramidMKII:chkConsul:74\nCODE: balances[owner].ebalance += val/4\nOPERATION: val [/] 4\nSSA: val_1 [/] 4 --> TMP_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x083279e98e3b796ad1a25a103cb8b98f2929ca4c",
        "target": "[RepairTarget] pyramidMKII:chkConsul:75\nCODE: balances[consul].ebalance += val/4\nOPERATION: val [/] 4\nSSA: val_1 [/] 4 --> TMP_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x083279e98e3b796ad1a25a103cb8b98f2929ca4c",
        "target": "[RepairTarget] pyramidMKII:chkConsul:79\nCODE: balances[addr].owed[IDX].pending += (val/2) + (val/4)\nOPERATION: val [/] 2\nSSA: val_1 [/] 4 --> TMP_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x083279e98e3b796ad1a25a103cb8b98f2929ca4c",
        "target": "[RepairTarget] pyramidMKII:chkConsul:79\nCODE: balances[addr].owed[IDX].pending += (val/2) + (val/4)\nOPERATION: val [/] 4\nSSA: val_1 [/] 2 --> TMP_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x08f7e145df8b9a10a40674d7ed8396a3a9eae650",
        "target": "[RepairTarget] MajorityGameFactory:endGame:68\nCODE: deployedGames[targetGameIndex-1] = deployedGames[deployedGames.length-1]\nOPERATION: targetGameIndex [-] 1\nSSA: targetGameIndex_1 [-] 1 --> TMP_18\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x08f7e145df8b9a10a40674d7ed8396a3a9eae650",
        "target": "[RepairTarget] MajorityGameFactory:forceEndGame:86\nCODE: deployedGames[targetGameIndex-1] = deployedGames[deployedGames.length-1]\nOPERATION: deployedGames.length [-] 1\nSSA: targetGameIndex_1 [-] 1 --> TMP_31\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x08f7e145df8b9a10a40674d7ed8396a3a9eae650",
        "target": "[RepairTarget] MajorityGameFactory:forceEndGame:86\nCODE: deployedGames[targetGameIndex-1] = deployedGames[deployedGames.length-1]\nOPERATION: targetGameIndex [-] 1\nSSA: REF_26 [-] 1 --> TMP_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x08f7e145df8b9a10a40674d7ed8396a3a9eae650",
        "target": "[RepairTarget] MajorityGameFactory:endGame:68\nCODE: deployedGames[targetGameIndex-1] = deployedGames[deployedGames.length-1]\nOPERATION: deployedGames.length [-] 1\nSSA: REF_12 [-] 1 --> TMP_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x094c30a281ec611995c126fe53a0213e50171634",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x09f5f9413cefd61044db02940540155507bdcc55",
        "target": "[RepairTarget] TwoCoinsOneMoonGame:betBlueCoin:145\nCODE: marketCapBlue += betAmount\nOPERATION: marketCapBlue [+=] betAmount\nSSA: marketCapBlue_3 [+] betAmount_1 --> marketCapBlue_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0acccc67bd5952833863cd6de47489e9705e0e7b",
        "target": "[RepairTarget] SafeMath:mul:57\nCODE: require(a == 0 || c / a == b, \"Multiplication overflow\")\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0c3529a5870a1b68123ed1b974f9233d3d641234",
        "target": "[RepairTarget] CSC:constructor:63\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0c7992d46f6b01e6cfcd26e7e2c45157d250ba48",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0cadda17bb04bc3df33d04174861b3cc9048010b",
        "target": "[RepairTarget] ZEROxBTCHate:IHate0xBTC:41\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0d851a1a608f9f6c48f4fac4b4b8d53ac82176fa",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0df2ab9a290788737e38c36931299f6e1ae0b6f0",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0eaf699c3253ab6c9e205cfefa8812b622b57df1",
        "target": "[RepairTarget] StandardToken:transferFrom:72\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0f234c7992956af755c5cd9451a3f872314efa78",
        "target": "[RepairTarget] ROHH:_transfer:63\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0f979f5edf52a9309d0025b1c74824bf97ac400e",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x112918a54e3ada863cf694970da0756f1eecc68d",
        "target": "[RepairTarget] MultiSigWallet:replaceOwner:315\nCODE: ++)\nOPERATION: [++] +\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x114f1fc16db3615de301b39914625a79b912ea11",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1190b071b80a37953ab465a34896d96ef2ea4b9d",
        "target": "[RepairTarget] ToukenToken:lockupAccounts:222\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x12fd19dac0fab61bed5e0f09091b470c452d4d61",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x14a9771e559579c1821c692584e71ea4c2dd31b6",
        "target": "[RepairTarget] StandardToken:transferFrom:53\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x155e5e7c77274ca7a1c58236326518cc948daad6",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x17cd1bf1f528ac6dea7877b0d68bee5e6cb0fe27",
        "target": "[RepairTarget] SafeMath:add:14\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x189b9c623570b30e178289740b9cdb5589094424",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x189b9c623570b30e178289740b9cdb5589094424",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1a00f5999095c25cc4fd508dd9272f21ecc696b7",
        "target": "[RepairTarget] SNcoin_CountrySale:fallback:109\nCODE: uint tokens = (msg.value * 10**uint256(tokenContract.decimals())) / tokenPrice\nOPERATION: msg.value [*] 10**uint256(tokenContract.decimals())\nSSA: msg.value [*] TMP_50 --> TMP_51\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1a00f5999095c25cc4fd508dd9272f21ecc696b7",
        "target": "[RepairTarget] SNcoin_CountrySale:fallback:109\nCODE: uint tokens = (msg.value * 10**uint256(tokenContract.decimals())) / tokenPrice\nOPERATION: (msg.value * 10**uint256(tokenContract.decimals())) [/] tokenPrice\nSSA: TMP_51 [/] tokenPrice_4 --> TMP_52\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1a0a9a3b8064bf8c3e8cae6e6e595695067c7df2",
        "target": "[RepairTarget] Poge:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1a5a007812e21e27735d8a4b557176fdee9109ca",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1d2b42b3531fad9e544dd4288b788cacc898d555",
        "target": "[RepairTarget] DCCToken:create:104\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_3 [+] amount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1d6c267ede89c6a504db5f7bffdbf5cc72b272d0",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1d6c267ede89c6a504db5f7bffdbf5cc72b272d0",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1d6d1947428310dd91bec6fcc0d9ea48430c33ed",
        "target": "[RepairTarget] PSYT:burn:75\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1da73fc09ea07781482994036a0eecc7e6952dfb",
        "target": "[RepairTarget] SafeMath:mul:13\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1dac65c4d7585b5caa87af49faaff7af48642574",
        "target": "[RepairTarget] BPCC:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1e26b3d07e57f453cae30f7ddd2f945f5bf3ef33",
        "target": "[RepairTarget] ClearCoin:transferFrom:56\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1e363978b040e367df0b550d9e76341d5617c700",
        "target": "[RepairTarget] PhraseFlow:addPhrase:9\nCODE: count = count + 1\nOPERATION: count [+] 1\nSSA: count_1 [+] 1 --> TMP_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1e403f8ce554f2ffa6e5560d3db112dfc0ed24d2",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1f002ba292d85239fee400a04b21bb3aa4777461",
        "target": "[RepairTarget] FLTTToken:transferFrom:93\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1f39302c11340be011e08398798d800ff9d8837d",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1f39302c11340be011e08398798d800ff9d8837d",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1f988b4ee752826e834f478b7668725ae7ecf53c",
        "target": "[RepairTarget] SafeMath:mul:61\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1fa71916a1755181f2d82db0ee0630f28b7d2dc6",
        "target": "[RepairTarget] BankhadCoin:transferFrom:52\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x20e830d29b184c08a8facc73d4603e8a0d3a2bfa",
        "target": "[RepairTarget] SafeMath:add:50\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x20f5559b14b98a0f6f61b7dc9a75dcdfe6f61f86",
        "target": "[RepairTarget] SafeMath:add:6\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x21ab6c9fac80c59d401b37cb43f81ea9dde7fe34",
        "target": "[RepairTarget] BRC:transfer:123\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_6 [+] _amount_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x21ab6c9fac80c59d401b37cb43f81ea9dde7fe34",
        "target": "[RepairTarget] BRC:transferFrom:161\nCODE: balances[_to] += _amount\nOPERATION: balances[_to] [+=] _amount\nSSA: REF_15 [+] _amount_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x21f7816e12cc0b60a2353c8ebebc94cc44f1e53a",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x227e9dd77717a4f08da3c1cc9ffff383478b0f71",
        "target": "[RepairTarget] MoreGainCoin:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x22894bb90b638fbc83a5b9e559b60b2af37e8edc",
        "target": "[RepairTarget] BicasoBSOToken:_transfer:105\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_22 [+] _value_1 --> REF_22\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x23241851450b29a7f39d725987c780328b29c8e9",
        "target": "[RepairTarget] SafeMath:mul:35\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x23411b9b2152234971862f46da6735fd1a4f19bf",
        "target": "[RepairTarget] NMC:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x23f33b2640abbc8b51d13ae1974ad72ebc09545c",
        "target": "[RepairTarget] LamborghiniCoin:_transfer:33\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x23f33b2640abbc8b51d13ae1974ad72ebc09545c",
        "target": "[RepairTarget] LamborghiniCoin:_transfer:37\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x26bf81f017a7149576dc5d82323172fcae9fd469",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x26c0e6f69b18125f68ac55f439b1e10c2a2e5c03",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x270c27a8e5b19f04cbf079797bbf2aaa931a22c6",
        "target": "[RepairTarget] PET:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2758cf73421a81f09acdbffec2ebdc3125de0433",
        "target": "[RepairTarget] Whitelist:removeAddressesFromWhitelist:117\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x277f5aa60c277aafa22f393d85af1cd037836343",
        "target": "[RepairTarget] BestEther:fallback:75\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_7 [+] amount_1 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x28bd55152293595c65652f175c1e8fa95d10be93",
        "target": "[RepairTarget] NandoCoin:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x29536b7ca7029b5cddeb03c0451715615aca35ba",
        "target": "[RepairTarget] NewOSToken:transfer:56\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x29536b7ca7029b5cddeb03c0451715615aca35ba",
        "target": "[RepairTarget] NewOSToken:transferFrom:74\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_12 [-] _amount_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x295e093f47d63258a102ea4bfa69fde4beb4ab2e",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: uint256 z = x + y\nOPERATION: x [+] y\nSSA: x_1 [+] y_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x297306e0e35c125a67ddb8bf07987aa65e292afb",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2a287b4ebe1efb6b37ad1ed3141f0db1a1c51c99",
        "target": "[RepairTarget] STS:transferFrom:50\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2a86a179d09353ae0e8bf1e9fa41ef6c0447ccb3",
        "target": "[RepairTarget] SafeMath:add:50\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2b880297968c559273f540de7cf8e788298a9efe",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2b880297968c559273f540de7cf8e788298a9efe",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2bb8de3d3c9423164a6e1cb6ca1cf3019685b4c5",
        "target": "[RepairTarget] StandardToken:transferFrom:107\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2d0ea9f9591205a642eb01826ba4fa019eb0efc6",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2d2ac19de4a1105bfa284aab74aa1ab8f19e87ab",
        "target": "[RepairTarget] SafeMath:add:14\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x2fd1395473fd0437110985aa55dd4d6afa1cb295",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: uint c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x30b56211bff70233c3a656981ed638634472d621",
        "target": "[RepairTarget] StandardToken:transferFrom:131\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x30c6fe3ac0260a855c90cab79aa33e76091d4904",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x318264c879e4a3e615c259ef0cc7e4af67e608c6",
        "target": "[RepairTarget] TokenERC20:_transfer:56\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x31b075165298e6fe352fa7e2ed550d2d28701496",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3267cb4eaead5134ddb02d5356fa2699287d587f",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x32c432ba02c7166133db50bacb3453de14f9824d",
        "target": "[RepairTarget] SafeMath:sub:137\nCODE: c = a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_38\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x32ce7fd95f27528942d13b20c24965acbfacf8ac",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x331655585e8893961f8e8e427f5f8dedf6e7f0af",
        "target": "[RepairTarget] SDT_token:SDTToken:23\nCODE: totalSupply = initialSupply * 10 ** uint256(decimals)\nOPERATION: initialSupply [*] 10 ** uint256(decimals)\nSSA: initialSupply_1 [*] TMP_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x331655585e8893961f8e8e427f5f8dedf6e7f0af",
        "target": "[RepairTarget] SDT_token:_transfer:33\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x331655585e8893961f8e8e427f5f8dedf6e7f0af",
        "target": "[RepairTarget] SDT_token:_transfer:37\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x33ec7788795360fa3d2461606e9fe2fb95b942e9",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x34f7560337e832066972caed80c844b01548c405",
        "target": "[RepairTarget] Sale:fallback:42\nCODE: ethersum = (msg.value)-ethersum8\nOPERATION: (msg.value) [-] ethersum8\nSSA: msg.value [-] ethersum8_1 --> TMP_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3558cf08f9f6b91918a015acc2959454208b35a8",
        "target": "[RepairTarget] SafeMath:add:7\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x35e8312dfa25f478d85d88c10fde88824cacbced",
        "target": "[RepairTarget] SafeMath:mul:13\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x362a383ba0b11ddce652be04fbaf358014219be9",
        "target": "[RepairTarget] Token:_transferFrom:54\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_8 [-] _amount_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x371308b6a7b6f80df798589c48dea369839951dd",
        "target": "[RepairTarget] Snow:sqrt:722\nCODE: uint z = (x + 1) / 2\nOPERATION: x [+] 1\nSSA: x_1 [+] 1 --> TMP_212\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x371308b6a7b6f80df798589c48dea369839951dd",
        "target": "[RepairTarget] Snow:sqrt:722\nCODE: uint z = (x + 1) / 2\nOPERATION: (x + 1) [/] 2\nSSA: TMP_212 [/] 2 --> TMP_213\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x380701db3d4a6f20de83ed66192317958ee3696d",
        "target": "[RepairTarget] StandardToken:transferFrom:62\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x39aca4347248873842ddfb91948aaac3268682bd",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x39fbdd3068ea0b89f65018679d4b7f44e1f99a7e",
        "target": "[RepairTarget] WiredToken:lockupAccounts:183\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3a133b45931c2a954af8a2fe7d0d2d5c75b00be5",
        "target": "[RepairTarget] TokenDemo:transferFrom:49\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3a4b527dcd618ccea50adb32b3369117e5442a2f",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3ab4a815876d035f79554fd433ec937edaa3081c",
        "target": "[RepairTarget] ABEToken:_transfer:53\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3b82b6c85325a0102c8467e3c5407432cef59285",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3c535ee4d0bdfb3dd338fe9b0e005eb2d14fab63",
        "target": "[RepairTarget] Nonce:increment:8\nCODE: value = ++value\nOPERATION: [++] value\nSSA: value_1 [+] 1 --> value_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3c5607fd346c1e4a7c3c0da2e4e888bc02be0e85",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3cc0e3a8d339cc4e58fb6cf11853824b302762cc",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3d8348e1f04b8840a1b93c1a4a326916818d67cf",
        "target": "[RepairTarget] ToGoConcert:_transfer:79\nCODE: require(balanceOf[_to] + _value > balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_2 [+] _value_1 --> TMP_7\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x3db616e27576f1e6aa2a58a7d3b5904f27716151",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3dc730f0eba8e630a016084e22c0a1318f83ffa5",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3dd0808bde18ca38645de3f38ac4bec0741041f4",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3dd88933a5fe25b32f881da51eaef8bffd3ab2d8",
        "target": "[RepairTarget] SafeMath:mul:57\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3e7168dd709e8f22a88fb9cd8bbbeacd1040433c",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3ececb74c8bd2b81bf15b70a535d486f65167ecb",
        "target": "[RepairTarget] StandardToken:transferFrom:109\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3f469ae6f30896a5cc4ca1cf27de72f647c4057a",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x41f8d4d01ba8505111794e3fa3deb3ed8cbaa8ee",
        "target": "[RepairTarget] TokenERC20:_transfer:94\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x425fdfc1c7d7220ad065c7d5a4909db2169b6c58",
        "target": "[RepairTarget] IGFC:transferFrom:51\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_10 [-] _value_1 --> REF_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x42d8bd9f2952bf296f1d7458de968043184e38ce",
        "target": "[RepairTarget] ASIABITSToken:fallback:115\nCODE: totalSupply += amount\nOPERATION: totalSupply [+=] amount\nSSA: totalSupply_3 [+] amount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x42d8f8e19f73707397b6e9eb7dd022d3c0ae736c",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x430241368c1d293fda21dba8bb7af32007c59109",
        "target": "[RepairTarget] TrillionToken:transfer:44\nCODE: balances[_to] + _value < balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_5 [+] _value_1 --> TMP_2\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x432bf73443909c33b545efed536a5246c9a722ca",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x43efc486d1c7c5cb0193e409a73aa33786f5197c",
        "target": "[RepairTarget] Tubigo:enableWhitelist:117\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x46071182324b7f2aadfd5a846d5837ce4c617379",
        "target": "[RepairTarget] SafeMath:safeSub:11\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x46bfa7aeca8ab878fa27a6ff099ec31b204362a7",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x47d987ab16feb39d2f21aa8ec3659397b5a92db6",
        "target": "[RepairTarget] RacingToken:_transfer:50\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x48027fb46cfd8e8fb8067ca158bf6fdbc6ba427f",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x48b9440104e03a013043426b3ce0c19d1db09253",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4902c062f1384654bd075b719c6a26a83ef7aaf0",
        "target": "[RepairTarget] TokenERC20:_transfer:107\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x49c67ae22c334d0123dd6dbdc44f5302e130a88b",
        "target": "[RepairTarget] Lupecoin:burn:84\nCODE: totalSupply = totalSupply - _value\nOPERATION: totalSupply [-] _value\nSSA: totalSupply_2 [-] _value_1 --> TMP_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x49fb8ab3fed4003c8c5805496cbc3a19760e67b1",
        "target": "[RepairTarget] NewFinanceToken:transfer:21\nCODE: balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x49fb8ab3fed4003c8c5805496cbc3a19760e67b1",
        "target": "[RepairTarget] NewFinanceToken:transferFrom:31\nCODE: balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_8 [+] _value_1 --> TMP_8\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x4ab2387bcb7a10cd2291765ab6e01638e93996e6",
        "target": "[RepairTarget] TycoonPresale:Chou:72\nCODE: last[msg.sender][0] += seChou\nOPERATION: last[msg.sender][0] [+=] seChou\nSSA: REF_71 [+] seChou_1 --> REF_71\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4bfb837d3a9311a3681afaa921b6813def1b21cb",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3",
        "target": "[RepairTarget] Aeron:fallback:72\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_7 [+] amount_1 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4c6de41f52378c32e74dad3e8dec48650eeb830f",
        "target": "[RepairTarget] SafeMath:add:50\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4c9164b2a1e3f34afd063f054830aa2a75dfa2d2",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4e0e009fc4869c620f8fecd405e2d4e55cfef8bd",
        "target": "[RepairTarget] AYA:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x4e23b6801cbcfe3bd900502d0cc53ad357a0da36",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4e8755aaba3605d7f7b98b4a71619bdbd2710703",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4efd3bf84f40eda370e52df162eccc394cfc8834",
        "target": "[RepairTarget] Zhoan:transferFrom:90\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_17 [+] value_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5129bdff6b065ce57cc7e7349ba681a0ac1d00cd",
        "target": "[RepairTarget] BNCXToken:_transfer:63\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x512b4e460fc59123e334c9c74344c4e94dc6389d",
        "target": "[RepairTarget] StandardToken:transferFrom:109\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x514e5da2903a5db9d05e9618816b15d22d29c26a",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: c = _a * _b\nOPERATION: _a [*] _b\nSSA: _a_1 [*] _b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x521b5ed37facc0d60b271fbaccca0acb010b374c",
        "target": "[RepairTarget] LightenToken:burn:75\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x52447efb7174b27ec679b9e3201cb47a7eb63b19",
        "target": "[RepairTarget] TPC:_transfer:63\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x53721db2c45217762969837e4f75fff0aa209052",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x53fbc2649cc804ec180c0781b5c0cce43082679b",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x54794cfdbac9b9e58eb737643d9f0269ab5c8248",
        "target": "[RepairTarget] SimpleERC20Token:transfer:25\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x54794cfdbac9b9e58eb737643d9f0269ab5c8248",
        "target": "[RepairTarget] SimpleERC20Token:transferFrom:52\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x548070e370a9a6e31be1dd629a0d147be3f2175e",
        "target": "[RepairTarget] NEWTOKEN:_transfer:59\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x54f234b814a9114436e5a79e59b2a85a51a47983",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x554115d5f938f6755aa50b9d91b8dc659334515c",
        "target": "[RepairTarget] StandardToken:transferFrom:67\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x55c182de8e3b6c19d58dde95d70c38e25394b186",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x56795b863fe2a3e249efae0f5b2828e960c43ca7",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x56a9eff414d19b458d2c1543c7a48dadbddbc53d",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x57f3f9c43081660e0130b3fdb54aa805d91fa00e",
        "target": "[RepairTarget] StandardToken:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5824d62f4f3c875c906f4e16d488bed05a87a2ea",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x590704e1bb7ca3b096852a60d6be2f2de16df691",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5947b9bd0bb033529e1c6a4576ada6e3268ff89c",
        "target": "[RepairTarget] BicasoBIOToken:_transfer:105\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_22 [+] _value_1 --> REF_22\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x59670e7f172eafea08f44a308158c65e314a0df9",
        "target": "[RepairTarget] PumpAndDump:buyCoin:101\nCODE: coins[coinId].marketValue += amount\nOPERATION: coins[coinId].marketValue [+=] amount\nSSA: REF_48 [+] amount_1 --> REF_48\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x599ead01cd4989c8fae26c1adcdc6a5cf5c763f8",
        "target": "[RepairTarget] SafeMath:mul:12\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5a086708501251d2c948d767a88379f0b8d8c300",
        "target": "[RepairTarget] WeduToken:unlockBalance:115\nCODE: balanceValue[_who].unlocked += _value\nOPERATION: balanceValue[_who].unlocked [+=] _value\nSSA: REF_33 [+] _value_1 --> REF_33\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5a086708501251d2c948d767a88379f0b8d8c300",
        "target": "[RepairTarget] WeduToken:lockBalance:97\nCODE: balanceValue[_who].unlocked -= _value\nOPERATION: balanceValue[_who].unlocked [-=] _value\nSSA: REF_17 [-] _value_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5a086708501251d2c948d767a88379f0b8d8c300",
        "target": "[RepairTarget] WeduToken:_transfer:144\nCODE: balanceValue[_to].unlocked += _value\nOPERATION: balanceValue[_to].unlocked [+=] _value\nSSA: REF_53 [+] _value_1 --> REF_53\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5b4a3143d544faae3781f7ea71dd7f27682cb5f6",
        "target": "[RepairTarget] SafeMath:mul:71\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5b6733298538a0b74c8603963ad14ce48f8c30b1",
        "target": "[RepairTarget] StandardToken:transferFrom:80\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5bcff9bf8cdaa9df4fec7fb1bd9a51cf99ac57ac",
        "target": "[RepairTarget] Eps:bytesToAddr:9\nCODE: uint i = b.length-1\nOPERATION: b.length [-] 1\nSSA: REF_0 [-] 1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5bcff9bf8cdaa9df4fec7fb1bd9a51cf99ac57ac",
        "target": "[RepairTarget] Eps:bytesToAddr:9\nCODE: i--\nOPERATION: [--] i\nSSA: i_2 [-] 1 --> i_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5bd8a1298c2266f75a304581cc0d1e81f3f2a4fc",
        "target": "[RepairTarget] SUPERBRAAI:_transfer:93\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5c2f60d9c1565c569488111b6c212bff09223f50",
        "target": "[RepairTarget] BlackSeaCoin:_transfer:23\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5c2f60d9c1565c569488111b6c212bff09223f50",
        "target": "[RepairTarget] BlackSeaCoin:_transfer:27\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5d001d55972ddf8647030c010972b08dc6bb9bdc",
        "target": "[RepairTarget] MoreGainCoin:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5d7b770add0df65e15c63045f9bdde4bb35c63ff",
        "target": "[RepairTarget] SafeMath:safeSub:11\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5ed817b8d8beecaff347d9626714f4aa67524bf0",
        "target": "[RepairTarget] WiredToken:lockupAccounts:194\nCODE: j++\nOPERATION: [++] j\nSSA: j_2 [+] 1 --> j_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5f6672baf2872cbe12009ed77252589a7ca08c68",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5f6e04691d15832f368a81732d0c8c2938a92232",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5fb7340da1ff2760bcc78c59b4f3691d5d67dde1",
        "target": "[RepairTarget] PrettyGirl:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x5ff3c3c6b0b314f253d25d558c0507f33a8cac05",
        "target": "[RepairTarget] FFG:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x61c0e30b2c8c93cd0970c1d64029037bfffa5954",
        "target": "[RepairTarget] BCBCOIN:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x6302e8fce75e2a6aba6e558b852ec956afb98c7a",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x631fc019888ccb5618ff6d8b95fc06d339fc7755",
        "target": "[RepairTarget] RegularToken:transfer:45\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x631fc019888ccb5618ff6d8b95fc06d339fc7755",
        "target": "[RepairTarget] UnboundedRegularToken:transferFrom:100\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_44 [-] _value_1 --> REF_44\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6374ea91693f1eccb4f7705a1cbad994c0b8f874",
        "target": "[RepairTarget] SafeMath:mul:115\nCODE: int256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x63a6b37f559522292bf5ca1a50cbd491ac153949",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x64035a514958d418593be0df5cdcffa983f8d183",
        "target": "[RepairTarget] SafeMath:mul:67\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6422665474ff39b0cfce217587123521c56cf33d",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6468890abb29d2dcf9c81e5d3377a61ff5de63e0",
        "target": "[RepairTarget] EOCHToken:frozen:159\nCODE: require(count == balanceMap[targetAddress] + frozenOf[targetAddress])\nOPERATION: balanceMap[targetAddress] [+] frozenOf[targetAddress]\nSSA: REF_61 [+] REF_62 --> TMP_78\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x64bf40a1265d7d39d2a025b04a8d7396efc3263a",
        "target": "[RepairTarget] THATCoin:transferFrom:55\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x64e643abd9e1235a7fa76820aa3ca61a80c0161c",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x658e9fd4c4712be19d45f6cf3d75962fac6ff2ab",
        "target": "[RepairTarget] ZenAD:enableWhitelist:108\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x658e9fd4c4712be19d45f6cf3d75962fac6ff2ab",
        "target": "[RepairTarget] ZenAD:disableWhitelist:114\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x670343443aace59a5739da1c8330bb9fa7836d9d",
        "target": "[RepairTarget] EtherealTarot:constructor:25\nCODE: card++\nOPERATION: [++] card\nSSA: card_2 [+] 1 --> card_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x67257572dc786eea23e2050fe30c2d182ff52926",
        "target": "[RepairTarget] Share:transferHolds:161\nCODE: fullfilled[to] = watermark - toBonus / holds[to]\nOPERATION: toBonus [/] holds[to]\nSSA: toBonus_1 [/] REF_18 --> TMP_37\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x67257572dc786eea23e2050fe30c2d182ff52926",
        "target": "[RepairTarget] Share:transferHolds:161\nCODE: fullfilled[to] = watermark - toBonus / holds[to]\nOPERATION: watermark [-] toBonus / holds[to]\nSSA: watermark_7 [-] TMP_37 --> TMP_38\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x673f2f89840b93d2b2b0100f9e35e5ce371faf54",
        "target": "[RepairTarget] EthereumCash:_transfer:39\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x673f2f89840b93d2b2b0100f9e35e5ce371faf54",
        "target": "[RepairTarget] EthereumCash:_transfer:42\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x673f8248b2da1c368a174cc191f7368163d9d54b",
        "target": "[RepairTarget] SafeMath:mul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x69f64d814aa278825997e71738120392993973a4",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6ac93e04f24b57e7544bce967aedd0f7df50ea0d",
        "target": "[RepairTarget] Win20ETH:buyTicket:114\nCODE: games[block.number+blockOffset].pays[msg.sender] = false\nOPERATION: block.number [+] blockOffset\nSSA: block.number [+] blockOffset_3 --> TMP_46\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6ac93e04f24b57e7544bce967aedd0f7df50ea0d",
        "target": "[RepairTarget] Win20ETH:buyTicketWithRef:86\nCODE: games[block.number+blockOffset].pays[msg.sender] = false\nOPERATION: block.number [+] blockOffset\nSSA: block.number [+] blockOffset_2 --> TMP_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6b414584f7dd3750a0d61b4b8692242a7debee06",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6ba9908db7340f82e75ac42468b8172dbf37c1d6",
        "target": "[RepairTarget] hodlEthereum:hodl:25\nCODE: hodlers[msg.sender] += msg.value\nOPERATION: hodlers[msg.sender] [+=] msg.value\nSSA: REF_0 [+] msg.value --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6ced978feaa31ad4c2acdd5eae4e034f2ac3919b",
        "target": "[RepairTarget] SlowMoon:sqrt:709\nCODE: uint z = (x + 1) / 2\nOPERATION: x [+] 1\nSSA: x_1 [+] 1 --> TMP_172\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6ced978feaa31ad4c2acdd5eae4e034f2ac3919b",
        "target": "[RepairTarget] SlowMoon:sqrt:709\nCODE: uint z = (x + 1) / 2\nOPERATION: (x + 1) [/] 2\nSSA: TMP_172 [/] 2 --> TMP_173\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6ee0e499cca1afcef3492f701a07630e4afd3458",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6f38def7f716c6824844568c768392465cab8644",
        "target": "[RepairTarget] SafeMath:safeSub:11\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x6f721567db8894690b12e6d16071261341401023",
        "target": "[RepairTarget] SafeMath:safeSub:11\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x707784ed2b464474f8fb763c058b33fcf8626db5",
        "target": "[RepairTarget] MainBonus:GetPlayerDynamicRatio:1159\nCODE: idx++\nOPERATION: [++] idx\nSSA: idx_2 [+] 1 --> idx_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x70ab487ec48b4b9571d346348da0f10737d48a54",
        "target": "[RepairTarget] PredictionHandshake:uninitTestDrive:449\nCODE: m.open[maker][side].odds[odds] -= value\nOPERATION: m.open[maker][side].odds[odds] [-=] value\nSSA: REF_76 [-] value_1 --> REF_76\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x70ab487ec48b4b9571d346348da0f10737d48a54",
        "target": "[RepairTarget] PredictionHandshake:uninitTestDrive:451\nCODE: m.totalOpenStake -= value\nOPERATION: m.totalOpenStake [-=] value\nSSA: REF_77 [-] value_1 --> REF_77\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x70ab487ec48b4b9571d346348da0f10737d48a54",
        "target": "[RepairTarget] PredictionHandshake:uninitTestDrive:455\nCODE: require(total + value >= total)\nOPERATION: total [+] value\nSSA: total_2 [+] value_1 --> TMP_31\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x71880d9f448c995ec5a7c9d68f2b0e256ef510d2",
        "target": "[RepairTarget] ValueTokenBase:_transfer:74\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x729b59c57f3aadf114daeec77d19168b1b1c6b11",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x73041e1141287ac342f69e57dc54793815267f6c",
        "target": "[RepairTarget] IncubatorCenterCoin:_transfer:115\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x73bd0cba93bbb6bc332ad47ea0ae31ae05e44cb0",
        "target": "[RepairTarget] HyperChipToken:fallback:61\nCODE: uint256 amount = msg.value * unitsOneEthCanBuy\nOPERATION: msg.value [*] unitsOneEthCanBuy\nSSA: msg.value [*] unitsOneEthCanBuy_1 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x73bd0cba93bbb6bc332ad47ea0ae31ae05e44cb0",
        "target": "[RepairTarget] HyperChipToken:Constructor:52\nCODE: totalSupply = initialSupply * 10 ** uint256(decimals)\nOPERATION: initialSupply [*] 10 ** uint256(decimals)\nSSA: initialSupply_1 [*] TMP_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x73bd0cba93bbb6bc332ad47ea0ae31ae05e44cb0",
        "target": "[RepairTarget] HyperChipToken:_transfer:87\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_13 [-] _value_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x73d7e1dcfac94282dfda16c8f369b488580f7408",
        "target": "[RepairTarget] SafeMath:add:6\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x748de2872ef99339a0f872af0e5b5eb16ae0b4cb",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x75718d0d776cbc19693bc50c6b819ce9b89dc0d0",
        "target": "[RepairTarget] AEL:AEL:89\nCODE: presale = now + 21 days\nOPERATION: now [+] 21 days\nSSA: now [+] 1814400 --> TMP_3\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0x76ba8b2cffa8d0bfe1e3034bbf98bdc11840c368",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x78dbd5be3e74567a97c5db15b3eb0004eb28f5b4",
        "target": "[RepairTarget] SuperTicketCoin:_transfer:67\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x79181b28976d691181776016b3d6a7d3d08f70e8",
        "target": "[RepairTarget] TokenERC20:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x79181b28976d691181776016b3d6a7d3d08f70e8",
        "target": "[RepairTarget] TokenERC20:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x79c67b5ab30eb28ffa2fbc104324bad152368898",
        "target": "[RepairTarget] StandardToken:transferFrom:39\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7bd22227ee36174f0fa07cc0e9d412ff658b80ca",
        "target": "[RepairTarget] HoltCoin:_transfer:29\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7bd22227ee36174f0fa07cc0e9d412ff658b80ca",
        "target": "[RepairTarget] HoltCoin:_transfer:33\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7bd7e0bbed7d672eede693445a0fb94e11d879fa",
        "target": "[RepairTarget] SafeGift:promo:111\nCODE: balances[_recipients[i]] += 12\nOPERATION: balances[_recipients[i]] [+=] 12\nSSA: REF_13 [+] 12 --> REF_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7bd7e0bbed7d672eede693445a0fb94e11d879fa",
        "target": "[RepairTarget] SafeGift:promo:107\nCODE: balances[owner] -= 12 * _recipients.length\nOPERATION: balances[owner] [-=] 12 * _recipients.length\nSSA: REF_9 [-] TMP_19 --> REF_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7bd7e0bbed7d672eede693445a0fb94e11d879fa",
        "target": "[RepairTarget] SafeGift:promo:107\nCODE: balances[owner] -= 12 * _recipients.length\nOPERATION: 12 [*] _recipients.length\nSSA: 12 [*] REF_10 --> TMP_19\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7c9c292f8f5c201970a677ca7af79e57d34a8799",
        "target": "[RepairTarget] SafeMath:div:29\nCODE: uint256 c = a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7ce6175dd37261386cb35728337546c19df44704",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7d29a64504629172a429e64183d6673b9dacbfce",
        "target": "[RepairTarget] SafeMath:safeAdd:6\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7d648eb91deec2e88f6437789793221c1b6557d5",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: c = _a * _b\nOPERATION: _a [*] _b\nSSA: _a_1 [*] _b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7dacae4b14120e2af896149ce653edd89b4ff9ee",
        "target": "[RepairTarget] GNTTokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x7e9669f112051b489e9de6e621d114b9d708744d",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7ebb8e2e72891d08c495433075c64c223623e809",
        "target": "[RepairTarget] Athleticoin:mintToken:59\nCODE: totalSupply += mintedAmount\nOPERATION: totalSupply [+=] mintedAmount\nSSA: totalSupply_3 [+] mintedAmount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7f6e0d152df1a237450eeffa4f10623ba21a4df0",
        "target": "[RepairTarget] Storage:uploadData:19\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x80248b05a810f685b12c78e51984f808293e57d3",
        "target": "[RepairTarget] FixedSupplyToken:transfer:83\nCODE: balances[msg.sender] -= _amount\nOPERATION: balances[msg.sender] [-=] _amount\nSSA: REF_5 [-] _amount_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x80248b05a810f685b12c78e51984f808293e57d3",
        "target": "[RepairTarget] FixedSupplyToken:transferFrom:108\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x804e58eb34446a381bafcb5d1840035946865823",
        "target": "[RepairTarget] SkyeCryptoBTC:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x819bb9964b6ebf52361f1ae42cf4831b921510f9",
        "target": "[RepairTarget] V00_Marketplace:_createListing:345\nCODE: mit ListingCreated(_seller, listings.length - 1, _ipfsHash);\nOPERATION: istings.length  [-] ,\nSSA: REF_8 [-] 1 --> TMP_34\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x821285d692b58517eb0aae7332736cc124ea155e",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8218a33eb15901ce71b3b8123e58b7e312ce638a",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x82c46169b9f390ddfef57832a1d65f60e2878e22",
        "target": "[RepairTarget] FLEBToken:transferFrom:129\nCODE:    \r\r\n     allowed[_from][msg.sender] \nOPERATION: ] = balances[_t [-] + _val\nSSA: REF_12 [+] _value_1 --> TMP_18\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x83269a64d7ba689dea25af8afaa5ddd8a8ad29fe",
        "target": "[RepairTarget] ICG:burn:75\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x837e9d70de24e6ae273a6c691686c6c431b78c6b",
        "target": "[RepairTarget] SafeMath:mul:57\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x838b653d5877f92d0d9ecaea0073b479513b3326",
        "target": "[RepairTarget] COINEIUM:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x83bf7c56cc8175ba8f3554b1aa12461c760b8b94",
        "target": "[RepairTarget] TokenERC20:_transfer:54\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x85924fdcccb75c47c3d2155ae0a519018164cac0",
        "target": "[RepairTarget] StandardToken:transferFrom:49\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8672a7a41fb52011f09d2f73dca15d0ca4e13475",
        "target": "[RepairTarget] Zandar:createGame:52\nCODE: uint claimingPhaseEnd = claimingPhaseStart + _claimingPhaseDays * 1 days\nOPERATION: claimingPhaseStart [+] _claimingPhaseDays * 1 days\nSSA: claimingPhaseStart_1 [+] TMP_4 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8672a7a41fb52011f09d2f73dca15d0ca4e13475",
        "target": "[RepairTarget] Zandar:createGame:52\nCODE: uint claimingPhaseEnd = claimingPhaseStart + _claimingPhaseDays * 1 days\nOPERATION: _claimingPhaseDays [*] 1 days\nSSA: _claimingPhaseDays_1 [*] 86400 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8672a7a41fb52011f09d2f73dca15d0ca4e13475",
        "target": "[RepairTarget] Zandar:createGame:50\nCODE: uint bettingPhaseEnd = _bettingStartUnixTime + _bettingPhaseDays * 1 days\nOPERATION: _bettingStartUnixTime [+] _bettingPhaseDays * 1 days\nSSA: _bettingStartUnixTime_1 [+] TMP_0 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8672a7a41fb52011f09d2f73dca15d0ca4e13475",
        "target": "[RepairTarget] Zandar:createGame:51\nCODE: uint claimingPhaseStart = bettingPhaseEnd + _waitingPhaseDays * 1 days\nOPERATION: bettingPhaseEnd [+] _waitingPhaseDays * 1 days\nSSA: bettingPhaseEnd_1 [+] TMP_2 --> TMP_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8672a7a41fb52011f09d2f73dca15d0ca4e13475",
        "target": "[RepairTarget] Zandar:createGame:51\nCODE: uint claimingPhaseStart = bettingPhaseEnd + _waitingPhaseDays * 1 days\nOPERATION: _waitingPhaseDays [*] 1 days\nSSA: _waitingPhaseDays_1 [*] 86400 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8672a7a41fb52011f09d2f73dca15d0ca4e13475",
        "target": "[RepairTarget] Zandar:createGame:50\nCODE: uint bettingPhaseEnd = _bettingStartUnixTime + _bettingPhaseDays * 1 days\nOPERATION: _bettingPhaseDays [*] 1 days\nSSA: _bettingPhaseDays_1 [*] 86400 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x86f95775d657033ffa35d96171d2e40a605c8ac0",
        "target": "[RepairTarget] Vlogchain:enableWhitelist:117\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x87b3a2c40e63ef9410da6c985a1501fe4972c4e4",
        "target": "[RepairTarget] SPGForEver:transfer:93\nCODE: require(balanceOf[_to] + _value >= balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_3 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x87fe4ee2ed12c2582daf0c3829792004ffd1ff78",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x882447790ea65cb00530a02e835f1f4b6d9a4430",
        "target": "[RepairTarget] SafeMath:mul:12\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x89029d1d633c59c914976bb109a57b4c31b3ee1a",
        "target": "[RepairTarget] MoonTokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x89c33ed4c7f780691444c172eae9e6f1803be2c7",
        "target": "[RepairTarget] BRAAI:_transfer:81\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8a0fdede6bdd9ff9397a394636d145085a8bda0c",
        "target": "[RepairTarget] StandardToken:formatDecimals:21\nCODE: return _value * 10 ** decimals\nOPERATION: _value [*] 10 ** decimals\nSSA: _value_1 [*] TMP_0 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8a0fdede6bdd9ff9397a394636d145085a8bda0c",
        "target": "[RepairTarget] StandardToken:transferFrom:40\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_2 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8b2717b7ea12e00a3419eb3a0a4e1dd3ba75007f",
        "target": "[RepairTarget] StandardToken:transferFrom:109\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8b5e31d05c3df25f809f2f82af098e8396ad82c8",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8bd06850822e6e7bb8bb36bba02745b204611cd6",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8c79b780fa39e183c9ea25f70d1351161f86594e",
        "target": "[RepairTarget] shrimpyramid:tokensToEthereum_:676\nCODE: uint256 tokens_ = (_tokens + 1e18)\nOPERATION: _tokens [+] 1e18\nSSA: _tokens_1 [+] 1000000000000000000 --> TMP_141\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8cb42fb3d9258c8b9840942aff3269aeac350b9f",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x8cd480260a47f04589670a313d27a15b321ad266",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8e3cf7b7d610541ae6e77712daac888b5c727dc7",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8e9c2efced3166d49341bad4e690b0f4a5671359",
        "target": "[RepairTarget] YouLongToken:transfer:107\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_6 [+] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8e9c2efced3166d49341bad4e690b0f4a5671359",
        "target": "[RepairTarget] YouLongToken:transferFrom:131\nCODE: allowed[_from][msg.sender] -= _amount\nOPERATION: allowed[_from][msg.sender] [-=] _amount\nSSA: REF_14 [-] _amount_1 --> REF_14\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8f7f252c4499e5baa25d59967d7abad65e44115a",
        "target": "[RepairTarget] Whitelist:addAddressesToWhitelist:115\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8f7f252c4499e5baa25d59967d7abad65e44115a",
        "target": "[RepairTarget] Whitelist:removeAddressesFromWhitelist:143\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9073d050fa90fe910b74e2b1eb7efe5a016eaa05",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x90871d626373b1c473e5d52dc45cfd99a3fa12da",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x91d7e5895f7a635ba8bdce9e2be544e5e527135f",
        "target": "[RepairTarget] Crowdsale:fallback:46\nCODE: tokenReward.transfer(msg.sender, amount  * 6 /  price)\nOPERATION: amount [*] 6\nSSA: amount_1 [*] 6 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x91d7e5895f7a635ba8bdce9e2be544e5e527135f",
        "target": "[RepairTarget] Crowdsale:fallback:45\nCODE: amountRemaining+= amount\nOPERATION: amountRemaining [+=] amount\nSSA: amountRemaining_1 [+] amount_1 --> amountRemaining_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x91d7e5895f7a635ba8bdce9e2be544e5e527135f",
        "target": "[RepairTarget] Crowdsale:fallback:46\nCODE: tokenReward.transfer(msg.sender, amount  * 6 /  price)\nOPERATION: amount  * 6 [/] price\nSSA: TMP_4 [/] price_2 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9222740a4351abda9d83f3c7165c556e802f920e",
        "target": "[RepairTarget] SafeMath:safeMul:41\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x922c591cc3a51253953d7006a6f1dc7413670697",
        "target": "[RepairTarget] RecuringInternetPayer:payJosh:21\nCODE: dai.transfer(josh, totalPayout - amountPaid)\nOPERATION: totalPayout [-] amountPaid\nSSA: totalPayout_1 [-] amountPaid_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x92972bbc89708127016046c150e3a223431a31e0",
        "target": "[RepairTarget] GMQToken:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x92f10796da1f6fab1544cf64682cb8c15c71d5e7",
        "target": "[RepairTarget] CLVRToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x92f10796da1f6fab1544cf64682cb8c15c71d5e7",
        "target": "[RepairTarget] CLVRToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9465a32618a9172b3c14d82cecdca788de1ef878",
        "target": "[RepairTarget] SafeMath:add:173\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9482a18ed523b1a2f097b480d38852dfff83e0b9",
        "target": "[RepairTarget] Wrapped_Ether:transferFrom:914\nCODE: allowed[_from][msg.sender] = allowed[_from][msg.sender] - _amount\nOPERATION: allowed[_from][msg.sender] [-] _amount\nSSA: REF_380 [-] _amount_1 --> TMP_212\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x95000da1ff0a34a67c50f468fbe3b8ea41ecd02b",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x974e34a24cf2a9aed2386f41dea9117d309f9478",
        "target": "[RepairTarget] TokenATEC:burnFrom:73\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x974e34a24cf2a9aed2386f41dea9117d309f9478",
        "target": "[RepairTarget] TokenATEC:burn:63\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x974e34a24cf2a9aed2386f41dea9117d309f9478",
        "target": "[RepairTarget] TokenATEC:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x974e34a24cf2a9aed2386f41dea9117d309f9478",
        "target": "[RepairTarget] TokenATEC:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x982e709df5ea11bd48e7b1e763ef045dd973447b",
        "target": "[RepairTarget] ZIL:fallback:71\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_7 [+] amount_1 --> REF_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x98a0e7bcf41a754ca6ebbd85b74ee55bfed59ade",
        "target": "[RepairTarget] SafeMath:sub:27\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x998a87daea2bbcefbacb9fc80e36f0e90501ea05",
        "target": "[RepairTarget] TNCN:mintToken:68\nCODE: totalSupply += mintedAmount\nOPERATION: totalSupply [+=] mintedAmount\nSSA: totalSupply_3 [+] mintedAmount_1 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x998a87daea2bbcefbacb9fc80e36f0e90501ea05",
        "target": "[RepairTarget] TNCN:sell:98\nCODE: revenue = amount * sellPrice\nOPERATION: amount [*] sellPrice\nSSA: amount_1 [*] sellPrice_4 --> TMP_37\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x99e0326245460cc89c72fd8ef5d35bc446725cb6",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9a2878efd2198bb3757d78ce46fe3f2bb8d9ae8d",
        "target": "[RepairTarget] StandardToken:transfer:17\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9a2878efd2198bb3757d78ce46fe3f2bb8d9ae8d",
        "target": "[RepairTarget] ZarFundsToken:fallback:77\nCODE: uint256 amount = msg.value * unitsOneEthCanBuy\nOPERATION: msg.value [*] unitsOneEthCanBuy\nSSA: msg.value [*] unitsOneEthCanBuy_2 --> TMP_23\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9a2878efd2198bb3757d78ce46fe3f2bb8d9ae8d",
        "target": "[RepairTarget] StandardToken:transferFrom:27\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9a84e309561afdb848b638c6404212c1307d2db7",
        "target": "[RepairTarget] StandardToken:transferFrom:66\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9b481067ef9773d52efd0fb5b665a5dc0c8e1a68",
        "target": "[RepairTarget] ERCDDAToken:constructor:67\nCODE: totalSupply = initialSupply * 10 ** uint256(decimals)\nOPERATION: initialSupply [*] 10 ** uint256(decimals)\nSSA: initialSupply_1 [*] TMP_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9b52105c3325dcc0e8c554ee4c4890141fdbb068",
        "target": "[RepairTarget] KLSCToken:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9bc0b36cdedadb9ae906f53bdea6debe20b81b8e",
        "target": "[RepairTarget] StandardToken:transfer:21\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9bc0b36cdedadb9ae906f53bdea6debe20b81b8e",
        "target": "[RepairTarget] StandardToken:transferFrom:32\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9bebf30ebb0ba04fa2fd089acf30a5d92d59f1da",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9cab974a2e335983c1e6e834d5712b04eba0b870",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9d934a83fd602872d156c5adcf191bf65b5cd632",
        "target": "[RepairTarget] TwoPhases:fallback:312\nCODE: tokensCount += weiLeft * ethUsdRate / tokenSecondPeriodPrice\nOPERATION: weiLeft [*] ethUsdRate\nSSA: weiLeft_1 [*] ethUsdRate_1 --> TMP_129\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9d934a83fd602872d156c5adcf191bf65b5cd632",
        "target": "[RepairTarget] TwoPhases:fallback:312\nCODE: tokensCount += weiLeft * ethUsdRate / tokenSecondPeriodPrice\nOPERATION: weiLeft * ethUsdRate [/] tokenSecondPeriodPrice\nSSA: TMP_129 [/] tokenSecondPeriodPrice_3 --> TMP_130\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9d934a83fd602872d156c5adcf191bf65b5cd632",
        "target": "[RepairTarget] TwoPhases:fallback:305\nCODE: uint256 sPeriodTokensCount = reminderCalc(soldTokensCount + tokensCount, totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount)\nOPERATION: totalSupply_ - sPeriodSoldTokensLimit [-] nfsPoolCount\nSSA: TMP_123 [-] nfsPoolCount_2 --> TMP_124\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9d934a83fd602872d156c5adcf191bf65b5cd632",
        "target": "[RepairTarget] TwoPhases:fallback:305\nCODE: uint256 sPeriodTokensCount = reminderCalc(soldTokensCount + tokensCount, totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount)\nOPERATION: soldTokensCount [+] tokensCount\nSSA: soldTokensCount_2 [+] tokensCount_2 --> TMP_122\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9d934a83fd602872d156c5adcf191bf65b5cd632",
        "target": "[RepairTarget] TwoPhases:fallback:312\nCODE: tokensCount += weiLeft * ethUsdRate / tokenSecondPeriodPrice\nOPERATION: tokensCount [+=] weiLeft * ethUsdRate / tokenSecondPeriodPrice\nSSA: tokensCount_3 [+] TMP_130 --> tokensCount_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9d934a83fd602872d156c5adcf191bf65b5cd632",
        "target": "[RepairTarget] TwoPhases:fallback:305\nCODE: uint256 sPeriodTokensCount = reminderCalc(soldTokensCount + tokensCount, totalSupply_ - sPeriodSoldTokensLimit - nfsPoolCount)\nOPERATION: totalSupply_ [-] sPeriodSoldTokensLimit\nSSA: totalSupply__3 [-] sPeriodSoldTokensLimit_2 --> TMP_123\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9e0768c51c55e15b831d39de674a4d1858df78ab",
        "target": "[RepairTarget] HCHToken:mintToken:166\nCODE: totalSupply += mintedAmount\nOPERATION: totalSupply [+=] mintedAmount\nSSA: totalSupply_6 [+] mintedAmount_2 --> totalSupply_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x9e814db88c3bfc2361313736c914dc84bc1c0537",
        "target": "[RepairTarget] MultiOwnable:removeOwner_:382\nCODE: ownersLength_ -= 1\nOPERATION: ownersLength_ [-=] 1\nSSA: ownersLength__3 [-] 1 --> ownersLength__4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9f6e572359e5843a7f0028b35bc349501ae0a917",
        "target": "[RepairTarget] RegularToken:transfer:47\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_3 [-] _value_1 --> REF_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9f6e572359e5843a7f0028b35bc349501ae0a917",
        "target": "[RepairTarget] UnboundedRegularToken:transferFrom:102\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_44 [-] _value_1 --> REF_44\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9f8e99f16c8539af5502083995f3cef979bc533d",
        "target": "[RepairTarget] RegularToken:transfer:25\nCODE: balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]\nOPERATION: balances[_to] [+] _value\nSSA: REF_1 [+] _value_1 --> TMP_1\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x9f8e99f16c8539af5502083995f3cef979bc533d",
        "target": "[RepairTarget] UnboundedRegularToken:transferFrom:75\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_43 [+] _value_1 --> REF_43\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa0457edcf4cf27eca91b8a4d02ed9816689115fa",
        "target": "[RepairTarget] ERC20TokenSAC:_transfer:93\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_6 [+] REF_7 --> TMP_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa11728e75165dfc5cb83ec71ad3a63975efcd36d",
        "target": "[RepairTarget] GorgonaPremium:fallback:129\nCODE: depositAmount += msg.value\nOPERATION: depositAmount [+=] msg.value\nSSA: depositAmount_6 [+] msg.value --> depositAmount_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa29b2c039a4dc6742f20873d21afbf3ddac95d1c",
        "target": "[RepairTarget] WideEnergy:transferFrom:50\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_11 [-] _value_1 --> REF_11\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa29e65a8cb83bab2a1f34c4635a6cfcccc4ac8d8",
        "target": "[RepairTarget] SafeMath:safeAdd:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa2c7f7e7d8f11e68df6f7aa4e91933f3fcbdbe51",
        "target": "[RepairTarget] ETIN:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa4131ed44a6243148ff77b63876977b5805c10b4",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa48e591eb51c905fb60767f230d6ba02cb97b241",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa4bdb11dc0a2bec88d24a3aa1e6bb17201112ebe",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa4db144e6f0f3e7f988670e691f5c2b6935bf21a",
        "target": "[RepairTarget] GUAEX:_transfer:33\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa4db144e6f0f3e7f988670e691f5c2b6935bf21a",
        "target": "[RepairTarget] GUAEX:_transfer:37\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa65f1e32ff0bb8d6b7829eceaf5580dce59801c7",
        "target": "[RepairTarget] MoreStampsGlobal:_transfer:39\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa65f1e32ff0bb8d6b7829eceaf5580dce59801c7",
        "target": "[RepairTarget] MoreStampsGlobal:_transfer:42\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xa661b095b2f17d7163fb9edcf00d323c46bbc717",
        "target": "[RepairTarget] CrowdsaleRC:fallback:29\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_1 [+] amount_1 --> REF_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa66b19f7de1f0c91029aaff474cd3b9652e1587c",
        "target": "[RepairTarget] Share:transferHolds:161\nCODE: fullfilled[to] = watermark - toBonus / holds[to]\nOPERATION: watermark [-] toBonus / holds[to]\nSSA: watermark_7 [-] TMP_37 --> TMP_38\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa66b19f7de1f0c91029aaff474cd3b9652e1587c",
        "target": "[RepairTarget] Share:transferHolds:161\nCODE: fullfilled[to] = watermark - toBonus / holds[to]\nOPERATION: toBonus [/] holds[to]\nSSA: toBonus_1 [/] REF_18 --> TMP_37\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa6af8c6f67995faedd83b341c80af09159fe318a",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa741aab263901c03021e105e51dbfda0f58a0f99",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa7a881bc57e36305a1e8ccaa4115445a14cba2d5",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa98ac33bf1227ea5de0cf2a5f5c9cba13cff46d7",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaa746780d844379ae5ef9f9f7daceb59ba6fde57",
        "target": "[RepairTarget] StandardToken:transferFrom:129\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaabf1b6e4fbebb239e8a16deea11947bbcd1024a",
        "target": "[RepairTarget] RetailLoyaltySystemBase:_transfer:74\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xac55f9461067801042c396ee36268fa09aaad304",
        "target": "[RepairTarget] Sale:fallback:38\nCODE: ether92 = (msg.value)-ether8\nOPERATION: (msg.value) [-] ether8\nSSA: msg.value [-] ether8_1 --> TMP_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xac8d62304e09286e3359824d75c6c9e627ae8f7c",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xad62978707bffee58bd59fadc4739e43cbb5cbb6",
        "target": "[RepairTarget] FreezableToken:balanceOf:1329\nCODE: return super.balanceOf(_owner) + freezingBalance[_owner]\nOPERATION: super.balanceOf(_owner) [+] freezingBalance[_owner]\nSSA: TMP_194 [+] REF_146 --> TMP_195\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xae14aee06f8fd12adc5b191d2382110f27851c80",
        "target": "[RepairTarget] StandardToken:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xae2592b477ac500068a7925ddfc9ee448fb58242",
        "target": "[RepairTarget] LBA:_transfer:31\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xae2592b477ac500068a7925ddfc9ee448fb58242",
        "target": "[RepairTarget] LBA:_transfer:35\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xaf8eabf89f5664a2bc82ca415a4337821cd54d65",
        "target": "[RepairTarget] Whitelist:removeFromWhitelist:417\nCODE: uint index = whitelistIndexMap[_beneficiary]-1\nOPERATION: whitelistIndexMap[_beneficiary] [-] 1\nSSA: REF_99 [-] 1 --> TMP_198\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb183b16c8bc54af53785302e2a870ef0429f6dce",
        "target": "[RepairTarget] Token:transferFrom:41\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb1ce837aff7c0ef9613f0455756796d8a31960b0",
        "target": "[RepairTarget] CECToken:CECToken:49\nCODE: totalSupply = initialSupply * 10 ** uint256(decimals)\nOPERATION: initialSupply [*] 10 ** uint256(decimals)\nSSA: initialSupply_1 [*] TMP_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb33764f8217cd79e7dfcf4823cb468ce9c4a20d2",
        "target": "[RepairTarget] lIKETOKEN:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xb6527cd9e5c0994f5feb19fbbda57d973e3399fa",
        "target": "[RepairTarget] StandardToken:transferFrom:115\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb72758ffd33cf4f1f3b935a549939c2af62420d0",
        "target": "[RepairTarget] Whitelist:addAddressesToWhitelist:115\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb72758ffd33cf4f1f3b935a549939c2af62420d0",
        "target": "[RepairTarget] Whitelist:removeAddressesFromWhitelist:143\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb893ea9fc7229d65c626f614c493d931b5ee75cc",
        "target": "[RepairTarget] SafeMath:mul:59\nCODE: c = _a * _b\nOPERATION: _a [*] _b\nSSA: _a_1 [*] _b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb9c7b2b4f92005c6008908b1b6e2957f98c70ac2",
        "target": "[RepairTarget] SafeMath:safeSub:11\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xba03307fe84a1edac83624434dd15d572ea0f29d",
        "target": "[RepairTarget] SafeMath:div:21\nCODE: uint256 c = a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xba0e0604226b017263dff2b236b4c24fd26bf1c2",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xba4fabeb5c670f5eff2610f627518641de0cb7ce",
        "target": "[RepairTarget] DonateDust:donate:18\nCODE: totalDonations += msg.value\nOPERATION: totalDonations [+=] msg.value\nSSA: totalDonations_1 [+] msg.value --> totalDonations_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbc4976ceaeae6c019f826a1e89a6d9cb1a2970bc",
        "target": "[RepairTarget] ERC20:transferFrom:52\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbc9363b59cd73f59102ad6a45494f274d311c0c0",
        "target": "[RepairTarget] Share:transferHolds:159\nCODE: fullfilled[to] = watermark - toBonus / holds[to]\nOPERATION: toBonus [/] holds[to]\nSSA: toBonus_1 [/] REF_18 --> TMP_37\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbc9363b59cd73f59102ad6a45494f274d311c0c0",
        "target": "[RepairTarget] Share:transferHolds:159\nCODE: fullfilled[to] = watermark - toBonus / holds[to]\nOPERATION: watermark [-] toBonus / holds[to]\nSSA: watermark_7 [-] TMP_37 --> TMP_38\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbd11eae443ef0e96c1cc565db5c0b51f6c829c0b",
        "target": "[RepairTarget] AENToken:_transfer:26\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbd11eae443ef0e96c1cc565db5c0b51f6c829c0b",
        "target": "[RepairTarget] AENToken:_transfer:30\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbd1865087e1f5847f399ff6c2f1af6de78480d2b",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbd5ba381a08379430ec374b1d94dfdc4649a49bc",
        "target": "[RepairTarget] SafeMath:sub:21\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbe4411737170e852ea275d235145ceab77e0fe73",
        "target": "[RepairTarget] SafeMath:add:6\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbebbfe5b549f5db6e6c78ca97cac19d1fb03082c",
        "target": "[RepairTarget] VaultProxy:deposit:26\nCODE: Deposits[msg.sender] += msg.value\nOPERATION: Deposits[msg.sender] [+=] msg.value\nSSA: REF_4 [+] msg.value --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbee4c56cf211037c9688d19aebf3708638e12b25",
        "target": "[RepairTarget] TokenERC20:_transfer:39\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbee4c56cf211037c9688d19aebf3708638e12b25",
        "target": "[RepairTarget] TokenERC20:_transfer:42\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xbf5a7517634981dfda961ff83d8b08212ce771b8",
        "target": "[RepairTarget] HHHToken:mintToken:167\nCODE: totalSupply += mintedAmount\nOPERATION: totalSupply [+=] mintedAmount\nSSA: totalSupply_6 [+] mintedAmount_2 --> totalSupply_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbfa59ec8f34e01049b9f756b8fac4b3f3519caa4",
        "target": "[RepairTarget] ZenAD:enableWhitelist:108\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbfa59ec8f34e01049b9f756b8fac4b3f3519caa4",
        "target": "[RepairTarget] ZenAD:disableWhitelist:114\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbff7021e82f14aa8156c7f90ec8c339e1e2be31b",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc0360a3507655e619cdf7e6ca616d9ddec4dec95",
        "target": "[RepairTarget] SafeMath:mul:20\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc053b8fb1442c138f37f55068eea8a250e72850e",
        "target": "[RepairTarget] MetamToken:transferFrom:110\nCODE: balances[to] = balances[to] + tokens\nOPERATION: balances[to] [+] tokens\nSSA: REF_16 [+] tokens_1 --> TMP_10\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc053b8fb1442c138f37f55068eea8a250e72850e",
        "target": "[RepairTarget] MetamToken:transfer:77\nCODE: balances[to] = balances[to] + tokens\nOPERATION: balances[to] [+] tokens\nSSA: REF_6 [+] tokens_1 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc0f3aa07dfd62a538bb370bd8a2a8597ef491c74",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc1b779f738e625bb2900928b995837dd7caee0a3",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc20f00395c347c15806c4d26ce74dcb8d9fa8f9f",
        "target": "[RepairTarget] Likedapp:addUser:58\nCODE: User storage u = userStore[userStore.length - 1]\nOPERATION: userStore.length [-] 1\nSSA: REF_4 [-] 1 --> TMP_7\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc23867dabd392da14c602a3a65bcca4960fd2545",
        "target": "[RepairTarget] SafeMath:mul:67\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc260b99d8da199383e64378809b671e11d3ecf1d",
        "target": "[RepairTarget] BitronCoin:transfer:85\nCODE: balance[owner]\t= balance[owner] - tokens\nOPERATION: balance[owner] [-] tokens\nSSA: REF_14 [-] tokens_3 --> TMP_27\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc2bca141ab9199f23bd29f416e1f6efe21f59d59",
        "target": "[RepairTarget] VPTToken:transferFrom:68\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc43cd80936e12d5b6e6d9fe9c90f4a9549e76047",
        "target": "[RepairTarget] SaddleShopOwner:bid:505\nCODE: uint256 priceAufschlag=msg.value/3\nOPERATION: msg.value [/] 3\nSSA: msg.value [/] 3 --> TMP_60\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc52217c326237c63cb56892bd081e2d1dc826f37",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc5514178e11ee84b7445777bd28298c2d7b21f87",
        "target": "[RepairTarget] ISE:burn:75\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc6253bb646da7d941ccacc78bb9e559c2e62a008",
        "target": "[RepairTarget] StandardToken:transferFrom:123\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc673fd67f8c9680dd5f915a3154436a113fd44d0",
        "target": "[RepairTarget] FLTToken:transferFrom:93\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc7ef04ce9a0eef0e3b4fb9193441d1b101cd5a09",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc83279990fc9afc8604e3aff1e087d4cceb8a9e5",
        "target": "[RepairTarget] SafeMath:mul:71\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc83d46e4d1e290fa414a5775d90d5d50745c3281",
        "target": "[RepairTarget] TargetHit:buy:58\nCODE: balanceOf[msg.sender] += amount\nOPERATION: balanceOf[msg.sender] [+=] amount\nSSA: REF_3 [+] amount_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc8c911db36aa491cd831f1f595b2ab258de7cef0",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc96fe3e9e111c5f70cb1585d3740d2ecc294f5c6",
        "target": "[RepairTarget] HammerChain:transferFrom:76\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_12 [-] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc9ef94f7b7dd045cce2b0cab7ac3075d6b49f4b3",
        "target": "[RepairTarget] SmartGrowup:addDepositors:97\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xca72a87f0f277c2952a41d8466d78a1543a1e64e",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcad646f892aec0e4c7210344bc413aeab9bbc928",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcb4b28f36425432aa9ade1bd0e709e4cd5f76390",
        "target": "[RepairTarget] IOUcoin:transferFrom:90\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_13 [-] _amount_1 --> REF_13\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcb932640a448b264fdbcfe81d6c34a2887f89f15",
        "target": "[RepairTarget] SafeMath:sub:259\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcc0527605a4fc575937be34e8da714d68a513903",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcc9444b760c516eaa0a27548e709a8fc2f7e367a",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcd4160ed4ceb5c919323455a5ad5509d8c5fc18a",
        "target": "[RepairTarget] STCoin:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xcd76b5a4a5fa96149ff02bf3a193f1113c502d95",
        "target": "[RepairTarget] LaiBiToken:burnFrom:157\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcd76b5a4a5fa96149ff02bf3a193f1113c502d95",
        "target": "[RepairTarget] LaiBiToken:_transfer:62\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xce5311217142fcead9b9e00a8a3fba1e17816dd6",
        "target": "[RepairTarget] ExtremiumToken:transfer:25\nCODE: balanceOf[to] += value\nOPERATION: balanceOf[to] [+=] value\nSSA: REF_3 [+] value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xce5311217142fcead9b9e00a8a3fba1e17816dd6",
        "target": "[RepairTarget] ExtremiumToken:transferFrom:52\nCODE: allowance[from][msg.sender] -= value\nOPERATION: allowance[from][msg.sender] [-=] value\nSSA: REF_12 [-] value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xceb43cc2625db7eb86c3a3a69a97d3da1931a9a3",
        "target": "[RepairTarget] ChainStarBase:_transfer:74\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xceb8d6d39633fca9cdb37f7654f0c47294b97743",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xcf06d2a6f29dd6258820d77ceb4395c17abc4f54",
        "target": "[RepairTarget] GSY:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xcf438fb35c4c7131e8846e4ccb5bec3ea60d7591",
        "target": "[RepairTarget] etherdoodleToken:_transfer:654\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xcf9b676eb97bf813ddee7e875551cf2aa51539e6",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xcf9b676eb97bf813ddee7e875551cf2aa51539e6",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd017d4d97e06c65b72d27aa9157fcec98a169f04",
        "target": "[RepairTarget] BlockPayeeToken:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd099719d2c5c288b17de2020404de2cf94dfa3b8",
        "target": "[RepairTarget] JMTOKEN:_transfer:55\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd0d9ef2e53ae958ba533b8fa451fdf9a418b520a",
        "target": "[RepairTarget] TokenERC20:_transfer:115\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd153fc5ed49c5ec9e7bdbc4b0310202c633143b1",
        "target": "[RepairTarget] privlocatum:transfer:287\nCODE: (balance[msg.sender] >= _value) && (balance[_to] + _value > balance[_to])\nOPERATION: balance[_to] [+] _value\nSSA: REF_7 [+] _value_1 --> TMP_27\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xd1670c55f5e68fede5fddd8ace64a3329f778b89",
        "target": "[RepairTarget] ATSTokenReservation:tryDeposit:249\nCODE: cumAlienDeposits += msg.value\nOPERATION: cumAlienDeposits [+=] msg.value\nSSA: cumAlienDeposits_7 [+] msg.value --> cumAlienDeposits_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd1a7e773cbb9e4149a91ff860a871855bb109568",
        "target": "[RepairTarget] apexTWO:transfer:611\nCODE: payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens)\nOPERATION: profitPerShare_ [*] _amountOfTokens\nSSA: profitPerShare__9 [*] _amountOfTokens_1 --> TMP_63\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd1a7e773cbb9e4149a91ff860a871855bb109568",
        "target": "[RepairTarget] apexTWO:transfer:611\nCODE: payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens)\nOPERATION: payoutsTo_[_toAddress] [+=] (int256) (profitPerShare_ * _amountOfTokens)\nSSA: REF_29 [+] TMP_64 --> REF_29\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd1b24eb6a8318008afd9f89c49980b9bd5c64ac4",
        "target": "[RepairTarget] SafeMath:add:173\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_13\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd2707cea59e2914bfc200d6188233309a6aece02",
        "target": "[RepairTarget] SafeMath:add:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd339b7d955199253c7973fe9fdb2946a523e15a7",
        "target": "[RepairTarget] WeduToken:unlockBalance:116\nCODE: balanceValue[_who].unlocked += _value\nOPERATION: balanceValue[_who].unlocked [+=] _value\nSSA: REF_33 [+] _value_1 --> REF_33\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd339b7d955199253c7973fe9fdb2946a523e15a7",
        "target": "[RepairTarget] WeduToken:lockBalance:98\nCODE: balanceValue[_who].unlocked -= _value\nOPERATION: balanceValue[_who].unlocked [-=] _value\nSSA: REF_17 [-] _value_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd339b7d955199253c7973fe9fdb2946a523e15a7",
        "target": "[RepairTarget] WeduToken:_transfer:145\nCODE: balanceValue[_to].unlocked += _value\nOPERATION: balanceValue[_to].unlocked [+=] _value\nSSA: REF_53 [+] _value_1 --> REF_53\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd411d1c7fd2e1a9adf44ef852e82658bb739f8e1",
        "target": "[RepairTarget] SafeMath:mul:13\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd4de05944572d142fbf70f3f010891a35ac15188",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd666480ed3f4d6cc10ba13e6e7341bb4d23e1bfd",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd67a6cd797a8fdc77b12335d7dacdfd14ea7c7fd",
        "target": "[RepairTarget] SafeMath:safeAdd:5\nCODE: c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd7290307c040f4089f8650b7f7aac3cfe39cd6bd",
        "target": "[RepairTarget] SafeMath:mul:12\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd755603924c56ffcf099891f6130eca1b6203155",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94",
        "target": "[RepairTarget] Token:_transfer:107\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd9eebffcb29b2f3df0b007fb70ec2901851b26dd",
        "target": "[RepairTarget] fightclub:promoteFight:253\nCODE: fightEndTime[fightCount] = block.number + fightLength\nOPERATION: block.number [+] fightLength\nSSA: block.number [+] fightLength_1 --> TMP_28\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xda0732c300482d495e704e15a9961d9ad714661e",
        "target": "[RepairTarget] SafeMath:mul:19\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdaa6cd28e6aa9d656930ce4bb4fa93eec96ee791",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdacdbaae3947eab88b1dd9d0e331fe65d2c0d9f9",
        "target": "[RepairTarget] UnstoppablePyramid:newPonziFriend:47\nCODE: ponziFriends[_parentId].amountEarned < (ponziFriends[_parentId].amountPlayed * 5) && _parentId < ponziFriends.length\nOPERATION: ponziFriends[_parentId].amountPlayed [*] 5\nSSA: REF_3 [*] 5 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdb12c9a10570d9fd3dcadc4aac4b2ffb6915bcc9",
        "target": "[RepairTarget] StandardToken:transferFrom:56\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdbe608afc2d4bf87a64ed864a9aee8a316518481",
        "target": "[RepairTarget] NoxusCoin:_transfer:57\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_9 [-] _value_1 --> REF_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdd92e60563250012ee1c4cb4b26810c45a0591da",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xddb3a681009727a7a3f1f07d12944aeabd39d65d",
        "target": "[RepairTarget] TokenERC20:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xde05883ceeb3f17060407708da6fa89520e3e7f8",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xde5d847774aa62f4346c85518bd6ad10df76c54c",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xde6c7366c50663712de30919b2cb9af2dd1a5378",
        "target": "[RepairTarget] MDL:airdropMDL:55\nCODE: balances[addresses[i]] += _value\nOPERATION: balances[addresses[i]] [+=] _value\nSSA: REF_4 [+] _value_1 --> REF_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xde6c7366c50663712de30919b2cb9af2dd1a5378",
        "target": "[RepairTarget] MDL:transferFrom:78\nCODE: balances[_from] -= _amount\nOPERATION: balances[_from] [-=] _amount\nSSA: REF_15 [-] _amount_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xde952609f18f77a858ece2a51abf2e47086a9278",
        "target": "[RepairTarget] SafeMath:safeSub:11\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe0f0abce99ba75e0a369514cf4359cc698824efc",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe1fd7cb1a330c48cc0a09d31f0786b61bfc43f71",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe3542a545a4ac889a4e80e86ff5518a535ffe4c9",
        "target": "[RepairTarget] TokenHolder:depositTokens:72\nCODE: heldTimeline[msg.sender] = block.number + holdAmount\nOPERATION: block.number [+] holdAmount\nSSA: block.number [+] holdAmount_4 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6",
        "target": "[RepairTarget] Emojisan:tokenURI:139\nCODE: length--\nOPERATION: [--] length\nSSA: length_2 [-] 1 --> length_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe5fa6942a9662787c52e2ac1c61b895c580f799a",
        "target": "[RepairTarget] WhitelistImpl:addToWhitelist:82\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe5fa6942a9662787c52e2ac1c61b895c580f799a",
        "target": "[RepairTarget] WhitelistImpl:removeFromWhitelist:88\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe62643c89462601b92901b0f270e15abe462c77c",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: c = _a * _b\nOPERATION: _a [*] _b\nSSA: _a_1 [*] _b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe62e7f41568589b386532b8462af086437f36370",
        "target": "[RepairTarget] ComeCoin:_transfer:23\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe62e7f41568589b386532b8462af086437f36370",
        "target": "[RepairTarget] ComeCoin:_transfer:27\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xe7976c679089eee8bcfdb1d2ce79a594dd2164b6",
        "target": "[RepairTarget] Storage:uploadData:19\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe835ff336cdf23fa73f01922907d7b979d074949",
        "target": "[RepairTarget] Veegotoken:enableWhitelist:117\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe8a5c48724115a81d32f05688169b29c7645c2da",
        "target": "[RepairTarget] StandardToken:transferFrom:63\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe9b8124b8a9d952f64c41e98d47a8f77ca27ce03",
        "target": "[RepairTarget] SafeMath:add:50\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe9d84dfe800bc604c8a94bfbc0f3c696b017b91e",
        "target": "[RepairTarget] VoidToken:batch_send:160\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xea174301a55dc765f05b5f27f8da333eeb5c4960",
        "target": "[RepairTarget] ExchangerPoint:burn:84\nCODE: totalSupply = totalSupply - _value\nOPERATION: totalSupply [-] _value\nSSA: totalSupply_2 [-] _value_1 --> TMP_32\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xea4c5b7088823f6851198ae908a59ee1d6a9c8c9",
        "target": "[RepairTarget] SafeMath:mul:32\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xea5478ed353bed393e07557d19e6c32723b4374e",
        "target": "[RepairTarget] ZhangHongBinToken:burn:75\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeb3488b4907b752632270ecb89ad38e63c2d4913",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xeb3488b4907b752632270ecb89ad38e63c2d4913",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xed2bd91e69155782d045ca8254eafa8935e99b58",
        "target": "[RepairTarget] SafeMath:div:275\nCODE: return a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeee07485b432c56d38bb7e1a8f5d57322cb78f89",
        "target": "[RepairTarget] TokenMyUnicoin:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xefb37624b6e32447a04edf5e6477d92ecfde2ce2",
        "target": "[RepairTarget] SafeMath:add:50\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf09a3ea98a90b2de766227f04617a5a2d1c326c4",
        "target": "[RepairTarget] DEMI:demi:33\nCODE: totalSupply = initialSupply * 10 ** uint256(decimals)\nOPERATION: initialSupply [*] 10 ** uint256(decimals)\nSSA: initialSupply_1 [*] TMP_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf12946afa18de9d02fa3b0c0ea784978f0373745",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf12b9b6956b719a2c07873154f9e56bd13dfa24e",
        "target": "[RepairTarget] SafeMath:div:275\nCODE: return a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_12\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf224706834749da2165743614db339a97f3e3244",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf226df00c91ec1fd05e89382edeb7b4b12f6dfab",
        "target": "[RepairTarget] AZEEMCOIN:_transfer:49\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf2740c75f221788cf78c716b953a7f1c769d49b9",
        "target": "[RepairTarget] Wrapped_Ether:transfer:95\nCODE: balances[msg.sender] = balances[msg.sender] - _amount\nOPERATION: balances[msg.sender] [-] _amount\nSSA: REF_14 [-] _amount_1 --> TMP_27\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf2740c75f221788cf78c716b953a7f1c769d49b9",
        "target": "[RepairTarget] Wrapped_Ether:transferFrom:116\nCODE: allowed[_from][msg.sender] = allowed[_from][msg.sender] - _amount\nOPERATION: allowed[_from][msg.sender] [-] _amount\nSSA: REF_27 [-] _amount_1 --> TMP_39\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf2a7993b044e82d1679dab150d15847d22937fd6",
        "target": "[RepairTarget] SafeMath:multiplication:27\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf2c893cc574f1366a3a21a256951e01b75459254",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf2c893cc574f1366a3a21a256951e01b75459254",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf2d3bee00851fdf205f4fe825fe89d2abff88231",
        "target": "[RepairTarget] WOB:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf3757c2fa6fe4208383c407220d935680aa3f710",
        "target": "[RepairTarget] StandardToken:transferFrom:49\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf398b0ab72ea119aa760c945ba3249ee1f9aa803",
        "target": "[RepairTarget] UnionChain:burn:74\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_2 [-] _value_1 --> totalSupply_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf50d193eb6761fb3189be46b9165d4aec20e05f0",
        "target": "[RepairTarget] FLEBToken:transferFrom:129\nCODE:    \r\r\n     allowed[_from][msg.sender] \nOPERATION: ] = balances[_t [-] + _val\nSSA: REF_12 [+] _value_1 --> TMP_18\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf5ba8a8c87f976b79b17ccd25ee8dc2f8e82fb59",
        "target": "[RepairTarget] TokenERC20:proofOfWork:26\nCODE: difficulty = difficulty * 10 minutes / timeSinceLastProof + 1\nOPERATION: difficulty [*] 10 minutes\nSSA: difficulty_1 [*] 600 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf5ba8a8c87f976b79b17ccd25ee8dc2f8e82fb59",
        "target": "[RepairTarget] TokenERC20:giveBlockReward:14\nCODE: balanceOf[block.coinbase] += 1\nOPERATION: balanceOf[block.coinbase] [+=] 1\nSSA: REF_0 [+] 1 --> REF_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf5ba8a8c87f976b79b17ccd25ee8dc2f8e82fb59",
        "target": "[RepairTarget] TokenERC20:proofOfWork:26\nCODE: difficulty = difficulty * 10 minutes / timeSinceLastProof + 1\nOPERATION: difficulty * 10 minutes / timeSinceLastProof [+] 1\nSSA: TMP_10 [+] 1 --> TMP_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf5ba8a8c87f976b79b17ccd25ee8dc2f8e82fb59",
        "target": "[RepairTarget] TokenERC20:proofOfWork:23\nCODE: uint timeSinceLastProof = (now - timeOfLastProof)\nOPERATION: now [-] timeOfLastProof\nSSA: now [-] timeOfLastProof_1 --> TMP_5\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xf5ba8a8c87f976b79b17ccd25ee8dc2f8e82fb59",
        "target": "[RepairTarget] TokenERC20:proofOfWork:26\nCODE: difficulty = difficulty * 10 minutes / timeSinceLastProof + 1\nOPERATION: difficulty * 10 minutes [/] timeSinceLastProof\nSSA: TMP_9 [/] timeSinceLastProof_1 --> TMP_10\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf616f17a71e7eca0300c7cff0a2904b7e91ea10c",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf6317dd9b04097a9e7b016cd23dcaa7cfe19d9c6",
        "target": "[RepairTarget] TOPB:_transfer:27\nCODE: uint256 previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_11\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf6317dd9b04097a9e7b016cd23dcaa7cfe19d9c6",
        "target": "[RepairTarget] TOPB:_transfer:31\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_13\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf6848903a8968dfee46767596d32bfec10aee3bc",
        "target": "[RepairTarget] StandardToken:transferFrom:107\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf6c01343020a7f37f9a9bdc2c1a5dbe8604de62c",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf73fc4b74a4cc6f9ea203a9d5bbff4ffce3a4c48",
        "target": "[RepairTarget] Phillionex:transfer:24\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf8e7474dceb8c2b085705519fdc5d371fedd359b",
        "target": "[RepairTarget] TokenERC20:burnFrom:162\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf8f87030c14285c675453c1d32bd4ae8ce24aef8",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf914df975e42b374e6608c6248285bb7bfbc3814",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf9adaa80d05b27d26079d18b499c0e6f00d85b3c",
        "target": "[RepairTarget] SafeMath:mul:27\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfad625cbb73f6d08b524deae6057d915bc78474c",
        "target": "[RepairTarget] RCLTOKEN:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfb17292685f931c68cabce59cad3532c7ef31f5d",
        "target": "[RepairTarget] StandardToken:transferFrom:61\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfc8bdbbf0b121387f914194f53fb3c278ffea9a5",
        "target": "[RepairTarget] SponsoredItemGooRaffle:buyRaffleTicket:161\nCODE: purchases.ticketsBought.length += 1\nOPERATION: purchases.ticketsBought.length [+=] 1\nSSA: REF_15 [+] 1 --> REF_15\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfd08f8cd74fd81c87313d208a06ec7cdc4781956",
        "target": "[RepairTarget] BaseToken:_transfer:19\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_3 [+] REF_4 --> TMP_7\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfd08f8cd74fd81c87313d208a06ec7cdc4781956",
        "target": "[RepairTarget] BaseToken:_transfer:22\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_7 [+] REF_8 --> TMP_8\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xfd810ccff10dba53c619806940a4acf4416ddbe0",
        "target": "[RepairTarget] AppCoins:burnFrom:241\nCODE: allowance[_from][msg.sender] -= _value\nOPERATION: allowance[_from][msg.sender] [-=] _value\nSSA: REF_31 [-] _value_1 --> REF_31\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfe1bc038bb3535cbfb13886ea23f7c4032996c59",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfec8c5187aee4c2d460dad811338723b7bc8d50e",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfecbdc28f7fd30f24170fde058d36a29c21b3fad",
        "target": "[RepairTarget] Conteract:Donate:29\nCODE: Donors[msg.sender] += msg.value\nOPERATION: Donors[msg.sender] [+=] msg.value\nSSA: REF_2 [+] msg.value --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xff51d88689dbc44def2e9272a2966c8beca9febc",
        "target": "[RepairTarget] ETFT:_transfer:113\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xff81e0f888c31b91c8ec623498cf82a5c7a37f7a",
        "target": "[RepairTarget] BitronCoin:transfer:87\nCODE: balance[owner]\t= balance[owner] - tokens\nOPERATION: balance[owner] [-] tokens\nSSA: REF_14 [-] tokens_3 --> TMP_29\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xff955d0fb3644f9f1466180bb59928a92cb16ec3",
        "target": "[RepairTarget] BeeAppToken:_transfer:53\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x00817122beef212ac22e65fc0fba8bc065fd5f66",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x00e04c3fbb3783fd57eae4037ee1ee02c4d84614",
        "target": "[RepairTarget] SafeMath256:pow:111\nCODE: assert(c / (a ** (b - 1)) == a)\nOPERATION: c [/] (a ** (b - 1))\nSSA: c_1 [/] TMP_29 --> TMP_30\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x00e04c3fbb3783fd57eae4037ee1ee02c4d84614",
        "target": "[RepairTarget] SafeMath256:pow:111\nCODE: assert(c / (a ** (b - 1)) == a)\nOPERATION: b [-] 1\nSSA: b_1 [-] 1 --> TMP_28\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x04aaa75160d5c32e254c8f62a68507469709a8f3",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0689418b68122149a737a7cc7a49b2ad7c3049cc",
        "target": "[RepairTarget] Academy:fallback:37\nCODE: msg.value * 1000 > 9\nOPERATION: msg.value [*] 1000\nSSA: msg.value [*] 1000 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x08c00f697475636821565f6f4f6b883d36ae0eef",
        "target": "[RepairTarget] SafeMath:mulSafe:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0d514c490640d6276b5bb5adc52d1453cf11c5a0",
        "target": "[RepairTarget] StandardToken:transfer:25\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x0d514c490640d6276b5bb5adc52d1453cf11c5a0",
        "target": "[RepairTarget] StandardToken:transferFrom:34\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x0e50e6d6bb434938d8fe670a2d7a14cd128eb50f",
        "target": "[RepairTarget] TokenERC20:_transfer:73\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x114ffec3f9bb44694051b61806b4da2793a2efcf",
        "target": "[RepairTarget] SafeMath:mul:19\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x13c22dbac007959a2e619f4172c831f13a1ab4c8",
        "target": "[RepairTarget] adaCoin:enableWhitelist:96\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x13c22dbac007959a2e619f4172c831f13a1ab4c8",
        "target": "[RepairTarget] adaCoin:disableWhitelist:102\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x160b34aa9e397e33b2d8dd712af2cf78e748985b",
        "target": "[RepairTarget] apexPlatinum:transfer:613\nCODE: payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens)\nOPERATION: profitPerShare_ [*] _amountOfTokens\nSSA: profitPerShare__9 [*] _amountOfTokens_1 --> TMP_61\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x160b34aa9e397e33b2d8dd712af2cf78e748985b",
        "target": "[RepairTarget] apexPlatinum:transfer:613\nCODE: payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens)\nOPERATION: payoutsTo_[_customerAddress] [-=] (int256) (profitPerShare_ * _amountOfTokens)\nSSA: REF_33 [-] TMP_62 --> REF_33\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x1c621e912da2765c850c017111d56959b28547a6",
        "target": "[RepairTarget] COETToken:_transfer:75\nCODE: require(balanceOf[_to] + _value >= balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_2 [+] _value_1 --> TMP_7\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x1c621e912da2765c850c017111d56959b28547a6",
        "target": "[RepairTarget] COETToken:_transfer:85\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x1d49ad13da6bbb6c2895dabe8cfe8f04834c2bed",
        "target": "[RepairTarget] TokenERC20:_transfer:115\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x1dc9edfa2a929ee0c59159bae3769591ec563f1c",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2124149bea65516dca044ee77d4dc5ac118fef4f",
        "target": "[RepairTarget] TokenERC20:_transfer:51\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_9\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2154f9d7da8bf221e102197195531c82cee1677e",
        "target": "[RepairTarget] AIUToken:_transfer:35\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2154f9d7da8bf221e102197195531c82cee1677e",
        "target": "[RepairTarget] AIUToken:burnFrom:78\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_22 [-] _value_1 --> REF_22\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x23be17937bd44b29bc905373ce0526ca7f79f23a",
        "target": "[RepairTarget] StandardToken:transferFrom:47\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x251ae4fde277b35186f9400f6ce26e8507dd1ab1",
        "target": "[RepairTarget] SafeMath:safeMul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x25543db4ff6a57affb219cca074a1e983c024c18",
        "target": "[RepairTarget] EPCToken:addToTotalSupply:127\nCODE: totalSupply += _delta * weisPerEth\nOPERATION: totalSupply [+=] _delta * weisPerEth\nSSA: totalSupply_3 [+] TMP_8 --> totalSupply_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x25543db4ff6a57affb219cca074a1e983c024c18",
        "target": "[RepairTarget] EPCToken:addToTotalSupply:127\nCODE: totalSupply += _delta * weisPerEth\nOPERATION: _delta [*] weisPerEth\nSSA: _delta_1 [*] weisPerEth_3 --> TMP_8\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x257f85b3aeacd887aa2493c05c5e17a06039d790",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x27d16a670bec2e2db9e0ca367aaee6758d2cb3c7",
        "target": "[RepairTarget] QCSSToken:_transfer:75\nCODE: require(balanceOf[_to] + _value >= balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_2 [+] _value_1 --> TMP_7\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x27d16a670bec2e2db9e0ca367aaee6758d2cb3c7",
        "target": "[RepairTarget] QCSSToken:_transfer:85\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x28fb4957d27e6eb12a7f8ed8730ad989a482f2e4",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x29f709e42c95c604ba76e73316d325077f8eb7b2",
        "target": "[RepairTarget] Shareable:changeShareable:159\nCODE: ++i\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2a46885f8e02ce11dd21209f3cbc3e91561cfc8a",
        "target": "[RepairTarget] TMToken:_transfer:35\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x2a46885f8e02ce11dd21209f3cbc3e91561cfc8a",
        "target": "[RepairTarget] TMToken:burnFrom:78\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_22 [-] _value_1 --> REF_22\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2c380cafadf51b656fc854b4252decfedb525131",
        "target": "[RepairTarget] SafeMath:sub:21\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x2c787cd0b4b342b5d4606e4fca61a9d85fd6d32f",
        "target": "[RepairTarget] DT:getYear:683\nCODE: year -= 1\nOPERATION: year [-=] 1\nSSA: year_2 [-] 1 --> year_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3127e0f1904ad7399f8468af8537f56f65d02974",
        "target": "[RepairTarget] BitCredit:_transfer:65\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x31d3087d42fce8f55ffd4496d8e6bb9199fa0675",
        "target": "[RepairTarget] SafeMath:safeMul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3606bac9d236835210beb1a332431dd9fd5484da",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x3831e1cee93f312ddd795255a6f68ed9d73d4837",
        "target": "[RepairTarget] TokenERC20:_transfer:72\nCODE: assert(balances[_from] + balances[_to] == previousBalances)\nOPERATION: balances[_from] [+] balances[_to]\nSSA: REF_8 [+] REF_9 --> TMP_24\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x3855024445fada90ae1f418a095714cf4dc9fc3f",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x386cabc0b14a507a4e024dea15554342865b20de",
        "target": "[RepairTarget] SafeMath:safeSubtract:55\nCODE: uint256 z = x - y\nOPERATION: x [-] y\nSSA: x_1 [-] y_1 --> TMP_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x38efd1b6ed62ce381dd926b90c554123ccde869d",
        "target": "[RepairTarget] NepalGoldCoin:_transfer:119\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3e7bd71c0242e77c1da554801ed35360a50f79cb",
        "target": "[RepairTarget] TokenERC20:_transfer:119\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x3ea7fa6e281bce9f1391298fd7ed0cef2a1c5848",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x418ccb0dd045af4c5e37aee7e1639901be9b55c4",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x429f41badcf183e225c97fe4ad6eeeecaea3ca79",
        "target": "[RepairTarget] SafeMath:mul:27\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x44dd83e69cb23bc060441b6c6e44a79d8c7b9398",
        "target": "[RepairTarget] SafeMath:safeMul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x44eb9b27b27ce167ff859da4a84df0ec83a59c3a",
        "target": "[RepairTarget] SafeMath:safeMul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x45d4764288362cb85c55440e9f2d5729f2581411",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x488771fdac168e3e313763aa2907ac5806dbc976",
        "target": "[RepairTarget] SafeMath:sub:19\nCODE: return a - b\nOPERATION: a [-] b\nSSA: a_1 [-] b_1 --> TMP_9\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4a8e8be61ddb37028138c5f77a313920545d5485",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4ba2dc9cd755de8ac69aa56e00d3653ed7005687",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4bd06bb10d440da204c3b27ce2e881ca35139d92",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4f4d22ca77222ae3d51e308c9a8f0e564f98e77a",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x54529a070b8950c82279bb8df0b416a824ed3858",
        "target": "[RepairTarget] SimpleTokenCoin:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: totalSupply [+] _value\nSSA: REF_0 [+] _value_1 --> TMP_6\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x54529a070b8950c82279bb8df0b416a824ed3858",
        "target": "[RepairTarget] SimpleTokenCoin:mint:37\nCODE: assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to])\nOPERATION: balances[_to] [+] _value\nSSA: totalSupply_2 [+] _value_1 --> TMP_4\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x54529a070b8950c82279bb8df0b416a824ed3858",
        "target": "[RepairTarget] SimpleTokenCoin:transfer:48\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x54529a070b8950c82279bb8df0b416a824ed3858",
        "target": "[RepairTarget] SimpleTokenCoin:transferFrom:60\nCODE: allowed[_from][msg.sender] -= _value\nOPERATION: allowed[_from][msg.sender] [-=] _value\nSSA: REF_15 [-] _value_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x54a7c606ea45f9b20cff8dbe232cdf6146cb7d26",
        "target": "[RepairTarget] ExToke:ExToke:101\nCODE: balanceOf[tokenAdmin] = 1100000000 * (uint256(10) ** decimals)\nOPERATION: 1100000000 [*] (uint256(10) ** decimals)\nSSA: 1100000000 [*] TMP_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x54c5231c982c6ce0c44f7b0c4a18275db998a02e",
        "target": "[RepairTarget] SafeMath32:pow:183\nCODE: assert(c / (a ** (b - 1)) == a)\nOPERATION: b [-] 1\nSSA: b_1 [-] 1 --> TMP_48\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x54c5231c982c6ce0c44f7b0c4a18275db998a02e",
        "target": "[RepairTarget] SafeMath32:pow:183\nCODE: assert(c / (a ** (b - 1)) == a)\nOPERATION: c [/] (a ** (b - 1))\nSSA: c_1 [/] TMP_49 --> TMP_50\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x556a4590b20fcc04141bf0a80791ce157f10622b",
        "target": "[RepairTarget] SafeMath:mul:19\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x56bfead31c2c6a3bdeb0891fab022c0b90ea43f1",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x573647a8334b39161261f354eaf7124585b5b666",
        "target": "[RepairTarget] TradingCoinEtherTether:fallback:135\nCODE: balances[msg.sender] = balances[msg.sender] + amount\nOPERATION: balances[msg.sender] [+] amount\nSSA: REF_35 [+] amount_1 --> TMP_27\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x58cfd2f4c5358e02ab1532c31b69e837199a01fe",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5a5486949ba50bfc5449a0079db19fa6b8fc51fe",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5aa3594cf4589f787c465c28482168e038602166",
        "target": "[RepairTarget] SafeMath:safeMul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5bffc45d740c213e19b68b40e9ed89705f495e44",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5c0a1ef3c2426064050417aedbd34a3a011fe8e9",
        "target": "[RepairTarget] TokenERC20:_transfer:115\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5cbf1b692d921f9eccaac6364ba463b8f549f266",
        "target": "[RepairTarget] roga:_transfer:111\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x5ddbd1980a2b589b9f26f77ae7aca20e725f5c64",
        "target": "[RepairTarget] RISK:roll:287\nCODE: _roundstart+_trucetime<_now\nOPERATION: _roundstart [+] _trucetime\nSSA: _roundstart_1 [+] _trucetime_1 --> TMP_51\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x5f75b1dcfb49229ea25bd05b7112706898ff3c48",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x61fb57afc0a9116c36651f83cc367880ff7526d9",
        "target": "[RepairTarget] eosLITE:enableWhitelist:117\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x63ff28be584600445e1c8c9da0b544fbd45ba552",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x644ffe4e1bdf64602607b9ae36b272a52132d345",
        "target": "[RepairTarget] StandardToken:transferFrom:49\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x65a3f52cf0e0b5db5945b45abc2eacd8e3207142",
        "target": "[RepairTarget] StayBNB:_transfer:63\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x678f892d1fe1ad47058c1c80a350ac7f6fb8ce32",
        "target": "[RepairTarget] apexPlatinum:transfer:613\nCODE: payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens)\nOPERATION: payoutsTo_[_customerAddress] [-=] (int256) (profitPerShare_ * _amountOfTokens)\nSSA: REF_33 [-] TMP_62 --> REF_33\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x678f892d1fe1ad47058c1c80a350ac7f6fb8ce32",
        "target": "[RepairTarget] apexPlatinum:transfer:613\nCODE: payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens)\nOPERATION: profitPerShare_ [*] _amountOfTokens\nSSA: profitPerShare__9 [*] _amountOfTokens_1 --> TMP_61\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x67d0a9a2340ef15a2e43b84b3edce1d3eeb5a524",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x692dccc0560f92a3dbf795156ab8cd9e4cfb9976",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6970bbe0df628b1e2dce874daaa529c0ceff54ff",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6a93ae6147ada96a7459167c4d18e6613efe2994",
        "target": "[RepairTarget] SafeMath:safeMul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6c4de8424a6184c830234b996f7dba9720dc9306",
        "target": "[RepairTarget] XKnockoutHamster:newEntity:301\nCODE: entityStructs[entityAddress].listPointer = entityList.push(entityAddress) - 1\nOPERATION: entityList.push(entityAddress) [-] 1\nSSA: TMP_50 [-] 1 --> TMP_51\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6c6b352d10aae3a8923b52ab341d81181461194d",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6dd2c2a82234d280e2b397db17b923fab49695e6",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6e9f056176b7997a98b9919bfb6642d4ea92a1ba",
        "target": "[RepairTarget] SafeMath256:div:185\nCODE: return a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_45\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x6fa63f9b452a97d2df921378197570f9c04ea286",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: c = _a * _b\nOPERATION: _a [*] _b\nSSA: _a_1 [*] _b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7045c5c158aecd68eed18671cc8775fc7f7d6e70",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x70aedc0621a686067fdba7fb4fdb209ea185fe73",
        "target": "[RepairTarget] TokenERC20:_transfer:115\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x729f8f3b96a51037ad2c536c6a46bd9d9a0fb9e9",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x76755c6d51989d2018dfe2b4eace95908ecb1c5e",
        "target": "[RepairTarget] ERC20Standard:transferFrom:60\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7a271d1df2c3f2fef734611c6c7ee6b9b8439204",
        "target": "[RepairTarget] SafeMath:mul:19\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7df6913d03c8207def2d2f89a38676e81fdfc4e5",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7e316aad8f66d0ae3281106e5b6bb2eea4238ffc",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7f54632f3352dcc21d8ae756be24701c05d914cf",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7ff386aeabfb72a4339d5a1b3bf1a8d982c12bdf",
        "target": "[RepairTarget] HgcToken:transferFrom:87\nCODE: accountTo.available += _value\nOPERATION: accountTo.available [+=] _value\nSSA: REF_16 [+] _value_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x80c52dc4232924701d1ed393c1d48f07c177820a",
        "target": "[RepairTarget] XKnockoutRegular:newEntity:301\nCODE: entityStructs[entityAddress].listPointer = entityList.push(entityAddress) - 1\nOPERATION: entityList.push(entityAddress) [-] 1\nSSA: TMP_50 [-] 1 --> TMP_51\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x81681ae7f8fe041ccad794c9afbc2cd23489597e",
        "target": "[RepairTarget] QCSCToken:_transfer:75\nCODE: require(balanceOf[_to] + _value >= balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_2 [+] _value_1 --> TMP_7\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x81681ae7f8fe041ccad794c9afbc2cd23489597e",
        "target": "[RepairTarget] QCSCToken:_transfer:85\nCODE: assert(balanceOf[_from] + balanceOf[_to] == previousBalances)\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_8 [+] REF_9 --> TMP_12\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x818b121e5c6435e1d3a7533c466804b817a18cd2",
        "target": "[RepairTarget] CCXTokenERC20:_transfer:159\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x82225cf0c21f285d40c64dcc0407b7360067993f",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: require(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x83668a58dd17726544f2dc6fde40d6d562c04ab4",
        "target": "[RepairTarget] RGT:_transfer:163\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_12 [+] _value_1 --> REF_12\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x837141aec793bdad663c71f8b2c8709731da22b1",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x841ea7e00c9c6f8ce0c751a5f8151c928fb63a91",
        "target": "[RepairTarget] ZillowBlockchain:enableWhitelist:117\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x844cf5d0d4680f4e676a46b9b546b6fbb5fbc2fd",
        "target": "[RepairTarget] TIMESCORE:transfer:89\nCODE: balanceOf[msg.sender] -= _value\nOPERATION: balanceOf[msg.sender] [-=] _value\nSSA: REF_4 [-] _value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x865a0a003b1523fec58e4b8a956d18ecd923a315",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x87529be23e0206ebedd6481fa6644d9b8b5cb9a9",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x889ca6ca2322d8693de5a7582bd9465f2da312c8",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8914d13337b05f2a996bcc75d5bb64a73dfe805a",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x89fa09d992c637c47f018c4717cdc9ef7ebf57df",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x8c5344637d2b14d1c2b340fe0a118580738198fb",
        "target": "[RepairTarget] Seeflast:constructor:125\nCODE: _balances[0x74dF2809598C8AfCf655d305e5D10C8Ab824F0Eb] = 260000000 * 10 ** decimals\nOPERATION: 260000000 [*] 10 ** decimals\nSSA: 260000000 [*] TMP_25 --> TMP_26\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x8f29321e1a55dd174b2bd4d6414c8082ab984517",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9043397333435d391fc02c885bc23b3633865045",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x91a094bc4ad86870589eac51a299db9843108e11",
        "target": "[RepairTarget] TokenERC20:_transfer:177\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_18\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0x9367863796a1f0992a8c256fe83ef8bcd307c199",
        "target": "[RepairTarget] INVECHCOIN:_transfer:95\nCODE: require(balanceOf[_to] + _value >= balanceOf[_to])\nOPERATION: balanceOf[_to] [+] _value\nSSA: REF_2 [+] _value_1 --> TMP_7\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x93e3ea31a74209daf3fcbd8a4013236b8e21559f",
        "target": "[RepairTarget] SafeMath:safeMul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x942e0f9072d5ddb737a6210f08187a1cb435c2dd",
        "target": "[RepairTarget] ERC20Standard:transfer:27\nCODE: balances[_recipient] += _value\nOPERATION: balances[_recipient] [+=] _value\nSSA: REF_3 [+] _value_1 --> REF_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x942e0f9072d5ddb737a6210f08187a1cb435c2dd",
        "target": "[RepairTarget] ERC20Standard:transferFrom:34\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_8 [-] _value_1 --> REF_8\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x946c4bf0b8ed7d42234c25b95119ff1645831d3a",
        "target": "[RepairTarget] Finafex:transfer:175\nCODE: require(balances[_to] + _amount > balances[_to])\nOPERATION: balances[_to] [+] _amount\nSSA: REF_4 [+] _amount_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0x964df0c4aeaad9bc563ebedf5c32accd0d56069d",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x966f969125802bfb677f036a4d41fcbdccc29edd",
        "target": "[RepairTarget] SafeMath:div:51\nCODE: uint256 c = a / b\nOPERATION: a [/] b\nSSA: a_1 [/] b_1 --> TMP_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x96f7ff4bf0dd4fd897ee4f37a3a594dd918dc46f",
        "target": "[RepairTarget] PDAToken:_transfer:121\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x978ea7f09ba5bb5c16214f189a5a5c2a50ee6204",
        "target": "[RepairTarget] TokenERC20:_transfer:115\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9abf396b6d996b8587954e14d232e11b4159191d",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9b0e41d224385d0648d033ab49c9355040d73b94",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa10d5e0350df81100b3587dd21f3e8702203b8e1",
        "target": "[RepairTarget] SafeMath:mul:65\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa1f052b88af5c491c4604df9e18b4c71a0c6e035",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa3b751fff78c3f72cebb5de08560e5f530303a6a",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xa4ec8e6ce545dfc3197724bec6db486b1558a35e",
        "target": "[RepairTarget] SafeMath32:pow:219\nCODE: assert(c / (a ** (b - 1)) == a)\nOPERATION: b [-] 1\nSSA: b_1 [-] 1 --> TMP_55\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa4ec8e6ce545dfc3197724bec6db486b1558a35e",
        "target": "[RepairTarget] SafeMath32:pow:219\nCODE: assert(c / (a ** (b - 1)) == a)\nOPERATION: c [/] (a ** (b - 1))\nSSA: c_1 [/] TMP_56 --> TMP_57\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa73e3f0905315af22f49b4602f5ee608bf783fd8",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xaa6e73f27efdecb282baaba5914dc23a41fc233c",
        "target": "[RepairTarget] JILTOKEN:_transfer:119\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xacac7beef18102a764c36caf598bd276a5da87e4",
        "target": "[RepairTarget] SafeMath:mul:61\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xae1afc573654ec294e277c7c723f29e799528a87",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xafdffc6d9b3386da14b65c586667770ed35d1a6e",
        "target": "[RepairTarget] EtherSnap:transferFrom:127\nCODE: balances[from] -= tokens\nOPERATION: balances[from] [-=] tokens\nSSA: REF_15 [-] tokens_1 --> REF_15\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb128945ebc9327ce535d1c15a53120948333de6a",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb178b03ccd81510c19f1fa9727f4ccdf471ad4a2",
        "target": "[RepairTarget] GOS:burnFrom:160\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb178b03ccd81510c19f1fa9727f4ccdf471ad4a2",
        "target": "[RepairTarget] GOS:_transfer:63\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb1c47733ac6fe128dd19e82db97e891bec1475db",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb31d537a0ef77c4d6f3115810e4b86791bd27cd0",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb33a7597d65f8d823b71fc6e3b6a5039298ffd23",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb5b67b0bd9f0f188e900d6a50cd1d66a6d9932f7",
        "target": "[RepairTarget] SafeMath256:pow:111\nCODE: assert(c / (a ** (b - 1)) == a)\nOPERATION: c [/] (a ** (b - 1))\nSSA: c_1 [/] TMP_29 --> TMP_30\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb5b67b0bd9f0f188e900d6a50cd1d66a6d9932f7",
        "target": "[RepairTarget] SafeMath256:pow:111\nCODE: assert(c / (a ** (b - 1)) == a)\nOPERATION: b [-] 1\nSSA: b_1 [-] 1 --> TMP_28\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb62d1b9b74d72f1b831d31e0599272fa84059137",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb657708d990414bca245e11a2abdcdd11f9227c6",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xb6de0796f075ea7fc8bddeed113d173e8760ac0c",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xb82ba563ea46c366c2c18b9d7a6fce12600ac5de",
        "target": "[RepairTarget] Finafex:transfer:175\nCODE: require(balances[_to] + _amount > balances[_to])\nOPERATION: balances[_to] [+] _amount\nSSA: REF_4 [+] _amount_1 --> TMP_12\n",
        "fp": "1",
        "reason": "safe_check"
    },
    {
        "contract": "0xb94168b54e23c90f2066af02a16a299919bb895c",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: require(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xba9be322fb1dec8dcd19ff229324aba2921e2316",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbadac68d3d59b3156de50ce7e2b7c756cbe52fee",
        "target": "[RepairTarget] stakethemall:coreValidMode1Score:1121\nCODE: _gain /= (10*10*10)\nOPERATION: _gain [/=] (10*10*10)\nSSA: _gain_3 [/] TMP_123 --> _gain_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbadac68d3d59b3156de50ce7e2b7c756cbe52fee",
        "target": "[RepairTarget] stakethemall:coreValidMode1Score:1121\nCODE: _gain /= (10*10*10)\nOPERATION: 10 [*] 10\nSSA: 10 [*] 10 --> TMP_122\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xbadac68d3d59b3156de50ce7e2b7c756cbe52fee",
        "target": "[RepairTarget] stakethemall:coreValidMode1Score:1121\nCODE: _gain /= (10*10*10)\nOPERATION: 10*10 [*] 10\nSSA: TMP_122 [*] 10 --> TMP_123\n",
        "fp": "1",
        "reason": "safe_range"
    },
    {
        "contract": "0xbb5350b4727835d8da25250719330ff6664bf1c8",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbbdbccb13d09975fa9e3e9c8fa129b61065c84f3",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbc5e7120e1e917c6ba34e94b3a29016f64bbd2c1",
        "target": "[RepairTarget] RocketCash:fallback:153\nCODE: administrationFund.transfer(msg.value * 15 / 100)\nOPERATION: msg.value [*] 15\nSSA: msg.value [*] 15 --> TMP_22\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbc5e7120e1e917c6ba34e94b3a29016f64bbd2c1",
        "target": "[RepairTarget] RocketCash:fallback:153\nCODE: administrationFund.transfer(msg.value * 15 / 100)\nOPERATION: msg.value * 15 [/] 100\nSSA: TMP_22 [/] 100 --> TMP_23\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xbe2a1d562817b6064e0568a4dc9e2c80f7478dfe",
        "target": "[RepairTarget] TSCoin:_transfer:81\nCODE: balances[_to] = balances[_to] + _value\nOPERATION: balances[_to] [+] _value\nSSA: REF_7 [+] _value_1 --> TMP_6\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbf5dfe91cc5c793fab2cfeb2f8195b61ce7d074d",
        "target": "[RepairTarget] SafeMath:add:58\nCODE: uint256 c = a + b\nOPERATION: a [+] b\nSSA: a_1 [+] b_1 --> TMP_11\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xbf88b8cb1d7d1e65485d85c5b950fcb3def80f84",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc09544309e1997d19246f4b5af9f030d825d8590",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc22b670c4ab672a38f4c5b59d1332020afb78c98",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc35e16a4fb05f12e3cb0253c807ee76c2833be65",
        "target": "[RepairTarget] TokenSEOS:_transfer:63\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc437749b6d67314076194812fe6a4fb1f4184b13",
        "target": "[RepairTarget] TokenERC20:_transfer:119\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc4398fc453d32aa22f3906f23d27475ba6a313af",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc450fe148e1345e9e3de0a3582b4de99c724c711",
        "target": "[RepairTarget] SafeMath:mul:51\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc862e8ce69a67aef7d19d8204a79973aced05154",
        "target": "[RepairTarget] SafeMath:add:54\nCODE: c = _a + _b\nOPERATION: _a [+] _b\nSSA: _a_1 [+] _b_1 --> TMP_9\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xc8dca751275197e0af2066686b10545b4c592656",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc9a948939e31777b48943a2d423888905c80a872",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xca47c7153bfea96d3f531f151877e67c11f70294",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xcc562bbcd61722aeba2672f1eff61e446324f79e",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xce898c28ba0aef683bc49256fd225a72cffd2e08",
        "target": "[RepairTarget] StandardToken:transfer:63\nCODE: balances[msg.sender] -= _value\nOPERATION: balances[msg.sender] [-=] _value\nSSA: REF_5 [-] _value_1 --> REF_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xce898c28ba0aef683bc49256fd225a72cffd2e08",
        "target": "[RepairTarget] StandardToken:transferFrom:81\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_17 [+] _value_1 --> REF_17\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd3faa38c0d0f77130efd806a4cc0526465803670",
        "target": "[RepairTarget] BTC666:delegate:43\nCODE: proposals[delegateTo.vote].voteCount += sender.weight\nOPERATION: proposals[delegateTo.vote].voteCount [+=] sender.weight\nSSA: REF_21 [+] REF_22 --> REF_21\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd653550a308ed2ecc05ab86475b32c6dfd59d22a",
        "target": "[RepairTarget] YoungToken:_transfer:73\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xd699eb51ceedef47f0d90a98eca066f2c36ec2ed",
        "target": "[RepairTarget] AENToken:_transfer:63\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xd78cb4a587b9b77ceecde82b3e4c22ec68324c2b",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xd9af2d11d788da0097076f4eb21bd1c5533743d9",
        "target": "[RepairTarget] SafeMath:mul:43\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdac2bd8fbaae386eb50f084b82a04815dd8b0a60",
        "target": "[RepairTarget] SafeMath:safeMul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xdc957c422026177afe24421fc5ac8b2fa0c38ac7",
        "target": "[RepairTarget] HgcToken:transferFrom:86\nCODE: accountTo.available += _value\nOPERATION: accountTo.available [+=] _value\nSSA: REF_16 [+] _value_1 --> REF_16\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xdf03332ed6f3e493fb1d7eb70a6cc11fb0251bc5",
        "target": "[RepairTarget] SafeMath:mul:65\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe19937b53da7275bc5d6ca679f19fd88a549d163",
        "target": "[RepairTarget] WWCToken:constructor:61\nCODE: totalSupply = _initialAmount * weisPerEth\nOPERATION: _initialAmount [*] weisPerEth\nSSA: _initialAmount_1 [*] weisPerEth_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe1d4d57b24dbfc5dd814f852749c34d37f5b898d",
        "target": "[RepairTarget] SafeMath:mul:49\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe787e7c571ce23e5a523caf785106516a244f344",
        "target": "[RepairTarget] StandardToken:transferFrom:36\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xe78bb072d7eaccca83080063fc7e82c7e694ca56",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xe947ce8712c9481ca762afb36adecae2f33c7116",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xeb9114b0389b72d7f0458467661b1d932666a211",
        "target": "[RepairTarget] SafeMath:mul:25\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xedbc41b7d0330860be1dd8d682b2e868ae6da6e4",
        "target": "[RepairTarget] SafeMath:mul:27\nCODE: c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xedce000cb91ab04a57cf31ccc23770bc528fd2e6",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xefb74671eec05de9798d63a82b8a670dda165751",
        "target": "[RepairTarget] SafeMath:safeMul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf0eb75d7a2097a25796848c54e9eb862a93664ec",
        "target": "[RepairTarget] TKTToken:_transfer:53\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf2d32cfa422a4a5b7074050651ca380eb0cf0a8c",
        "target": "[RepairTarget] EasyStockExchange:fallback:97\nCODE: uint256 amount = invested[msg.sender] * 4 / 100 * (block.number - atBlock[msg.sender]) / 5900\nOPERATION: invested[msg.sender] * 4 / 100 [*] (block.number - atBlock[msg.sender])\nSSA: TMP_2 [*] TMP_3 --> TMP_4\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf2d32cfa422a4a5b7074050651ca380eb0cf0a8c",
        "target": "[RepairTarget] EasyStockExchange:fallback:97\nCODE: uint256 amount = invested[msg.sender] * 4 / 100 * (block.number - atBlock[msg.sender]) / 5900\nOPERATION: invested[msg.sender] [*] 4\nSSA: REF_1 [*] 4 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf2d32cfa422a4a5b7074050651ca380eb0cf0a8c",
        "target": "[RepairTarget] EasyStockExchange:fallback:97\nCODE: uint256 amount = invested[msg.sender] * 4 / 100 * (block.number - atBlock[msg.sender]) / 5900\nOPERATION: block.number [-] atBlock[msg.sender]\nSSA: block.number [-] REF_2 --> TMP_3\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf2d32cfa422a4a5b7074050651ca380eb0cf0a8c",
        "target": "[RepairTarget] EasyStockExchange:fallback:97\nCODE: uint256 amount = invested[msg.sender] * 4 / 100 * (block.number - atBlock[msg.sender]) / 5900\nOPERATION: invested[msg.sender] * 4 [/] 100\nSSA: TMP_1 [/] 100 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf2d32cfa422a4a5b7074050651ca380eb0cf0a8c",
        "target": "[RepairTarget] EasyStockExchange:fallback:97\nCODE: uint256 amount = invested[msg.sender] * 4 / 100 * (block.number - atBlock[msg.sender]) / 5900\nOPERATION: invested[msg.sender] * 4 / 100 * (block.number - atBlock[msg.sender]) [/] 5900\nSSA: TMP_4 [/] 5900 --> TMP_5\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf2fc92ccbd3fe243505497b6474257654164abc7",
        "target": "[RepairTarget] SafeMath:mul:33\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf3029bb35b3a2cc64acf85ef7589d1209b975c69",
        "target": "[RepairTarget] TaichiWorldCoin:_transfer:123\nCODE: uint previousBalances = balanceOf[_from] + balanceOf[_to]\nOPERATION: balanceOf[_from] [+] balanceOf[_to]\nSSA: REF_4 [+] REF_5 --> TMP_10\n",
        "fp": "1",
        "reason": "invariant_check"
    },
    {
        "contract": "0xf302c73a4ea09e9c7967386c4044496c0bf6f1af",
        "target": "[RepairTarget] SafeMath:mul:53\nCODE: assert(c / _a == _b)\nOPERATION: c [/] _a\nSSA: c_1 [/] _a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf45ddade19d34323a21e4f7ee924994468ee4e0b",
        "target": "[RepairTarget] DRCChain:transfer:89\nCODE: balanceOf[msg.sender] -= _value\nOPERATION: balanceOf[msg.sender] [-=] _value\nSSA: REF_4 [-] _value_1 --> REF_4\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf574e8610b8932da98186b38c54d9e6c393e1429",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(a == 0 || c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xf5c6acb57f13de23b2140b0b399cd7eeae800ff8",
        "target": "[RepairTarget] SafeMath32:pow:219\nCODE: assert(c / (a ** (b - 1)) == a)\nOPERATION: b [-] 1\nSSA: b_1 [-] 1 --> TMP_55\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf5c6acb57f13de23b2140b0b399cd7eeae800ff8",
        "target": "[RepairTarget] SafeMath32:pow:219\nCODE: assert(c / (a ** (b - 1)) == a)\nOPERATION: c [/] (a ** (b - 1))\nSSA: c_1 [/] TMP_56 --> TMP_57\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xf70dd18b0f5d943ef7a8e621be66919b0c44ab28",
        "target": "[RepairTarget] SafeMath:safeMul:17\nCODE: uint c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_0\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfb20844d11c289aef31a331268a4b9dcbbfbdeb1",
        "target": "[RepairTarget] SafeMath:mul:31\nCODE: uint256 c = a * b\nOPERATION: a [*] b\nSSA: a_1 [*] b_1 --> TMP_1\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfd758198157172be9f55e34f0ee7832e80088d09",
        "target": "[RepairTarget] StandardToken:transfer:25\nCODE: balances[_to] += _value\nOPERATION: balances[_to] [+=] _value\nSSA: REF_2 [+] _value_1 --> REF_2\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfd758198157172be9f55e34f0ee7832e80088d09",
        "target": "[RepairTarget] StandardToken:transferFrom:34\nCODE: balances[_from] -= _value\nOPERATION: balances[_from] [-=] _value\nSSA: REF_7 [-] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xfefe4f85b56d7ec3d731896b1589b0881ac07e0b",
        "target": "[RepairTarget] HOWEOToken:_transfer:53\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_6 [-] _value_1 --> REF_6\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x4827f5a52c9787c6684f74ba1481313451a22d7c",
        "target": "[RepairTarget] TokenREXC:burnFrom:183\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x4827f5a52c9787c6684f74ba1481313451a22d7c",
        "target": "[RepairTarget] TokenREXC:_transfer:62\nCODE: balanceOf[_to] += _value\nOPERATION: balanceOf[_to] [+=] _value\nSSA: REF_7 [+] _value_1 --> REF_7\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x9e5c47e1ed377a28a922ee883bb0cf4b64e60e30",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xa54629f15f9149490b3bc51e9829fd3a932ce506",
        "target": "[RepairTarget] TokenERC20:burnFrom:83\nCODE: balanceOf[_from] -= _value\nOPERATION: balanceOf[_from] [-=] _value\nSSA: REF_22 [-] _value_1 --> REF_22\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xab17a5b6bacfc71cdeb77848b0b0ff7c3e5c9ed3",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0xc64ec6766ac88d71fc9bdca2ca955750bc8c57b9",
        "target": "[RepairTarget] TokenATIC:burnFrom:187\nCODE: totalSupply -= _value\nOPERATION: totalSupply [-=] _value\nSSA: totalSupply_4 [-] _value_1 --> totalSupply_5\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0xfd26e0b9178acbe9d783d3d80f259b6ff6e80fdd",
        "target": "[RepairTarget] MultiSigWallet:removeOwner:152\nCODE: i++\nOPERATION: [++] i\nSSA: i_2 [+] 1 --> i_3\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x696fb273ecc1212ec87d090cdeddde6ed0ac33cf",
        "target": "[RepairTarget] SafeMath:mul:29\nCODE: assert(c / a == b)\nOPERATION: c [/] a\nSSA: c_1 [/] a_1 --> TMP_2\n",
        "fp": "1",
        "reason": "context_constrain"
    },
    {
        "contract": "0x7090a6e22c838469c9e67851d6489ba9c933a43f",
        "target": "[RepairTarget] ZuckBucks:fallback:120\nCODE: giveaway_value = (((starting_giveaway / giveaway_count) + (starting_giveaway / (giveaway_count + 2))) * (10**18 + eth_val)) / 10**18\nOPERATION: 10**18 [+] eth_val\nSSA: TMP_27 [+] eth_val_1 --> TMP_28\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7090a6e22c838469c9e67851d6489ba9c933a43f",
        "target": "[RepairTarget] ZuckBucks:fallback:120\nCODE: giveaway_value = (((starting_giveaway / giveaway_count) + (starting_giveaway / (giveaway_count + 2))) * (10**18 + eth_val)) / 10**18\nOPERATION: ((starting_giveaway / giveaway_count) + (starting_giveaway / (giveaway_count + 2))) [*] (10**18 + eth_val)\nSSA: TMP_26 [*] TMP_28 --> TMP_29\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7090a6e22c838469c9e67851d6489ba9c933a43f",
        "target": "[RepairTarget] ZuckBucks:fallback:120\nCODE: giveaway_value = (((starting_giveaway / giveaway_count) + (starting_giveaway / (giveaway_count + 2))) * (10**18 + eth_val)) / 10**18\nOPERATION: (((starting_giveaway / giveaway_count) + (starting_giveaway / (giveaway_count + 2))) * (10**18 + eth_val)) [/] 10**18\nSSA: TMP_29 [/] TMP_30 --> TMP_31\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7090a6e22c838469c9e67851d6489ba9c933a43f",
        "target": "[RepairTarget] ZuckBucks:fallback:120\nCODE: giveaway_value = (((starting_giveaway / giveaway_count) + (starting_giveaway / (giveaway_count + 2))) * (10**18 + eth_val)) / 10**18\nOPERATION: starting_giveaway [/] giveaway_count\nSSA: starting_giveaway_1 [/] TMP_24 --> TMP_25\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7090a6e22c838469c9e67851d6489ba9c933a43f",
        "target": "[RepairTarget] ZuckBucks:fallback:120\nCODE: giveaway_value = (((starting_giveaway / giveaway_count) + (starting_giveaway / (giveaway_count + 2))) * (10**18 + eth_val)) / 10**18\nOPERATION: giveaway_count [+] 2\nSSA: giveaway_count_2 [+] 2 --> TMP_24\n",
        "fp": "",
        "reason": ""
    },
    {
        "contract": "0x7090a6e22c838469c9e67851d6489ba9c933a43f",
        "target": "[RepairTarget] ZuckBucks:fallback:120\nCODE: giveaway_value = (((starting_giveaway / giveaway_count) + (starting_giveaway / (giveaway_count + 2))) * (10**18 + eth_val)) / 10**18\nOPERATION: starting_giveaway [/] (giveaway_count + 2)\nSSA: starting_giveaway_1 [/] giveaway_count_2 --> TMP_23\n",
        "fp": "",
        "reason": ""
    }
]